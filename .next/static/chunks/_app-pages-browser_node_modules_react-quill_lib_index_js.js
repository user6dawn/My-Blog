"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_react-quill_lib_index_js"],{

/***/ "(app-pages-browser)/./node_modules/lodash/_DataView.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_DataView.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar getNative = __webpack_require__(/*! ./_getNative */ \"(app-pages-browser)/./node_modules/lodash/_getNative.js\"), root = __webpack_require__(/*! ./_root */ \"(app-pages-browser)/./node_modules/lodash/_root.js\");\n/* Built-in method references that are verified to be native. */ var DataView = getNative(root, \"DataView\");\nmodule.exports = DataView;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX0RhdGFWaWV3LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxZQUFZQyxtQkFBT0EsQ0FBQyxnRkFDcEJDLE9BQU9ELG1CQUFPQSxDQUFDO0FBRW5CLDhEQUE4RCxHQUM5RCxJQUFJRSxXQUFXSCxVQUFVRSxNQUFNO0FBRS9CRSxPQUFPQyxPQUFPLEdBQUdGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX0RhdGFWaWV3LmpzPzhjNjQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShyb290LCAnRGF0YVZpZXcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBEYXRhVmlldztcbiJdLCJuYW1lcyI6WyJnZXROYXRpdmUiLCJyZXF1aXJlIiwicm9vdCIsIkRhdGFWaWV3IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_DataView.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_Hash.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/_Hash.js ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar hashClear = __webpack_require__(/*! ./_hashClear */ \"(app-pages-browser)/./node_modules/lodash/_hashClear.js\"), hashDelete = __webpack_require__(/*! ./_hashDelete */ \"(app-pages-browser)/./node_modules/lodash/_hashDelete.js\"), hashGet = __webpack_require__(/*! ./_hashGet */ \"(app-pages-browser)/./node_modules/lodash/_hashGet.js\"), hashHas = __webpack_require__(/*! ./_hashHas */ \"(app-pages-browser)/./node_modules/lodash/_hashHas.js\"), hashSet = __webpack_require__(/*! ./_hashSet */ \"(app-pages-browser)/./node_modules/lodash/_hashSet.js\");\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function Hash(entries) {\n    var index = -1, length = entries == null ? 0 : entries.length;\n    this.clear();\n    while(++index < length){\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n    }\n}\n_c = Hash;\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype[\"delete\"] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\nmodule.exports = Hash;\nvar _c;\n$RefreshReg$(_c, \"Hash\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX0hhc2guanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDLGdGQUNwQkMsYUFBYUQsbUJBQU9BLENBQUMsa0ZBQ3JCRSxVQUFVRixtQkFBT0EsQ0FBQyw0RUFDbEJHLFVBQVVILG1CQUFPQSxDQUFDLDRFQUNsQkksVUFBVUosbUJBQU9BLENBQUM7QUFFdEI7Ozs7OztDQU1DLEdBQ0QsU0FBU0ssS0FBS0MsT0FBTztJQUNuQixJQUFJQyxRQUFRLENBQUMsR0FDVEMsU0FBU0YsV0FBVyxPQUFPLElBQUlBLFFBQVFFLE1BQU07SUFFakQsSUFBSSxDQUFDQyxLQUFLO0lBQ1YsTUFBTyxFQUFFRixRQUFRQyxPQUFRO1FBQ3ZCLElBQUlFLFFBQVFKLE9BQU8sQ0FBQ0MsTUFBTTtRQUMxQixJQUFJLENBQUNJLEdBQUcsQ0FBQ0QsS0FBSyxDQUFDLEVBQUUsRUFBRUEsS0FBSyxDQUFDLEVBQUU7SUFDN0I7QUFDRjtLQVRTTDtBQVdULHlCQUF5QjtBQUN6QkEsS0FBS08sU0FBUyxDQUFDSCxLQUFLLEdBQUdWO0FBQ3ZCTSxLQUFLTyxTQUFTLENBQUMsU0FBUyxHQUFHWDtBQUMzQkksS0FBS08sU0FBUyxDQUFDQyxHQUFHLEdBQUdYO0FBQ3JCRyxLQUFLTyxTQUFTLENBQUNFLEdBQUcsR0FBR1g7QUFDckJFLEtBQUtPLFNBQVMsQ0FBQ0QsR0FBRyxHQUFHUDtBQUVyQlcsT0FBT0MsT0FBTyxHQUFHWCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19IYXNoLmpzPzM1NGMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGhhc2hDbGVhciA9IHJlcXVpcmUoJy4vX2hhc2hDbGVhcicpLFxuICAgIGhhc2hEZWxldGUgPSByZXF1aXJlKCcuL19oYXNoRGVsZXRlJyksXG4gICAgaGFzaEdldCA9IHJlcXVpcmUoJy4vX2hhc2hHZXQnKSxcbiAgICBoYXNoSGFzID0gcmVxdWlyZSgnLi9faGFzaEhhcycpLFxuICAgIGhhc2hTZXQgPSByZXF1aXJlKCcuL19oYXNoU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2g7XG4iXSwibmFtZXMiOlsiaGFzaENsZWFyIiwicmVxdWlyZSIsImhhc2hEZWxldGUiLCJoYXNoR2V0IiwiaGFzaEhhcyIsImhhc2hTZXQiLCJIYXNoIiwiZW50cmllcyIsImluZGV4IiwibGVuZ3RoIiwiY2xlYXIiLCJlbnRyeSIsInNldCIsInByb3RvdHlwZSIsImdldCIsImhhcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_Hash.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_ListCache.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_ListCache.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar listCacheClear = __webpack_require__(/*! ./_listCacheClear */ \"(app-pages-browser)/./node_modules/lodash/_listCacheClear.js\"), listCacheDelete = __webpack_require__(/*! ./_listCacheDelete */ \"(app-pages-browser)/./node_modules/lodash/_listCacheDelete.js\"), listCacheGet = __webpack_require__(/*! ./_listCacheGet */ \"(app-pages-browser)/./node_modules/lodash/_listCacheGet.js\"), listCacheHas = __webpack_require__(/*! ./_listCacheHas */ \"(app-pages-browser)/./node_modules/lodash/_listCacheHas.js\"), listCacheSet = __webpack_require__(/*! ./_listCacheSet */ \"(app-pages-browser)/./node_modules/lodash/_listCacheSet.js\");\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function ListCache(entries) {\n    var index = -1, length = entries == null ? 0 : entries.length;\n    this.clear();\n    while(++index < length){\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n    }\n}\n_c = ListCache;\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype[\"delete\"] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\nmodule.exports = ListCache;\nvar _c;\n$RefreshReg$(_c, \"ListCache\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX0xpc3RDYWNoZS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsaUJBQWlCQyxtQkFBT0EsQ0FBQywwRkFDekJDLGtCQUFrQkQsbUJBQU9BLENBQUMsNEZBQzFCRSxlQUFlRixtQkFBT0EsQ0FBQyxzRkFDdkJHLGVBQWVILG1CQUFPQSxDQUFDLHNGQUN2QkksZUFBZUosbUJBQU9BLENBQUM7QUFFM0I7Ozs7OztDQU1DLEdBQ0QsU0FBU0ssVUFBVUMsT0FBTztJQUN4QixJQUFJQyxRQUFRLENBQUMsR0FDVEMsU0FBU0YsV0FBVyxPQUFPLElBQUlBLFFBQVFFLE1BQU07SUFFakQsSUFBSSxDQUFDQyxLQUFLO0lBQ1YsTUFBTyxFQUFFRixRQUFRQyxPQUFRO1FBQ3ZCLElBQUlFLFFBQVFKLE9BQU8sQ0FBQ0MsTUFBTTtRQUMxQixJQUFJLENBQUNJLEdBQUcsQ0FBQ0QsS0FBSyxDQUFDLEVBQUUsRUFBRUEsS0FBSyxDQUFDLEVBQUU7SUFDN0I7QUFDRjtLQVRTTDtBQVdULDhCQUE4QjtBQUM5QkEsVUFBVU8sU0FBUyxDQUFDSCxLQUFLLEdBQUdWO0FBQzVCTSxVQUFVTyxTQUFTLENBQUMsU0FBUyxHQUFHWDtBQUNoQ0ksVUFBVU8sU0FBUyxDQUFDQyxHQUFHLEdBQUdYO0FBQzFCRyxVQUFVTyxTQUFTLENBQUNFLEdBQUcsR0FBR1g7QUFDMUJFLFVBQVVPLFNBQVMsQ0FBQ0QsR0FBRyxHQUFHUDtBQUUxQlcsT0FBT0MsT0FBTyxHQUFHWCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19MaXN0Q2FjaGUuanM/NDFlNiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbGlzdENhY2hlQ2xlYXIgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVDbGVhcicpLFxuICAgIGxpc3RDYWNoZURlbGV0ZSA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZURlbGV0ZScpLFxuICAgIGxpc3RDYWNoZUdldCA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUdldCcpLFxuICAgIGxpc3RDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUhhcycpLFxuICAgIGxpc3RDYWNoZVNldCA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZVNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gTGlzdENhY2hlO1xuIl0sIm5hbWVzIjpbImxpc3RDYWNoZUNsZWFyIiwicmVxdWlyZSIsImxpc3RDYWNoZURlbGV0ZSIsImxpc3RDYWNoZUdldCIsImxpc3RDYWNoZUhhcyIsImxpc3RDYWNoZVNldCIsIkxpc3RDYWNoZSIsImVudHJpZXMiLCJpbmRleCIsImxlbmd0aCIsImNsZWFyIiwiZW50cnkiLCJzZXQiLCJwcm90b3R5cGUiLCJnZXQiLCJoYXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_ListCache.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_Map.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/_Map.js ***!
  \*************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar getNative = __webpack_require__(/*! ./_getNative */ \"(app-pages-browser)/./node_modules/lodash/_getNative.js\"), root = __webpack_require__(/*! ./_root */ \"(app-pages-browser)/./node_modules/lodash/_root.js\");\n/* Built-in method references that are verified to be native. */ var Map = getNative(root, \"Map\");\nmodule.exports = Map;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX01hcC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsWUFBWUMsbUJBQU9BLENBQUMsZ0ZBQ3BCQyxPQUFPRCxtQkFBT0EsQ0FBQztBQUVuQiw4REFBOEQsR0FDOUQsSUFBSUUsTUFBTUgsVUFBVUUsTUFBTTtBQUUxQkUsT0FBT0MsT0FBTyxHQUFHRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19NYXAuanM/YzE5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFwO1xuIl0sIm5hbWVzIjpbImdldE5hdGl2ZSIsInJlcXVpcmUiLCJyb290IiwiTWFwIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_Map.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_MapCache.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_MapCache.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar mapCacheClear = __webpack_require__(/*! ./_mapCacheClear */ \"(app-pages-browser)/./node_modules/lodash/_mapCacheClear.js\"), mapCacheDelete = __webpack_require__(/*! ./_mapCacheDelete */ \"(app-pages-browser)/./node_modules/lodash/_mapCacheDelete.js\"), mapCacheGet = __webpack_require__(/*! ./_mapCacheGet */ \"(app-pages-browser)/./node_modules/lodash/_mapCacheGet.js\"), mapCacheHas = __webpack_require__(/*! ./_mapCacheHas */ \"(app-pages-browser)/./node_modules/lodash/_mapCacheHas.js\"), mapCacheSet = __webpack_require__(/*! ./_mapCacheSet */ \"(app-pages-browser)/./node_modules/lodash/_mapCacheSet.js\");\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function MapCache(entries) {\n    var index = -1, length = entries == null ? 0 : entries.length;\n    this.clear();\n    while(++index < length){\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n    }\n}\n_c = MapCache;\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype[\"delete\"] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\nmodule.exports = MapCache;\nvar _c;\n$RefreshReg$(_c, \"MapCache\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX01hcENhY2hlLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxnQkFBZ0JDLG1CQUFPQSxDQUFDLHdGQUN4QkMsaUJBQWlCRCxtQkFBT0EsQ0FBQywwRkFDekJFLGNBQWNGLG1CQUFPQSxDQUFDLG9GQUN0QkcsY0FBY0gsbUJBQU9BLENBQUMsb0ZBQ3RCSSxjQUFjSixtQkFBT0EsQ0FBQztBQUUxQjs7Ozs7O0NBTUMsR0FDRCxTQUFTSyxTQUFTQyxPQUFPO0lBQ3ZCLElBQUlDLFFBQVEsQ0FBQyxHQUNUQyxTQUFTRixXQUFXLE9BQU8sSUFBSUEsUUFBUUUsTUFBTTtJQUVqRCxJQUFJLENBQUNDLEtBQUs7SUFDVixNQUFPLEVBQUVGLFFBQVFDLE9BQVE7UUFDdkIsSUFBSUUsUUFBUUosT0FBTyxDQUFDQyxNQUFNO1FBQzFCLElBQUksQ0FBQ0ksR0FBRyxDQUFDRCxLQUFLLENBQUMsRUFBRSxFQUFFQSxLQUFLLENBQUMsRUFBRTtJQUM3QjtBQUNGO0tBVFNMO0FBV1QsNkJBQTZCO0FBQzdCQSxTQUFTTyxTQUFTLENBQUNILEtBQUssR0FBR1Y7QUFDM0JNLFNBQVNPLFNBQVMsQ0FBQyxTQUFTLEdBQUdYO0FBQy9CSSxTQUFTTyxTQUFTLENBQUNDLEdBQUcsR0FBR1g7QUFDekJHLFNBQVNPLFNBQVMsQ0FBQ0UsR0FBRyxHQUFHWDtBQUN6QkUsU0FBU08sU0FBUyxDQUFDRCxHQUFHLEdBQUdQO0FBRXpCVyxPQUFPQyxPQUFPLEdBQUdYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX01hcENhY2hlLmpzPzk3MGMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIG1hcENhY2hlQ2xlYXIgPSByZXF1aXJlKCcuL19tYXBDYWNoZUNsZWFyJyksXG4gICAgbWFwQ2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19tYXBDYWNoZURlbGV0ZScpLFxuICAgIG1hcENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVHZXQnKSxcbiAgICBtYXBDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX21hcENhY2hlSGFzJyksXG4gICAgbWFwQ2FjaGVTZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZVNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXBDYWNoZTtcbiJdLCJuYW1lcyI6WyJtYXBDYWNoZUNsZWFyIiwicmVxdWlyZSIsIm1hcENhY2hlRGVsZXRlIiwibWFwQ2FjaGVHZXQiLCJtYXBDYWNoZUhhcyIsIm1hcENhY2hlU2V0IiwiTWFwQ2FjaGUiLCJlbnRyaWVzIiwiaW5kZXgiLCJsZW5ndGgiLCJjbGVhciIsImVudHJ5Iiwic2V0IiwicHJvdG90eXBlIiwiZ2V0IiwiaGFzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_MapCache.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_Promise.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_Promise.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar getNative = __webpack_require__(/*! ./_getNative */ \"(app-pages-browser)/./node_modules/lodash/_getNative.js\"), root = __webpack_require__(/*! ./_root */ \"(app-pages-browser)/./node_modules/lodash/_root.js\");\n/* Built-in method references that are verified to be native. */ var Promise = getNative(root, \"Promise\");\nmodule.exports = Promise;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1Byb21pc2UuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDLGdGQUNwQkMsT0FBT0QsbUJBQU9BLENBQUM7QUFFbkIsOERBQThELEdBQzlELElBQUlFLFVBQVVILFVBQVVFLE1BQU07QUFFOUJFLE9BQU9DLE9BQU8sR0FBR0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fUHJvbWlzZS5qcz82NDI2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgUHJvbWlzZSA9IGdldE5hdGl2ZShyb290LCAnUHJvbWlzZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21pc2U7XG4iXSwibmFtZXMiOlsiZ2V0TmF0aXZlIiwicmVxdWlyZSIsInJvb3QiLCJQcm9taXNlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_Promise.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_Set.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/_Set.js ***!
  \*************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar getNative = __webpack_require__(/*! ./_getNative */ \"(app-pages-browser)/./node_modules/lodash/_getNative.js\"), root = __webpack_require__(/*! ./_root */ \"(app-pages-browser)/./node_modules/lodash/_root.js\");\n/* Built-in method references that are verified to be native. */ var Set = getNative(root, \"Set\");\nmodule.exports = Set;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1NldC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsWUFBWUMsbUJBQU9BLENBQUMsZ0ZBQ3BCQyxPQUFPRCxtQkFBT0EsQ0FBQztBQUVuQiw4REFBOEQsR0FDOUQsSUFBSUUsTUFBTUgsVUFBVUUsTUFBTTtBQUUxQkUsT0FBT0MsT0FBTyxHQUFHRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TZXQuanM/ZGJhOSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFNldCA9IGdldE5hdGl2ZShyb290LCAnU2V0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0O1xuIl0sIm5hbWVzIjpbImdldE5hdGl2ZSIsInJlcXVpcmUiLCJyb290IiwiU2V0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_Set.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_SetCache.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_SetCache.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar MapCache = __webpack_require__(/*! ./_MapCache */ \"(app-pages-browser)/./node_modules/lodash/_MapCache.js\"), setCacheAdd = __webpack_require__(/*! ./_setCacheAdd */ \"(app-pages-browser)/./node_modules/lodash/_setCacheAdd.js\"), setCacheHas = __webpack_require__(/*! ./_setCacheHas */ \"(app-pages-browser)/./node_modules/lodash/_setCacheHas.js\");\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */ function SetCache(values) {\n    var index = -1, length = values == null ? 0 : values.length;\n    this.__data__ = new MapCache;\n    while(++index < length){\n        this.add(values[index]);\n    }\n}\n_c = SetCache;\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\nmodule.exports = SetCache;\nvar _c;\n$RefreshReg$(_c, \"SetCache\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1NldENhY2hlLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxXQUFXQyxtQkFBT0EsQ0FBQyw4RUFDbkJDLGNBQWNELG1CQUFPQSxDQUFDLG9GQUN0QkUsY0FBY0YsbUJBQU9BLENBQUM7QUFFMUI7Ozs7Ozs7Q0FPQyxHQUNELFNBQVNHLFNBQVNDLE1BQU07SUFDdEIsSUFBSUMsUUFBUSxDQUFDLEdBQ1RDLFNBQVNGLFVBQVUsT0FBTyxJQUFJQSxPQUFPRSxNQUFNO0lBRS9DLElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUlSO0lBQ3BCLE1BQU8sRUFBRU0sUUFBUUMsT0FBUTtRQUN2QixJQUFJLENBQUNFLEdBQUcsQ0FBQ0osTUFBTSxDQUFDQyxNQUFNO0lBQ3hCO0FBQ0Y7S0FSU0Y7QUFVVCw2QkFBNkI7QUFDN0JBLFNBQVNNLFNBQVMsQ0FBQ0QsR0FBRyxHQUFHTCxTQUFTTSxTQUFTLENBQUNDLElBQUksR0FBR1Q7QUFDbkRFLFNBQVNNLFNBQVMsQ0FBQ0UsR0FBRyxHQUFHVDtBQUV6QlUsT0FBT0MsT0FBTyxHQUFHViIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TZXRDYWNoZS5qcz9lMmU0Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyksXG4gICAgc2V0Q2FjaGVBZGQgPSByZXF1aXJlKCcuL19zZXRDYWNoZUFkZCcpLFxuICAgIHNldENhY2hlSGFzID0gcmVxdWlyZSgnLi9fc2V0Q2FjaGVIYXMnKTtcblxuLyoqXG4gKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cblNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNldENhY2hlO1xuIl0sIm5hbWVzIjpbIk1hcENhY2hlIiwicmVxdWlyZSIsInNldENhY2hlQWRkIiwic2V0Q2FjaGVIYXMiLCJTZXRDYWNoZSIsInZhbHVlcyIsImluZGV4IiwibGVuZ3RoIiwiX19kYXRhX18iLCJhZGQiLCJwcm90b3R5cGUiLCJwdXNoIiwiaGFzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_SetCache.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_Stack.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_Stack.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar ListCache = __webpack_require__(/*! ./_ListCache */ \"(app-pages-browser)/./node_modules/lodash/_ListCache.js\"), stackClear = __webpack_require__(/*! ./_stackClear */ \"(app-pages-browser)/./node_modules/lodash/_stackClear.js\"), stackDelete = __webpack_require__(/*! ./_stackDelete */ \"(app-pages-browser)/./node_modules/lodash/_stackDelete.js\"), stackGet = __webpack_require__(/*! ./_stackGet */ \"(app-pages-browser)/./node_modules/lodash/_stackGet.js\"), stackHas = __webpack_require__(/*! ./_stackHas */ \"(app-pages-browser)/./node_modules/lodash/_stackHas.js\"), stackSet = __webpack_require__(/*! ./_stackSet */ \"(app-pages-browser)/./node_modules/lodash/_stackSet.js\");\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function Stack(entries) {\n    var data = this.__data__ = new ListCache(entries);\n    this.size = data.size;\n}\n_c = Stack;\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype[\"delete\"] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\nmodule.exports = Stack;\nvar _c;\n$RefreshReg$(_c, \"Stack\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N0YWNrLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxZQUFZQyxtQkFBT0EsQ0FBQyxnRkFDcEJDLGFBQWFELG1CQUFPQSxDQUFDLGtGQUNyQkUsY0FBY0YsbUJBQU9BLENBQUMsb0ZBQ3RCRyxXQUFXSCxtQkFBT0EsQ0FBQyw4RUFDbkJJLFdBQVdKLG1CQUFPQSxDQUFDLDhFQUNuQkssV0FBV0wsbUJBQU9BLENBQUM7QUFFdkI7Ozs7OztDQU1DLEdBQ0QsU0FBU00sTUFBTUMsT0FBTztJQUNwQixJQUFJQyxPQUFPLElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUlWLFVBQVVRO0lBQ3pDLElBQUksQ0FBQ0csSUFBSSxHQUFHRixLQUFLRSxJQUFJO0FBQ3ZCO0tBSFNKO0FBS1QsMEJBQTBCO0FBQzFCQSxNQUFNSyxTQUFTLENBQUNDLEtBQUssR0FBR1g7QUFDeEJLLE1BQU1LLFNBQVMsQ0FBQyxTQUFTLEdBQUdUO0FBQzVCSSxNQUFNSyxTQUFTLENBQUNFLEdBQUcsR0FBR1Y7QUFDdEJHLE1BQU1LLFNBQVMsQ0FBQ0csR0FBRyxHQUFHVjtBQUN0QkUsTUFBTUssU0FBUyxDQUFDSSxHQUFHLEdBQUdWO0FBRXRCVyxPQUFPQyxPQUFPLEdBQUdYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N0YWNrLmpzP2VmZjAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIHN0YWNrQ2xlYXIgPSByZXF1aXJlKCcuL19zdGFja0NsZWFyJyksXG4gICAgc3RhY2tEZWxldGUgPSByZXF1aXJlKCcuL19zdGFja0RlbGV0ZScpLFxuICAgIHN0YWNrR2V0ID0gcmVxdWlyZSgnLi9fc3RhY2tHZXQnKSxcbiAgICBzdGFja0hhcyA9IHJlcXVpcmUoJy4vX3N0YWNrSGFzJyksXG4gICAgc3RhY2tTZXQgPSByZXF1aXJlKCcuL19zdGFja1NldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cblN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG5TdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RhY2s7XG4iXSwibmFtZXMiOlsiTGlzdENhY2hlIiwicmVxdWlyZSIsInN0YWNrQ2xlYXIiLCJzdGFja0RlbGV0ZSIsInN0YWNrR2V0Iiwic3RhY2tIYXMiLCJzdGFja1NldCIsIlN0YWNrIiwiZW50cmllcyIsImRhdGEiLCJfX2RhdGFfXyIsInNpemUiLCJwcm90b3R5cGUiLCJjbGVhciIsImdldCIsImhhcyIsInNldCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_Stack.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_Symbol.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_Symbol.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar root = __webpack_require__(/*! ./_root */ \"(app-pages-browser)/./node_modules/lodash/_root.js\");\n/** Built-in value references. */ var Symbol = root.Symbol;\nmodule.exports = Symbol;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N5bWJvbC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsT0FBT0MsbUJBQU9BLENBQUM7QUFFbkIsK0JBQStCLEdBQy9CLElBQUlDLFNBQVNGLEtBQUtFLE1BQU07QUFFeEJDLE9BQU9DLE9BQU8sR0FBR0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3ltYm9sLmpzPzY4NDIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bWJvbDtcbiJdLCJuYW1lcyI6WyJyb290IiwicmVxdWlyZSIsIlN5bWJvbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_Symbol.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_Uint8Array.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_Uint8Array.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar root = __webpack_require__(/*! ./_root */ \"(app-pages-browser)/./node_modules/lodash/_root.js\");\n/** Built-in value references. */ var Uint8Array = root.Uint8Array;\nmodule.exports = Uint8Array;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1VpbnQ4QXJyYXkuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDO0FBRW5CLCtCQUErQixHQUMvQixJQUFJQyxhQUFhRixLQUFLRSxVQUFVO0FBRWhDQyxPQUFPQyxPQUFPLEdBQUdGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1VpbnQ4QXJyYXkuanM/MWMzZiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgVWludDhBcnJheSA9IHJvb3QuVWludDhBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBVaW50OEFycmF5O1xuIl0sIm5hbWVzIjpbInJvb3QiLCJyZXF1aXJlIiwiVWludDhBcnJheSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_Uint8Array.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_WeakMap.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_WeakMap.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar getNative = __webpack_require__(/*! ./_getNative */ \"(app-pages-browser)/./node_modules/lodash/_getNative.js\"), root = __webpack_require__(/*! ./_root */ \"(app-pages-browser)/./node_modules/lodash/_root.js\");\n/* Built-in method references that are verified to be native. */ var WeakMap = getNative(root, \"WeakMap\");\nmodule.exports = WeakMap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1dlYWtNYXAuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDLGdGQUNwQkMsT0FBT0QsbUJBQU9BLENBQUM7QUFFbkIsOERBQThELEdBQzlELElBQUlFLFVBQVVILFVBQVVFLE1BQU07QUFFOUJFLE9BQU9DLE9BQU8sR0FBR0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fV2Vha01hcC5qcz8zY2U5Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgV2Vha01hcCA9IGdldE5hdGl2ZShyb290LCAnV2Vha01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYWtNYXA7XG4iXSwibmFtZXMiOlsiZ2V0TmF0aXZlIiwicmVxdWlyZSIsInJvb3QiLCJXZWFrTWFwIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_WeakMap.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_arrayFilter.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_arrayFilter.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */ \nfunction arrayFilter(array, predicate) {\n    var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];\n    while(++index < length){\n        var value = array[index];\n        if (predicate(value, index, array)) {\n            result[resIndex++] = value;\n        }\n    }\n    return result;\n}\nmodule.exports = arrayFilter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5RmlsdGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztDQVFDO0FBQ0QsU0FBU0EsWUFBWUMsS0FBSyxFQUFFQyxTQUFTO0lBQ25DLElBQUlDLFFBQVEsQ0FBQyxHQUNUQyxTQUFTSCxTQUFTLE9BQU8sSUFBSUEsTUFBTUcsTUFBTSxFQUN6Q0MsV0FBVyxHQUNYQyxTQUFTLEVBQUU7SUFFZixNQUFPLEVBQUVILFFBQVFDLE9BQVE7UUFDdkIsSUFBSUcsUUFBUU4sS0FBSyxDQUFDRSxNQUFNO1FBQ3hCLElBQUlELFVBQVVLLE9BQU9KLE9BQU9GLFFBQVE7WUFDbENLLE1BQU0sQ0FBQ0QsV0FBVyxHQUFHRTtRQUN2QjtJQUNGO0lBQ0EsT0FBT0Q7QUFDVDtBQUVBRSxPQUFPQyxPQUFPLEdBQUdUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5RmlsdGVyLmpzPzAzZGEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZmlsdGVyYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5RmlsdGVyO1xuIl0sIm5hbWVzIjpbImFycmF5RmlsdGVyIiwiYXJyYXkiLCJwcmVkaWNhdGUiLCJpbmRleCIsImxlbmd0aCIsInJlc0luZGV4IiwicmVzdWx0IiwidmFsdWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_arrayFilter.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_arrayLikeKeys.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_arrayLikeKeys.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar baseTimes = __webpack_require__(/*! ./_baseTimes */ \"(app-pages-browser)/./node_modules/lodash/_baseTimes.js\"), isArguments = __webpack_require__(/*! ./isArguments */ \"(app-pages-browser)/./node_modules/lodash/isArguments.js\"), isArray = __webpack_require__(/*! ./isArray */ \"(app-pages-browser)/./node_modules/lodash/isArray.js\"), isBuffer = __webpack_require__(/*! ./isBuffer */ \"(app-pages-browser)/./node_modules/lodash/isBuffer.js\"), isIndex = __webpack_require__(/*! ./_isIndex */ \"(app-pages-browser)/./node_modules/lodash/_isIndex.js\"), isTypedArray = __webpack_require__(/*! ./isTypedArray */ \"(app-pages-browser)/./node_modules/lodash/isTypedArray.js\");\n/** Used for built-in method references. */ var objectProto = Object.prototype;\n/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */ function arrayLikeKeys(value, inherited) {\n    var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;\n    for(var key in value){\n        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.\n        (key == \"length\" || // Node.js 0.10 has enumerable non-index properties on buffers.\n        isBuff && (key == \"offset\" || key == \"parent\") || // PhantomJS 2 has enumerable non-index properties on typed arrays.\n        isType && (key == \"buffer\" || key == \"byteLength\" || key == \"byteOffset\") || // Skip index properties.\n        isIndex(key, length)))) {\n            result.push(key);\n        }\n    }\n    return result;\n}\nmodule.exports = arrayLikeKeys;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5TGlrZUtleXMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDLGdGQUNwQkMsY0FBY0QsbUJBQU9BLENBQUMsa0ZBQ3RCRSxVQUFVRixtQkFBT0EsQ0FBQywwRUFDbEJHLFdBQVdILG1CQUFPQSxDQUFDLDRFQUNuQkksVUFBVUosbUJBQU9BLENBQUMsNEVBQ2xCSyxlQUFlTCxtQkFBT0EsQ0FBQztBQUUzQix5Q0FBeUMsR0FDekMsSUFBSU0sY0FBY0MsT0FBT0MsU0FBUztBQUVsQyw4Q0FBOEMsR0FDOUMsSUFBSUMsaUJBQWlCSCxZQUFZRyxjQUFjO0FBRS9DOzs7Ozs7O0NBT0MsR0FDRCxTQUFTQyxjQUFjQyxLQUFLLEVBQUVDLFNBQVM7SUFDckMsSUFBSUMsUUFBUVgsUUFBUVMsUUFDaEJHLFFBQVEsQ0FBQ0QsU0FBU1osWUFBWVUsUUFDOUJJLFNBQVMsQ0FBQ0YsU0FBUyxDQUFDQyxTQUFTWCxTQUFTUSxRQUN0Q0ssU0FBUyxDQUFDSCxTQUFTLENBQUNDLFNBQVMsQ0FBQ0MsVUFBVVYsYUFBYU0sUUFDckRNLGNBQWNKLFNBQVNDLFNBQVNDLFVBQVVDLFFBQzFDRSxTQUFTRCxjQUFjbEIsVUFBVVksTUFBTVEsTUFBTSxFQUFFQyxVQUFVLEVBQUUsRUFDM0RELFNBQVNELE9BQU9DLE1BQU07SUFFMUIsSUFBSyxJQUFJRSxPQUFPVixNQUFPO1FBQ3JCLElBQUksQ0FBQ0MsYUFBYUgsZUFBZWEsSUFBSSxDQUFDWCxPQUFPVSxJQUFHLEtBQzVDLENBQUVKLENBQUFBLGVBQ0MsNkRBQTZEO1FBQzdESSxDQUFBQSxPQUFPLFlBQ1AsK0RBQStEO1FBQzlETixVQUFXTSxDQUFBQSxPQUFPLFlBQVlBLE9BQU8sUUFBTyxLQUM3QyxtRUFBbUU7UUFDbEVMLFVBQVdLLENBQUFBLE9BQU8sWUFBWUEsT0FBTyxnQkFBZ0JBLE9BQU8sWUFBVyxLQUN4RSx5QkFBeUI7UUFDekJqQixRQUFRaUIsS0FBS0YsT0FBTSxDQUN0QixHQUFJO1lBQ05ELE9BQU9LLElBQUksQ0FBQ0Y7UUFDZDtJQUNGO0lBQ0EsT0FBT0g7QUFDVDtBQUVBTSxPQUFPQyxPQUFPLEdBQUdmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5TGlrZUtleXMuanM/OTM4YiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYmFzZVRpbWVzID0gcmVxdWlyZSgnLi9fYmFzZVRpbWVzJyksXG4gICAgaXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5TGlrZUtleXM7XG4iXSwibmFtZXMiOlsiYmFzZVRpbWVzIiwicmVxdWlyZSIsImlzQXJndW1lbnRzIiwiaXNBcnJheSIsImlzQnVmZmVyIiwiaXNJbmRleCIsImlzVHlwZWRBcnJheSIsIm9iamVjdFByb3RvIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJhcnJheUxpa2VLZXlzIiwidmFsdWUiLCJpbmhlcml0ZWQiLCJpc0FyciIsImlzQXJnIiwiaXNCdWZmIiwiaXNUeXBlIiwic2tpcEluZGV4ZXMiLCJyZXN1bHQiLCJsZW5ndGgiLCJTdHJpbmciLCJrZXkiLCJjYWxsIiwicHVzaCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_arrayLikeKeys.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_arrayPush.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arrayPush.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */ \nfunction arrayPush(array, values) {\n    var index = -1, length = values.length, offset = array.length;\n    while(++index < length){\n        array[offset + index] = values[index];\n    }\n    return array;\n}\nmodule.exports = arrayPush;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5UHVzaC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztDQU9DO0FBQ0QsU0FBU0EsVUFBVUMsS0FBSyxFQUFFQyxNQUFNO0lBQzlCLElBQUlDLFFBQVEsQ0FBQyxHQUNUQyxTQUFTRixPQUFPRSxNQUFNLEVBQ3RCQyxTQUFTSixNQUFNRyxNQUFNO0lBRXpCLE1BQU8sRUFBRUQsUUFBUUMsT0FBUTtRQUN2QkgsS0FBSyxDQUFDSSxTQUFTRixNQUFNLEdBQUdELE1BQU0sQ0FBQ0MsTUFBTTtJQUN2QztJQUNBLE9BQU9GO0FBQ1Q7QUFFQUssT0FBT0MsT0FBTyxHQUFHUCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVB1c2guanM/Yjg4YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlQdXNoO1xuIl0sIm5hbWVzIjpbImFycmF5UHVzaCIsImFycmF5IiwidmFsdWVzIiwiaW5kZXgiLCJsZW5ndGgiLCJvZmZzZXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_arrayPush.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_arraySome.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arraySome.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */ \nfunction arraySome(array, predicate) {\n    var index = -1, length = array == null ? 0 : array.length;\n    while(++index < length){\n        if (predicate(array[index], index, array)) {\n            return true;\n        }\n    }\n    return false;\n}\nmodule.exports = arraySome;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5U29tZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0M7QUFDRCxTQUFTQSxVQUFVQyxLQUFLLEVBQUVDLFNBQVM7SUFDakMsSUFBSUMsUUFBUSxDQUFDLEdBQ1RDLFNBQVNILFNBQVMsT0FBTyxJQUFJQSxNQUFNRyxNQUFNO0lBRTdDLE1BQU8sRUFBRUQsUUFBUUMsT0FBUTtRQUN2QixJQUFJRixVQUFVRCxLQUFLLENBQUNFLE1BQU0sRUFBRUEsT0FBT0YsUUFBUTtZQUN6QyxPQUFPO1FBQ1Q7SUFDRjtJQUNBLE9BQU87QUFDVDtBQUVBSSxPQUFPQyxPQUFPLEdBQUdOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5U29tZS5qcz8wZGYwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNvbWVgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheVNvbWUoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlTb21lO1xuIl0sIm5hbWVzIjpbImFycmF5U29tZSIsImFycmF5IiwicHJlZGljYXRlIiwiaW5kZXgiLCJsZW5ndGgiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_arraySome.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_assocIndexOf.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_assocIndexOf.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar eq = __webpack_require__(/*! ./eq */ \"(app-pages-browser)/./node_modules/lodash/eq.js\");\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */ function assocIndexOf(array, key) {\n    var length = array.length;\n    while(length--){\n        if (eq(array[length][0], key)) {\n            return length;\n        }\n    }\n    return -1;\n}\nmodule.exports = assocIndexOf;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc29jSW5kZXhPZi5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsS0FBS0MsbUJBQU9BLENBQUM7QUFFakI7Ozs7Ozs7Q0FPQyxHQUNELFNBQVNDLGFBQWFDLEtBQUssRUFBRUMsR0FBRztJQUM5QixJQUFJQyxTQUFTRixNQUFNRSxNQUFNO0lBQ3pCLE1BQU9BLFNBQVU7UUFDZixJQUFJTCxHQUFHRyxLQUFLLENBQUNFLE9BQU8sQ0FBQyxFQUFFLEVBQUVELE1BQU07WUFDN0IsT0FBT0M7UUFDVDtJQUNGO0lBQ0EsT0FBTyxDQUFDO0FBQ1Y7QUFFQUMsT0FBT0MsT0FBTyxHQUFHTCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc3NvY0luZGV4T2YuanM/NzgwMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZXEgPSByZXF1aXJlKCcuL2VxJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzb2NJbmRleE9mO1xuIl0sIm5hbWVzIjpbImVxIiwicmVxdWlyZSIsImFzc29jSW5kZXhPZiIsImFycmF5Iiwia2V5IiwibGVuZ3RoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_assocIndexOf.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_baseGetAllKeys.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_baseGetAllKeys.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar arrayPush = __webpack_require__(/*! ./_arrayPush */ \"(app-pages-browser)/./node_modules/lodash/_arrayPush.js\"), isArray = __webpack_require__(/*! ./isArray */ \"(app-pages-browser)/./node_modules/lodash/isArray.js\");\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */ function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n    var result = keysFunc(object);\n    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\nmodule.exports = baseGetAllKeys;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXRBbGxLZXlzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxZQUFZQyxtQkFBT0EsQ0FBQyxnRkFDcEJDLFVBQVVELG1CQUFPQSxDQUFDO0FBRXRCOzs7Ozs7Ozs7O0NBVUMsR0FDRCxTQUFTRSxlQUFlQyxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsV0FBVztJQUNuRCxJQUFJQyxTQUFTRixTQUFTRDtJQUN0QixPQUFPRixRQUFRRSxVQUFVRyxTQUFTUCxVQUFVTyxRQUFRRCxZQUFZRjtBQUNsRTtBQUVBSSxPQUFPQyxPQUFPLEdBQUdOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXRBbGxLZXlzLmpzPzM4YzAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFycmF5UHVzaCA9IHJlcXVpcmUoJy4vX2FycmF5UHVzaCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAqIGBrZXlzRnVuY2AgYW5kIGBzeW1ib2xzRnVuY2AgdG8gZ2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN5bWJvbHNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNGdW5jLCBzeW1ib2xzRnVuYykge1xuICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRBbGxLZXlzO1xuIl0sIm5hbWVzIjpbImFycmF5UHVzaCIsInJlcXVpcmUiLCJpc0FycmF5IiwiYmFzZUdldEFsbEtleXMiLCJvYmplY3QiLCJrZXlzRnVuYyIsInN5bWJvbHNGdW5jIiwicmVzdWx0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_baseGetAllKeys.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_baseGetTag.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseGetTag.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar Symbol = __webpack_require__(/*! ./_Symbol */ \"(app-pages-browser)/./node_modules/lodash/_Symbol.js\"), getRawTag = __webpack_require__(/*! ./_getRawTag */ \"(app-pages-browser)/./node_modules/lodash/_getRawTag.js\"), objectToString = __webpack_require__(/*! ./_objectToString */ \"(app-pages-browser)/./node_modules/lodash/_objectToString.js\");\n/** `Object#toString` result references. */ var nullTag = \"[object Null]\", undefinedTag = \"[object Undefined]\";\n/** Built-in value references. */ var symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */ function baseGetTag(value) {\n    if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n    }\n    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n}\nmodule.exports = baseGetTag;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXRUYWcuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFNBQVNDLG1CQUFPQSxDQUFDLDBFQUNqQkMsWUFBWUQsbUJBQU9BLENBQUMsZ0ZBQ3BCRSxpQkFBaUJGLG1CQUFPQSxDQUFDO0FBRTdCLHlDQUF5QyxHQUN6QyxJQUFJRyxVQUFVLGlCQUNWQyxlQUFlO0FBRW5CLCtCQUErQixHQUMvQixJQUFJQyxpQkFBaUJOLFNBQVNBLE9BQU9PLFdBQVcsR0FBR0M7QUFFbkQ7Ozs7OztDQU1DLEdBQ0QsU0FBU0MsV0FBV0MsS0FBSztJQUN2QixJQUFJQSxTQUFTLE1BQU07UUFDakIsT0FBT0EsVUFBVUYsWUFBWUgsZUFBZUQ7SUFDOUM7SUFDQSxPQUFPLGtCQUFtQkUsa0JBQWtCSyxPQUFPRCxTQUMvQ1IsVUFBVVEsU0FDVlAsZUFBZU87QUFDckI7QUFFQUUsT0FBT0MsT0FBTyxHQUFHSiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0VGFnLmpzP2Y0ZWQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcbiJdLCJuYW1lcyI6WyJTeW1ib2wiLCJyZXF1aXJlIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJudWxsVGFnIiwidW5kZWZpbmVkVGFnIiwic3ltVG9TdHJpbmdUYWciLCJ0b1N0cmluZ1RhZyIsInVuZGVmaW5lZCIsImJhc2VHZXRUYWciLCJ2YWx1ZSIsIk9iamVjdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_baseGetTag.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_baseIsArguments.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseIsArguments.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar baseGetTag = __webpack_require__(/*! ./_baseGetTag */ \"(app-pages-browser)/./node_modules/lodash/_baseGetTag.js\"), isObjectLike = __webpack_require__(/*! ./isObjectLike */ \"(app-pages-browser)/./node_modules/lodash/isObjectLike.js\");\n/** `Object#toString` result references. */ var argsTag = \"[object Arguments]\";\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */ function baseIsArguments(value) {\n    return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\nmodule.exports = baseIsArguments;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc0FyZ3VtZW50cy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsYUFBYUMsbUJBQU9BLENBQUMsa0ZBQ3JCQyxlQUFlRCxtQkFBT0EsQ0FBQztBQUUzQix5Q0FBeUMsR0FDekMsSUFBSUUsVUFBVTtBQUVkOzs7Ozs7Q0FNQyxHQUNELFNBQVNDLGdCQUFnQkMsS0FBSztJQUM1QixPQUFPSCxhQUFhRyxVQUFVTCxXQUFXSyxVQUFVRjtBQUNyRDtBQUVBRyxPQUFPQyxPQUFPLEdBQUdIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc0FyZ3VtZW50cy5qcz9mNThhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqL1xuZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzQXJndW1lbnRzO1xuIl0sIm5hbWVzIjpbImJhc2VHZXRUYWciLCJyZXF1aXJlIiwiaXNPYmplY3RMaWtlIiwiYXJnc1RhZyIsImJhc2VJc0FyZ3VtZW50cyIsInZhbHVlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_baseIsArguments.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_baseIsEqual.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseIsEqual.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar baseIsEqualDeep = __webpack_require__(/*! ./_baseIsEqualDeep */ \"(app-pages-browser)/./node_modules/lodash/_baseIsEqualDeep.js\"), isObjectLike = __webpack_require__(/*! ./isObjectLike */ \"(app-pages-browser)/./node_modules/lodash/isObjectLike.js\");\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */ function baseIsEqual(value, other, bitmask, customizer, stack) {\n    if (value === other) {\n        return true;\n    }\n    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {\n        return value !== value && other !== other;\n    }\n    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\nmodule.exports = baseIsEqual;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc0VxdWFsLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxrQkFBa0JDLG1CQUFPQSxDQUFDLDRGQUMxQkMsZUFBZUQsbUJBQU9BLENBQUM7QUFFM0I7Ozs7Ozs7Ozs7Ozs7Q0FhQyxHQUNELFNBQVNFLFlBQVlDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxPQUFPLEVBQUVDLFVBQVUsRUFBRUMsS0FBSztJQUMzRCxJQUFJSixVQUFVQyxPQUFPO1FBQ25CLE9BQU87SUFDVDtJQUNBLElBQUlELFNBQVMsUUFBUUMsU0FBUyxRQUFTLENBQUNILGFBQWFFLFVBQVUsQ0FBQ0YsYUFBYUcsUUFBUztRQUNwRixPQUFPRCxVQUFVQSxTQUFTQyxVQUFVQTtJQUN0QztJQUNBLE9BQU9MLGdCQUFnQkksT0FBT0MsT0FBT0MsU0FBU0MsWUFBWUosYUFBYUs7QUFDekU7QUFFQUMsT0FBT0MsT0FBTyxHQUFHUCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNFcXVhbC5qcz8zODFhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlSXNFcXVhbERlZXAgPSByZXF1aXJlKCcuL19iYXNlSXNFcXVhbERlZXAnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgIHdoaWNoIHN1cHBvcnRzIHBhcnRpYWwgY29tcGFyaXNvbnNcbiAqIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICogIDEgLSBVbm9yZGVyZWQgY29tcGFyaXNvblxuICogIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgdmFsdWVgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gIGlmICh2YWx1ZSA9PT0gb3RoZXIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCB8fCBvdGhlciA9PSBudWxsIHx8ICghaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjtcbiAgfVxuICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNFcXVhbDtcbiJdLCJuYW1lcyI6WyJiYXNlSXNFcXVhbERlZXAiLCJyZXF1aXJlIiwiaXNPYmplY3RMaWtlIiwiYmFzZUlzRXF1YWwiLCJ2YWx1ZSIsIm90aGVyIiwiYml0bWFzayIsImN1c3RvbWl6ZXIiLCJzdGFjayIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_baseIsEqual.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_baseIsEqualDeep.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseIsEqualDeep.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar Stack = __webpack_require__(/*! ./_Stack */ \"(app-pages-browser)/./node_modules/lodash/_Stack.js\"), equalArrays = __webpack_require__(/*! ./_equalArrays */ \"(app-pages-browser)/./node_modules/lodash/_equalArrays.js\"), equalByTag = __webpack_require__(/*! ./_equalByTag */ \"(app-pages-browser)/./node_modules/lodash/_equalByTag.js\"), equalObjects = __webpack_require__(/*! ./_equalObjects */ \"(app-pages-browser)/./node_modules/lodash/_equalObjects.js\"), getTag = __webpack_require__(/*! ./_getTag */ \"(app-pages-browser)/./node_modules/lodash/_getTag.js\"), isArray = __webpack_require__(/*! ./isArray */ \"(app-pages-browser)/./node_modules/lodash/isArray.js\"), isBuffer = __webpack_require__(/*! ./isBuffer */ \"(app-pages-browser)/./node_modules/lodash/isBuffer.js\"), isTypedArray = __webpack_require__(/*! ./isTypedArray */ \"(app-pages-browser)/./node_modules/lodash/isTypedArray.js\");\n/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1;\n/** `Object#toString` result references. */ var argsTag = \"[object Arguments]\", arrayTag = \"[object Array]\", objectTag = \"[object Object]\";\n/** Used for built-in method references. */ var objectProto = Object.prototype;\n/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */ function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n    var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);\n    objTag = objTag == argsTag ? objectTag : objTag;\n    othTag = othTag == argsTag ? objectTag : othTag;\n    var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;\n    if (isSameTag && isBuffer(object)) {\n        if (!isBuffer(other)) {\n            return false;\n        }\n        objIsArr = true;\n        objIsObj = false;\n    }\n    if (isSameTag && !objIsObj) {\n        stack || (stack = new Stack);\n        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n    }\n    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, \"__wrapped__\"), othIsWrapped = othIsObj && hasOwnProperty.call(other, \"__wrapped__\");\n        if (objIsWrapped || othIsWrapped) {\n            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;\n            stack || (stack = new Stack);\n            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n        }\n    }\n    if (!isSameTag) {\n        return false;\n    }\n    stack || (stack = new Stack);\n    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\nmodule.exports = baseIsEqualDeep;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc0VxdWFsRGVlcC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUMsd0VBQ2hCQyxjQUFjRCxtQkFBT0EsQ0FBQyxvRkFDdEJFLGFBQWFGLG1CQUFPQSxDQUFDLGtGQUNyQkcsZUFBZUgsbUJBQU9BLENBQUMsc0ZBQ3ZCSSxTQUFTSixtQkFBT0EsQ0FBQywwRUFDakJLLFVBQVVMLG1CQUFPQSxDQUFDLDBFQUNsQk0sV0FBV04sbUJBQU9BLENBQUMsNEVBQ25CTyxlQUFlUCxtQkFBT0EsQ0FBQztBQUUzQixvREFBb0QsR0FDcEQsSUFBSVEsdUJBQXVCO0FBRTNCLHlDQUF5QyxHQUN6QyxJQUFJQyxVQUFVLHNCQUNWQyxXQUFXLGtCQUNYQyxZQUFZO0FBRWhCLHlDQUF5QyxHQUN6QyxJQUFJQyxjQUFjQyxPQUFPQyxTQUFTO0FBRWxDLDhDQUE4QyxHQUM5QyxJQUFJQyxpQkFBaUJILFlBQVlHLGNBQWM7QUFFL0M7Ozs7Ozs7Ozs7Ozs7Q0FhQyxHQUNELFNBQVNDLGdCQUFnQkMsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBRUMsVUFBVSxFQUFFQyxTQUFTLEVBQUVDLEtBQUs7SUFDM0UsSUFBSUMsV0FBV2xCLFFBQVFZLFNBQ25CTyxXQUFXbkIsUUFBUWEsUUFDbkJPLFNBQVNGLFdBQVdiLFdBQVdOLE9BQU9hLFNBQ3RDUyxTQUFTRixXQUFXZCxXQUFXTixPQUFPYztJQUUxQ08sU0FBU0EsVUFBVWhCLFVBQVVFLFlBQVljO0lBQ3pDQyxTQUFTQSxVQUFVakIsVUFBVUUsWUFBWWU7SUFFekMsSUFBSUMsV0FBV0YsVUFBVWQsV0FDckJpQixXQUFXRixVQUFVZixXQUNyQmtCLFlBQVlKLFVBQVVDO0lBRTFCLElBQUlHLGFBQWF2QixTQUFTVyxTQUFTO1FBQ2pDLElBQUksQ0FBQ1gsU0FBU1ksUUFBUTtZQUNwQixPQUFPO1FBQ1Q7UUFDQUssV0FBVztRQUNYSSxXQUFXO0lBQ2I7SUFDQSxJQUFJRSxhQUFhLENBQUNGLFVBQVU7UUFDMUJMLFNBQVVBLENBQUFBLFFBQVEsSUFBSXZCLEtBQUk7UUFDMUIsT0FBTyxZQUFhUSxhQUFhVSxVQUM3QmhCLFlBQVlnQixRQUFRQyxPQUFPQyxTQUFTQyxZQUFZQyxXQUFXQyxTQUMzRHBCLFdBQVdlLFFBQVFDLE9BQU9PLFFBQVFOLFNBQVNDLFlBQVlDLFdBQVdDO0lBQ3hFO0lBQ0EsSUFBSSxDQUFFSCxDQUFBQSxVQUFVWCxvQkFBbUIsR0FBSTtRQUNyQyxJQUFJc0IsZUFBZUgsWUFBWVosZUFBZWdCLElBQUksQ0FBQ2QsUUFBUSxnQkFDdkRlLGVBQWVKLFlBQVliLGVBQWVnQixJQUFJLENBQUNiLE9BQU87UUFFMUQsSUFBSVksZ0JBQWdCRSxjQUFjO1lBQ2hDLElBQUlDLGVBQWVILGVBQWViLE9BQU9pQixLQUFLLEtBQUtqQixRQUMvQ2tCLGVBQWVILGVBQWVkLE1BQU1nQixLQUFLLEtBQUtoQjtZQUVsREksU0FBVUEsQ0FBQUEsUUFBUSxJQUFJdkIsS0FBSTtZQUMxQixPQUFPc0IsVUFBVVksY0FBY0UsY0FBY2hCLFNBQVNDLFlBQVlFO1FBQ3BFO0lBQ0Y7SUFDQSxJQUFJLENBQUNPLFdBQVc7UUFDZCxPQUFPO0lBQ1Q7SUFDQVAsU0FBVUEsQ0FBQUEsUUFBUSxJQUFJdkIsS0FBSTtJQUMxQixPQUFPSSxhQUFhYyxRQUFRQyxPQUFPQyxTQUFTQyxZQUFZQyxXQUFXQztBQUNyRTtBQUVBYyxPQUFPQyxPQUFPLEdBQUdyQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNFcXVhbERlZXAuanM/NGMwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGVxdWFsQXJyYXlzID0gcmVxdWlyZSgnLi9fZXF1YWxBcnJheXMnKSxcbiAgICBlcXVhbEJ5VGFnID0gcmVxdWlyZSgnLi9fZXF1YWxCeVRhZycpLFxuICAgIGVxdWFsT2JqZWN0cyA9IHJlcXVpcmUoJy4vX2VxdWFsT2JqZWN0cycpLFxuICAgIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDE7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgIG9iaklzT2JqID0gZmFsc2U7XG4gIH1cbiAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgfVxuICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNFcXVhbERlZXA7XG4iXSwibmFtZXMiOlsiU3RhY2siLCJyZXF1aXJlIiwiZXF1YWxBcnJheXMiLCJlcXVhbEJ5VGFnIiwiZXF1YWxPYmplY3RzIiwiZ2V0VGFnIiwiaXNBcnJheSIsImlzQnVmZmVyIiwiaXNUeXBlZEFycmF5IiwiQ09NUEFSRV9QQVJUSUFMX0ZMQUciLCJhcmdzVGFnIiwiYXJyYXlUYWciLCJvYmplY3RUYWciLCJvYmplY3RQcm90byIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiYmFzZUlzRXF1YWxEZWVwIiwib2JqZWN0Iiwib3RoZXIiLCJiaXRtYXNrIiwiY3VzdG9taXplciIsImVxdWFsRnVuYyIsInN0YWNrIiwib2JqSXNBcnIiLCJvdGhJc0FyciIsIm9ialRhZyIsIm90aFRhZyIsIm9iaklzT2JqIiwib3RoSXNPYmoiLCJpc1NhbWVUYWciLCJvYmpJc1dyYXBwZWQiLCJjYWxsIiwib3RoSXNXcmFwcGVkIiwib2JqVW53cmFwcGVkIiwidmFsdWUiLCJvdGhVbndyYXBwZWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_baseIsEqualDeep.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_baseIsNative.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseIsNative.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar isFunction = __webpack_require__(/*! ./isFunction */ \"(app-pages-browser)/./node_modules/lodash/isFunction.js\"), isMasked = __webpack_require__(/*! ./_isMasked */ \"(app-pages-browser)/./node_modules/lodash/_isMasked.js\"), isObject = __webpack_require__(/*! ./isObject */ \"(app-pages-browser)/./node_modules/lodash/isObject.js\"), toSource = __webpack_require__(/*! ./_toSource */ \"(app-pages-browser)/./node_modules/lodash/_toSource.js\");\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */ var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n/** Used to detect host constructors (Safari). */ var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n/** Used for built-in method references. */ var funcProto = Function.prototype, objectProto = Object.prototype;\n/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;\n/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n/** Used to detect if a method is native. */ var reIsNative = RegExp(\"^\" + funcToString.call(hasOwnProperty).replace(reRegExpChar, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\");\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */ function baseIsNative(value) {\n    if (!isObject(value) || isMasked(value)) {\n        return false;\n    }\n    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n    return pattern.test(toSource(value));\n}\nmodule.exports = baseIsNative;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc05hdGl2ZS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsYUFBYUMsbUJBQU9BLENBQUMsZ0ZBQ3JCQyxXQUFXRCxtQkFBT0EsQ0FBQyw4RUFDbkJFLFdBQVdGLG1CQUFPQSxDQUFDLDRFQUNuQkcsV0FBV0gsbUJBQU9BLENBQUM7QUFFdkI7OztDQUdDLEdBQ0QsSUFBSUksZUFBZTtBQUVuQiwrQ0FBK0MsR0FDL0MsSUFBSUMsZUFBZTtBQUVuQix5Q0FBeUMsR0FDekMsSUFBSUMsWUFBWUMsU0FBU0MsU0FBUyxFQUM5QkMsY0FBY0MsT0FBT0YsU0FBUztBQUVsQyx3REFBd0QsR0FDeEQsSUFBSUcsZUFBZUwsVUFBVU0sUUFBUTtBQUVyQyw4Q0FBOEMsR0FDOUMsSUFBSUMsaUJBQWlCSixZQUFZSSxjQUFjO0FBRS9DLDBDQUEwQyxHQUMxQyxJQUFJQyxhQUFhQyxPQUFPLE1BQ3RCSixhQUFhSyxJQUFJLENBQUNILGdCQUFnQkksT0FBTyxDQUFDYixjQUFjLFFBQ3ZEYSxPQUFPLENBQUMsMERBQTBELFdBQVc7QUFHaEY7Ozs7Ozs7Q0FPQyxHQUNELFNBQVNDLGFBQWFDLEtBQUs7SUFDekIsSUFBSSxDQUFDakIsU0FBU2lCLFVBQVVsQixTQUFTa0IsUUFBUTtRQUN2QyxPQUFPO0lBQ1Q7SUFDQSxJQUFJQyxVQUFVckIsV0FBV29CLFNBQVNMLGFBQWFUO0lBQy9DLE9BQU9lLFFBQVFDLElBQUksQ0FBQ2xCLFNBQVNnQjtBQUMvQjtBQUVBRyxPQUFPQyxPQUFPLEdBQUdMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc05hdGl2ZS5qcz82OGU5Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNNYXNrZWQgPSByZXF1aXJlKCcuL19pc01hc2tlZCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIHRvU291cmNlID0gcmVxdWlyZSgnLi9fdG9Tb3VyY2UnKTtcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNOYXRpdmU7XG4iXSwibmFtZXMiOlsiaXNGdW5jdGlvbiIsInJlcXVpcmUiLCJpc01hc2tlZCIsImlzT2JqZWN0IiwidG9Tb3VyY2UiLCJyZVJlZ0V4cENoYXIiLCJyZUlzSG9zdEN0b3IiLCJmdW5jUHJvdG8iLCJGdW5jdGlvbiIsInByb3RvdHlwZSIsIm9iamVjdFByb3RvIiwiT2JqZWN0IiwiZnVuY1RvU3RyaW5nIiwidG9TdHJpbmciLCJoYXNPd25Qcm9wZXJ0eSIsInJlSXNOYXRpdmUiLCJSZWdFeHAiLCJjYWxsIiwicmVwbGFjZSIsImJhc2VJc05hdGl2ZSIsInZhbHVlIiwicGF0dGVybiIsInRlc3QiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_baseIsNative.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_baseIsTypedArray.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_baseIsTypedArray.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar baseGetTag = __webpack_require__(/*! ./_baseGetTag */ \"(app-pages-browser)/./node_modules/lodash/_baseGetTag.js\"), isLength = __webpack_require__(/*! ./isLength */ \"(app-pages-browser)/./node_modules/lodash/isLength.js\"), isObjectLike = __webpack_require__(/*! ./isObjectLike */ \"(app-pages-browser)/./node_modules/lodash/isObjectLike.js\");\n/** `Object#toString` result references. */ var argsTag = \"[object Arguments]\", arrayTag = \"[object Array]\", boolTag = \"[object Boolean]\", dateTag = \"[object Date]\", errorTag = \"[object Error]\", funcTag = \"[object Function]\", mapTag = \"[object Map]\", numberTag = \"[object Number]\", objectTag = \"[object Object]\", regexpTag = \"[object RegExp]\", setTag = \"[object Set]\", stringTag = \"[object String]\", weakMapTag = \"[object WeakMap]\";\nvar arrayBufferTag = \"[object ArrayBuffer]\", dataViewTag = \"[object DataView]\", float32Tag = \"[object Float32Array]\", float64Tag = \"[object Float64Array]\", int8Tag = \"[object Int8Array]\", int16Tag = \"[object Int16Array]\", int32Tag = \"[object Int32Array]\", uint8Tag = \"[object Uint8Array]\", uint8ClampedTag = \"[object Uint8ClampedArray]\", uint16Tag = \"[object Uint16Array]\", uint32Tag = \"[object Uint32Array]\";\n/** Used to identify `toStringTag` values of typed arrays. */ var typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */ function baseIsTypedArray(value) {\n    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\nmodule.exports = baseIsTypedArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc1R5cGVkQXJyYXkuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLGFBQWFDLG1CQUFPQSxDQUFDLGtGQUNyQkMsV0FBV0QsbUJBQU9BLENBQUMsNEVBQ25CRSxlQUFlRixtQkFBT0EsQ0FBQztBQUUzQix5Q0FBeUMsR0FDekMsSUFBSUcsVUFBVSxzQkFDVkMsV0FBVyxrQkFDWEMsVUFBVSxvQkFDVkMsVUFBVSxpQkFDVkMsV0FBVyxrQkFDWEMsVUFBVSxxQkFDVkMsU0FBUyxnQkFDVEMsWUFBWSxtQkFDWkMsWUFBWSxtQkFDWkMsWUFBWSxtQkFDWkMsU0FBUyxnQkFDVEMsWUFBWSxtQkFDWkMsYUFBYTtBQUVqQixJQUFJQyxpQkFBaUIsd0JBQ2pCQyxjQUFjLHFCQUNkQyxhQUFhLHlCQUNiQyxhQUFhLHlCQUNiQyxVQUFVLHNCQUNWQyxXQUFXLHVCQUNYQyxXQUFXLHVCQUNYQyxXQUFXLHVCQUNYQyxrQkFBa0IsOEJBQ2xCQyxZQUFZLHdCQUNaQyxZQUFZO0FBRWhCLDJEQUEyRCxHQUMzRCxJQUFJQyxpQkFBaUIsQ0FBQztBQUN0QkEsY0FBYyxDQUFDVCxXQUFXLEdBQUdTLGNBQWMsQ0FBQ1IsV0FBVyxHQUN2RFEsY0FBYyxDQUFDUCxRQUFRLEdBQUdPLGNBQWMsQ0FBQ04sU0FBUyxHQUNsRE0sY0FBYyxDQUFDTCxTQUFTLEdBQUdLLGNBQWMsQ0FBQ0osU0FBUyxHQUNuREksY0FBYyxDQUFDSCxnQkFBZ0IsR0FBR0csY0FBYyxDQUFDRixVQUFVLEdBQzNERSxjQUFjLENBQUNELFVBQVUsR0FBRztBQUM1QkMsY0FBYyxDQUFDeEIsUUFBUSxHQUFHd0IsY0FBYyxDQUFDdkIsU0FBUyxHQUNsRHVCLGNBQWMsQ0FBQ1gsZUFBZSxHQUFHVyxjQUFjLENBQUN0QixRQUFRLEdBQ3hEc0IsY0FBYyxDQUFDVixZQUFZLEdBQUdVLGNBQWMsQ0FBQ3JCLFFBQVEsR0FDckRxQixjQUFjLENBQUNwQixTQUFTLEdBQUdvQixjQUFjLENBQUNuQixRQUFRLEdBQ2xEbUIsY0FBYyxDQUFDbEIsT0FBTyxHQUFHa0IsY0FBYyxDQUFDakIsVUFBVSxHQUNsRGlCLGNBQWMsQ0FBQ2hCLFVBQVUsR0FBR2dCLGNBQWMsQ0FBQ2YsVUFBVSxHQUNyRGUsY0FBYyxDQUFDZCxPQUFPLEdBQUdjLGNBQWMsQ0FBQ2IsVUFBVSxHQUNsRGEsY0FBYyxDQUFDWixXQUFXLEdBQUc7QUFFN0I7Ozs7OztDQU1DLEdBQ0QsU0FBU2EsaUJBQWlCQyxLQUFLO0lBQzdCLE9BQU8zQixhQUFhMkIsVUFDbEI1QixTQUFTNEIsTUFBTUMsTUFBTSxLQUFLLENBQUMsQ0FBQ0gsY0FBYyxDQUFDNUIsV0FBVzhCLE9BQU87QUFDakU7QUFFQUUsT0FBT0MsT0FBTyxHQUFHSiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNUeXBlZEFycmF5LmpzPzBhZjgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xudmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG50eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbnR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbnR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbnR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbnR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbnR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbnR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbnR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbnR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc1R5cGVkQXJyYXk7XG4iXSwibmFtZXMiOlsiYmFzZUdldFRhZyIsInJlcXVpcmUiLCJpc0xlbmd0aCIsImlzT2JqZWN0TGlrZSIsImFyZ3NUYWciLCJhcnJheVRhZyIsImJvb2xUYWciLCJkYXRlVGFnIiwiZXJyb3JUYWciLCJmdW5jVGFnIiwibWFwVGFnIiwibnVtYmVyVGFnIiwib2JqZWN0VGFnIiwicmVnZXhwVGFnIiwic2V0VGFnIiwic3RyaW5nVGFnIiwid2Vha01hcFRhZyIsImFycmF5QnVmZmVyVGFnIiwiZGF0YVZpZXdUYWciLCJmbG9hdDMyVGFnIiwiZmxvYXQ2NFRhZyIsImludDhUYWciLCJpbnQxNlRhZyIsImludDMyVGFnIiwidWludDhUYWciLCJ1aW50OENsYW1wZWRUYWciLCJ1aW50MTZUYWciLCJ1aW50MzJUYWciLCJ0eXBlZEFycmF5VGFncyIsImJhc2VJc1R5cGVkQXJyYXkiLCJ2YWx1ZSIsImxlbmd0aCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_baseIsTypedArray.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_baseKeys.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseKeys.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar isPrototype = __webpack_require__(/*! ./_isPrototype */ \"(app-pages-browser)/./node_modules/lodash/_isPrototype.js\"), nativeKeys = __webpack_require__(/*! ./_nativeKeys */ \"(app-pages-browser)/./node_modules/lodash/_nativeKeys.js\");\n/** Used for built-in method references. */ var objectProto = Object.prototype;\n/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */ function baseKeys(object) {\n    if (!isPrototype(object)) {\n        return nativeKeys(object);\n    }\n    var result = [];\n    for(var key in Object(object)){\n        if (hasOwnProperty.call(object, key) && key != \"constructor\") {\n            result.push(key);\n        }\n    }\n    return result;\n}\nmodule.exports = baseKeys;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VLZXlzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxjQUFjQyxtQkFBT0EsQ0FBQyxvRkFDdEJDLGFBQWFELG1CQUFPQSxDQUFDO0FBRXpCLHlDQUF5QyxHQUN6QyxJQUFJRSxjQUFjQyxPQUFPQyxTQUFTO0FBRWxDLDhDQUE4QyxHQUM5QyxJQUFJQyxpQkFBaUJILFlBQVlHLGNBQWM7QUFFL0M7Ozs7OztDQU1DLEdBQ0QsU0FBU0MsU0FBU0MsTUFBTTtJQUN0QixJQUFJLENBQUNSLFlBQVlRLFNBQVM7UUFDeEIsT0FBT04sV0FBV007SUFDcEI7SUFDQSxJQUFJQyxTQUFTLEVBQUU7SUFDZixJQUFLLElBQUlDLE9BQU9OLE9BQU9JLFFBQVM7UUFDOUIsSUFBSUYsZUFBZUssSUFBSSxDQUFDSCxRQUFRRSxRQUFRQSxPQUFPLGVBQWU7WUFDNURELE9BQU9HLElBQUksQ0FBQ0Y7UUFDZDtJQUNGO0lBQ0EsT0FBT0Q7QUFDVDtBQUVBSSxPQUFPQyxPQUFPLEdBQUdQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VLZXlzLmpzP2Q1YzYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKSxcbiAgICBuYXRpdmVLZXlzID0gcmVxdWlyZSgnLi9fbmF0aXZlS2V5cycpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUtleXM7XG4iXSwibmFtZXMiOlsiaXNQcm90b3R5cGUiLCJyZXF1aXJlIiwibmF0aXZlS2V5cyIsIm9iamVjdFByb3RvIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJiYXNlS2V5cyIsIm9iamVjdCIsInJlc3VsdCIsImtleSIsImNhbGwiLCJwdXNoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_baseKeys.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_baseTimes.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseTimes.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */ \nfunction baseTimes(n, iteratee) {\n    var index = -1, result = Array(n);\n    while(++index < n){\n        result[index] = iteratee(index);\n    }\n    return result;\n}\nmodule.exports = baseTimes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUaW1lcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Q0FRQztBQUNELFNBQVNBLFVBQVVDLENBQUMsRUFBRUMsUUFBUTtJQUM1QixJQUFJQyxRQUFRLENBQUMsR0FDVEMsU0FBU0MsTUFBTUo7SUFFbkIsTUFBTyxFQUFFRSxRQUFRRixFQUFHO1FBQ2xCRyxNQUFNLENBQUNELE1BQU0sR0FBR0QsU0FBU0M7SUFDM0I7SUFDQSxPQUFPQztBQUNUO0FBRUFFLE9BQU9DLE9BQU8sR0FBR1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVRpbWVzLmpzP2RkYTYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVGltZXM7XG4iXSwibmFtZXMiOlsiYmFzZVRpbWVzIiwibiIsIml0ZXJhdGVlIiwiaW5kZXgiLCJyZXN1bHQiLCJBcnJheSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_baseTimes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_baseUnary.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseUnary.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */ \nfunction baseUnary(func) {\n    return function(value) {\n        return func(value);\n    };\n}\nmodule.exports = baseUnary;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VVbmFyeS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0NBTUM7QUFDRCxTQUFTQSxVQUFVQyxJQUFJO0lBQ3JCLE9BQU8sU0FBU0MsS0FBSztRQUNuQixPQUFPRCxLQUFLQztJQUNkO0FBQ0Y7QUFFQUMsT0FBT0MsT0FBTyxHQUFHSiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVW5hcnkuanM/ZTM0NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVVuYXJ5O1xuIl0sIm5hbWVzIjpbImJhc2VVbmFyeSIsImZ1bmMiLCJ2YWx1ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_baseUnary.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_cacheHas.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_cacheHas.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ \nfunction cacheHas(cache, key) {\n    return cache.has(key);\n}\nmodule.exports = cacheHas;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NhY2hlSGFzLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0NBT0M7QUFDRCxTQUFTQSxTQUFTQyxLQUFLLEVBQUVDLEdBQUc7SUFDMUIsT0FBT0QsTUFBTUUsR0FBRyxDQUFDRDtBQUNuQjtBQUVBRSxPQUFPQyxPQUFPLEdBQUdMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NhY2hlSGFzLmpzPzMxOWEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDaGVja3MgaWYgYSBgY2FjaGVgIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBjYWNoZSBUaGUgY2FjaGUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkge1xuICByZXR1cm4gY2FjaGUuaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FjaGVIYXM7XG4iXSwibmFtZXMiOlsiY2FjaGVIYXMiLCJjYWNoZSIsImtleSIsImhhcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_cacheHas.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_coreJsData.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_coreJsData.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar root = __webpack_require__(/*! ./_root */ \"(app-pages-browser)/./node_modules/lodash/_root.js\");\n/** Used to detect overreaching core-js shims. */ var coreJsData = root[\"__core-js_shared__\"];\nmodule.exports = coreJsData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcmVKc0RhdGEuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDO0FBRW5CLCtDQUErQyxHQUMvQyxJQUFJQyxhQUFhRixJQUFJLENBQUMscUJBQXFCO0FBRTNDRyxPQUFPQyxPQUFPLEdBQUdGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcmVKc0RhdGEuanM/MjUzYiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb3JlSnNEYXRhO1xuIl0sIm5hbWVzIjpbInJvb3QiLCJyZXF1aXJlIiwiY29yZUpzRGF0YSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_coreJsData.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_equalArrays.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_equalArrays.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar SetCache = __webpack_require__(/*! ./_SetCache */ \"(app-pages-browser)/./node_modules/lodash/_SetCache.js\"), arraySome = __webpack_require__(/*! ./_arraySome */ \"(app-pages-browser)/./node_modules/lodash/_arraySome.js\"), cacheHas = __webpack_require__(/*! ./_cacheHas */ \"(app-pages-browser)/./node_modules/lodash/_cacheHas.js\");\n/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */ function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;\n    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n        return false;\n    }\n    // Check that cyclic values are equal.\n    var arrStacked = stack.get(array);\n    var othStacked = stack.get(other);\n    if (arrStacked && othStacked) {\n        return arrStacked == other && othStacked == array;\n    }\n    var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache : undefined;\n    stack.set(array, other);\n    stack.set(other, array);\n    // Ignore non-index properties.\n    while(++index < arrLength){\n        var arrValue = array[index], othValue = other[index];\n        if (customizer) {\n            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);\n        }\n        if (compared !== undefined) {\n            if (compared) {\n                continue;\n            }\n            result = false;\n            break;\n        }\n        // Recursively compare arrays (susceptible to call stack limits).\n        if (seen) {\n            if (!arraySome(other, function(othValue, othIndex) {\n                if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n                    return seen.push(othIndex);\n                }\n            })) {\n                result = false;\n                break;\n            }\n        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n            result = false;\n            break;\n        }\n    }\n    stack[\"delete\"](array);\n    stack[\"delete\"](other);\n    return result;\n}\nmodule.exports = equalArrays;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsQXJyYXlzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxXQUFXQyxtQkFBT0EsQ0FBQyw4RUFDbkJDLFlBQVlELG1CQUFPQSxDQUFDLGdGQUNwQkUsV0FBV0YsbUJBQU9BLENBQUM7QUFFdkIsb0RBQW9ELEdBQ3BELElBQUlHLHVCQUF1QixHQUN2QkMseUJBQXlCO0FBRTdCOzs7Ozs7Ozs7Ozs7Q0FZQyxHQUNELFNBQVNDLFlBQVlDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxPQUFPLEVBQUVDLFVBQVUsRUFBRUMsU0FBUyxFQUFFQyxLQUFLO0lBQ3RFLElBQUlDLFlBQVlKLFVBQVVMLHNCQUN0QlUsWUFBWVAsTUFBTVEsTUFBTSxFQUN4QkMsWUFBWVIsTUFBTU8sTUFBTTtJQUU1QixJQUFJRCxhQUFhRSxhQUFhLENBQUVILENBQUFBLGFBQWFHLFlBQVlGLFNBQVEsR0FBSTtRQUNuRSxPQUFPO0lBQ1Q7SUFDQSxzQ0FBc0M7SUFDdEMsSUFBSUcsYUFBYUwsTUFBTU0sR0FBRyxDQUFDWDtJQUMzQixJQUFJWSxhQUFhUCxNQUFNTSxHQUFHLENBQUNWO0lBQzNCLElBQUlTLGNBQWNFLFlBQVk7UUFDNUIsT0FBT0YsY0FBY1QsU0FBU1csY0FBY1o7SUFDOUM7SUFDQSxJQUFJYSxRQUFRLENBQUMsR0FDVEMsU0FBUyxNQUNUQyxPQUFPLFVBQVdqQix5QkFBMEIsSUFBSUwsV0FBV3VCO0lBRS9EWCxNQUFNWSxHQUFHLENBQUNqQixPQUFPQztJQUNqQkksTUFBTVksR0FBRyxDQUFDaEIsT0FBT0Q7SUFFakIsK0JBQStCO0lBQy9CLE1BQU8sRUFBRWEsUUFBUU4sVUFBVztRQUMxQixJQUFJVyxXQUFXbEIsS0FBSyxDQUFDYSxNQUFNLEVBQ3ZCTSxXQUFXbEIsS0FBSyxDQUFDWSxNQUFNO1FBRTNCLElBQUlWLFlBQVk7WUFDZCxJQUFJaUIsV0FBV2QsWUFDWEgsV0FBV2dCLFVBQVVELFVBQVVMLE9BQU9aLE9BQU9ELE9BQU9LLFNBQ3BERixXQUFXZSxVQUFVQyxVQUFVTixPQUFPYixPQUFPQyxPQUFPSTtRQUMxRDtRQUNBLElBQUllLGFBQWFKLFdBQVc7WUFDMUIsSUFBSUksVUFBVTtnQkFDWjtZQUNGO1lBQ0FOLFNBQVM7WUFDVDtRQUNGO1FBQ0EsaUVBQWlFO1FBQ2pFLElBQUlDLE1BQU07WUFDUixJQUFJLENBQUNwQixVQUFVTSxPQUFPLFNBQVNrQixRQUFRLEVBQUVFLFFBQVE7Z0JBQzNDLElBQUksQ0FBQ3pCLFNBQVNtQixNQUFNTSxhQUNmSCxDQUFBQSxhQUFhQyxZQUFZZixVQUFVYyxVQUFVQyxVQUFVakIsU0FBU0MsWUFBWUUsTUFBSyxHQUFJO29CQUN4RixPQUFPVSxLQUFLTyxJQUFJLENBQUNEO2dCQUNuQjtZQUNGLElBQUk7Z0JBQ05QLFNBQVM7Z0JBQ1Q7WUFDRjtRQUNGLE9BQU8sSUFBSSxDQUNMSSxDQUFBQSxhQUFhQyxZQUNYZixVQUFVYyxVQUFVQyxVQUFVakIsU0FBU0MsWUFBWUUsTUFBSyxHQUN6RDtZQUNMUyxTQUFTO1lBQ1Q7UUFDRjtJQUNGO0lBQ0FULEtBQUssQ0FBQyxTQUFTLENBQUNMO0lBQ2hCSyxLQUFLLENBQUMsU0FBUyxDQUFDSjtJQUNoQixPQUFPYTtBQUNUO0FBRUFTLE9BQU9DLE9BQU8sR0FBR3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsQXJyYXlzLmpzP2EzZjkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFNldENhY2hlID0gcmVxdWlyZSgnLi9fU2V0Q2FjaGUnKSxcbiAgICBhcnJheVNvbWUgPSByZXF1aXJlKCcuL19hcnJheVNvbWUnKSxcbiAgICBjYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2NhY2hlSGFzJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtBcnJheX0gb3RoZXIgVGhlIG90aGVyIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBhcnJheWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuXG4gIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIGFyclN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gIGlmIChhcnJTdGFja2VkICYmIG90aFN0YWNrZWQpIHtcbiAgICByZXR1cm4gYXJyU3RhY2tlZCA9PSBvdGhlciAmJiBvdGhTdGFja2VkID09IGFycmF5O1xuICB9XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gdHJ1ZSxcbiAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTtcblxuICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKHNlZW4pIHtcbiAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKSB7XG4gICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbEFycmF5cztcbiJdLCJuYW1lcyI6WyJTZXRDYWNoZSIsInJlcXVpcmUiLCJhcnJheVNvbWUiLCJjYWNoZUhhcyIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwiQ09NUEFSRV9VTk9SREVSRURfRkxBRyIsImVxdWFsQXJyYXlzIiwiYXJyYXkiLCJvdGhlciIsImJpdG1hc2siLCJjdXN0b21pemVyIiwiZXF1YWxGdW5jIiwic3RhY2siLCJpc1BhcnRpYWwiLCJhcnJMZW5ndGgiLCJsZW5ndGgiLCJvdGhMZW5ndGgiLCJhcnJTdGFja2VkIiwiZ2V0Iiwib3RoU3RhY2tlZCIsImluZGV4IiwicmVzdWx0Iiwic2VlbiIsInVuZGVmaW5lZCIsInNldCIsImFyclZhbHVlIiwib3RoVmFsdWUiLCJjb21wYXJlZCIsIm90aEluZGV4IiwicHVzaCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_equalArrays.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_equalByTag.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_equalByTag.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar Symbol = __webpack_require__(/*! ./_Symbol */ \"(app-pages-browser)/./node_modules/lodash/_Symbol.js\"), Uint8Array = __webpack_require__(/*! ./_Uint8Array */ \"(app-pages-browser)/./node_modules/lodash/_Uint8Array.js\"), eq = __webpack_require__(/*! ./eq */ \"(app-pages-browser)/./node_modules/lodash/eq.js\"), equalArrays = __webpack_require__(/*! ./_equalArrays */ \"(app-pages-browser)/./node_modules/lodash/_equalArrays.js\"), mapToArray = __webpack_require__(/*! ./_mapToArray */ \"(app-pages-browser)/./node_modules/lodash/_mapToArray.js\"), setToArray = __webpack_require__(/*! ./_setToArray */ \"(app-pages-browser)/./node_modules/lodash/_setToArray.js\");\n/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;\n/** `Object#toString` result references. */ var boolTag = \"[object Boolean]\", dateTag = \"[object Date]\", errorTag = \"[object Error]\", mapTag = \"[object Map]\", numberTag = \"[object Number]\", regexpTag = \"[object RegExp]\", setTag = \"[object Set]\", stringTag = \"[object String]\", symbolTag = \"[object Symbol]\";\nvar arrayBufferTag = \"[object ArrayBuffer]\", dataViewTag = \"[object DataView]\";\n/** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */ function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n    switch(tag){\n        case dataViewTag:\n            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {\n                return false;\n            }\n            object = object.buffer;\n            other = other.buffer;\n        case arrayBufferTag:\n            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n                return false;\n            }\n            return true;\n        case boolTag:\n        case dateTag:\n        case numberTag:\n            // Coerce booleans to `1` or `0` and dates to milliseconds.\n            // Invalid dates are coerced to `NaN`.\n            return eq(+object, +other);\n        case errorTag:\n            return object.name == other.name && object.message == other.message;\n        case regexpTag:\n        case stringTag:\n            // Coerce regexes to strings and treat strings, primitives and objects,\n            // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n            // for more details.\n            return object == other + \"\";\n        case mapTag:\n            var convert = mapToArray;\n        case setTag:\n            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n            convert || (convert = setToArray);\n            if (object.size != other.size && !isPartial) {\n                return false;\n            }\n            // Assume cyclic values are equal.\n            var stacked = stack.get(object);\n            if (stacked) {\n                return stacked == other;\n            }\n            bitmask |= COMPARE_UNORDERED_FLAG;\n            // Recursively compare objects (susceptible to call stack limits).\n            stack.set(object, other);\n            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n            stack[\"delete\"](object);\n            return result;\n        case symbolTag:\n            if (symbolValueOf) {\n                return symbolValueOf.call(object) == symbolValueOf.call(other);\n            }\n    }\n    return false;\n}\nmodule.exports = equalByTag;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_equalByTag.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_equalObjects.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_equalObjects.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar getAllKeys = __webpack_require__(/*! ./_getAllKeys */ \"(app-pages-browser)/./node_modules/lodash/_getAllKeys.js\");\n/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1;\n/** Used for built-in method references. */ var objectProto = Object.prototype;\n/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */ function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;\n    if (objLength != othLength && !isPartial) {\n        return false;\n    }\n    var index = objLength;\n    while(index--){\n        var key = objProps[index];\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n            return false;\n        }\n    }\n    // Check that cyclic values are equal.\n    var objStacked = stack.get(object);\n    var othStacked = stack.get(other);\n    if (objStacked && othStacked) {\n        return objStacked == other && othStacked == object;\n    }\n    var result = true;\n    stack.set(object, other);\n    stack.set(other, object);\n    var skipCtor = isPartial;\n    while(++index < objLength){\n        key = objProps[index];\n        var objValue = object[key], othValue = other[key];\n        if (customizer) {\n            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);\n        }\n        // Recursively compare objects (susceptible to call stack limits).\n        if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {\n            result = false;\n            break;\n        }\n        skipCtor || (skipCtor = key == \"constructor\");\n    }\n    if (result && !skipCtor) {\n        var objCtor = object.constructor, othCtor = other.constructor;\n        // Non `Object` object instances with different constructors are not equal.\n        if (objCtor != othCtor && \"constructor\" in object && \"constructor\" in other && !(typeof objCtor == \"function\" && objCtor instanceof objCtor && typeof othCtor == \"function\" && othCtor instanceof othCtor)) {\n            result = false;\n        }\n    }\n    stack[\"delete\"](object);\n    stack[\"delete\"](other);\n    return result;\n}\nmodule.exports = equalObjects;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsT2JqZWN0cy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsYUFBYUMsbUJBQU9BLENBQUM7QUFFekIsb0RBQW9ELEdBQ3BELElBQUlDLHVCQUF1QjtBQUUzQix5Q0FBeUMsR0FDekMsSUFBSUMsY0FBY0MsT0FBT0MsU0FBUztBQUVsQyw4Q0FBOEMsR0FDOUMsSUFBSUMsaUJBQWlCSCxZQUFZRyxjQUFjO0FBRS9DOzs7Ozs7Ozs7Ozs7Q0FZQyxHQUNELFNBQVNDLGFBQWFDLE1BQU0sRUFBRUMsS0FBSyxFQUFFQyxPQUFPLEVBQUVDLFVBQVUsRUFBRUMsU0FBUyxFQUFFQyxLQUFLO0lBQ3hFLElBQUlDLFlBQVlKLFVBQVVSLHNCQUN0QmEsV0FBV2YsV0FBV1EsU0FDdEJRLFlBQVlELFNBQVNFLE1BQU0sRUFDM0JDLFdBQVdsQixXQUFXUyxRQUN0QlUsWUFBWUQsU0FBU0QsTUFBTTtJQUUvQixJQUFJRCxhQUFhRyxhQUFhLENBQUNMLFdBQVc7UUFDeEMsT0FBTztJQUNUO0lBQ0EsSUFBSU0sUUFBUUo7SUFDWixNQUFPSSxRQUFTO1FBQ2QsSUFBSUMsTUFBTU4sUUFBUSxDQUFDSyxNQUFNO1FBQ3pCLElBQUksQ0FBRU4sQ0FBQUEsWUFBWU8sT0FBT1osUUFBUUgsZUFBZWdCLElBQUksQ0FBQ2IsT0FBT1ksSUFBRyxHQUFJO1lBQ2pFLE9BQU87UUFDVDtJQUNGO0lBQ0Esc0NBQXNDO0lBQ3RDLElBQUlFLGFBQWFWLE1BQU1XLEdBQUcsQ0FBQ2hCO0lBQzNCLElBQUlpQixhQUFhWixNQUFNVyxHQUFHLENBQUNmO0lBQzNCLElBQUljLGNBQWNFLFlBQVk7UUFDNUIsT0FBT0YsY0FBY2QsU0FBU2dCLGNBQWNqQjtJQUM5QztJQUNBLElBQUlrQixTQUFTO0lBQ2JiLE1BQU1jLEdBQUcsQ0FBQ25CLFFBQVFDO0lBQ2xCSSxNQUFNYyxHQUFHLENBQUNsQixPQUFPRDtJQUVqQixJQUFJb0IsV0FBV2Q7SUFDZixNQUFPLEVBQUVNLFFBQVFKLFVBQVc7UUFDMUJLLE1BQU1OLFFBQVEsQ0FBQ0ssTUFBTTtRQUNyQixJQUFJUyxXQUFXckIsTUFBTSxDQUFDYSxJQUFJLEVBQ3RCUyxXQUFXckIsS0FBSyxDQUFDWSxJQUFJO1FBRXpCLElBQUlWLFlBQVk7WUFDZCxJQUFJb0IsV0FBV2pCLFlBQ1hILFdBQVdtQixVQUFVRCxVQUFVUixLQUFLWixPQUFPRCxRQUFRSyxTQUNuREYsV0FBV2tCLFVBQVVDLFVBQVVULEtBQUtiLFFBQVFDLE9BQU9JO1FBQ3pEO1FBQ0Esa0VBQWtFO1FBQ2xFLElBQUksQ0FBRWtCLENBQUFBLGFBQWFDLFlBQ1ZILGFBQWFDLFlBQVlsQixVQUFVaUIsVUFBVUMsVUFBVXBCLFNBQVNDLFlBQVlFLFNBQzdFa0IsUUFBTyxHQUNSO1lBQ0xMLFNBQVM7WUFDVDtRQUNGO1FBQ0FFLFlBQWFBLENBQUFBLFdBQVdQLE9BQU8sYUFBWTtJQUM3QztJQUNBLElBQUlLLFVBQVUsQ0FBQ0UsVUFBVTtRQUN2QixJQUFJSyxVQUFVekIsT0FBTzBCLFdBQVcsRUFDNUJDLFVBQVUxQixNQUFNeUIsV0FBVztRQUUvQiwyRUFBMkU7UUFDM0UsSUFBSUQsV0FBV0UsV0FDVixpQkFBaUIzQixVQUFVLGlCQUFpQkMsU0FDN0MsQ0FBRSxRQUFPd0IsV0FBVyxjQUFjQSxtQkFBbUJBLFdBQ25ELE9BQU9FLFdBQVcsY0FBY0EsbUJBQW1CQSxPQUFNLEdBQUk7WUFDakVULFNBQVM7UUFDWDtJQUNGO0lBQ0FiLEtBQUssQ0FBQyxTQUFTLENBQUNMO0lBQ2hCSyxLQUFLLENBQUMsU0FBUyxDQUFDSjtJQUNoQixPQUFPaUI7QUFDVDtBQUVBVSxPQUFPQyxPQUFPLEdBQUc5QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbE9iamVjdHMuanM/MWFhYSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2V0QWxsS2V5cyA9IHJlcXVpcmUoJy4vX2dldEFsbEtleXMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgb2JqUHJvcHMgPSBnZXRBbGxLZXlzKG9iamVjdCksXG4gICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoUHJvcHMubGVuZ3RoO1xuXG4gIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIG9ialN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICBpZiAob2JqU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgcmV0dXJuIG9ialN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBvYmplY3Q7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHRydWU7XG4gIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuXG4gIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICA/IChvYmpWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKG9ialZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKVxuICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICB9XG4gIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7XG4gICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgIC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLlxuICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJlxuICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxPYmplY3RzO1xuIl0sIm5hbWVzIjpbImdldEFsbEtleXMiLCJyZXF1aXJlIiwiQ09NUEFSRV9QQVJUSUFMX0ZMQUciLCJvYmplY3RQcm90byIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiZXF1YWxPYmplY3RzIiwib2JqZWN0Iiwib3RoZXIiLCJiaXRtYXNrIiwiY3VzdG9taXplciIsImVxdWFsRnVuYyIsInN0YWNrIiwiaXNQYXJ0aWFsIiwib2JqUHJvcHMiLCJvYmpMZW5ndGgiLCJsZW5ndGgiLCJvdGhQcm9wcyIsIm90aExlbmd0aCIsImluZGV4Iiwia2V5IiwiY2FsbCIsIm9ialN0YWNrZWQiLCJnZXQiLCJvdGhTdGFja2VkIiwicmVzdWx0Iiwic2V0Iiwic2tpcEN0b3IiLCJvYmpWYWx1ZSIsIm90aFZhbHVlIiwiY29tcGFyZWQiLCJ1bmRlZmluZWQiLCJvYmpDdG9yIiwiY29uc3RydWN0b3IiLCJvdGhDdG9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_equalObjects.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_freeGlobal.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_freeGlobal.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/** Detect free variable `global` from Node.js. */ \nvar freeGlobal = typeof __webpack_require__.g == \"object\" && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;\nmodule.exports = freeGlobal;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2ZyZWVHbG9iYWwuanMiLCJtYXBwaW5ncyI6IkFBQUEsZ0RBQWdEO0FBQ2hELElBQUlBLGFBQWEsT0FBT0MscUJBQU1BLElBQUksWUFBWUEscUJBQU1BLElBQUlBLHFCQUFNQSxDQUFDQyxNQUFNLEtBQUtBLFVBQVVELHFCQUFNQTtBQUUxRkUsT0FBT0MsT0FBTyxHQUFHSiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19mcmVlR2xvYmFsLmpzPzA1ZjgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmcmVlR2xvYmFsO1xuIl0sIm5hbWVzIjpbImZyZWVHbG9iYWwiLCJnbG9iYWwiLCJPYmplY3QiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_freeGlobal.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_getAllKeys.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getAllKeys.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar baseGetAllKeys = __webpack_require__(/*! ./_baseGetAllKeys */ \"(app-pages-browser)/./node_modules/lodash/_baseGetAllKeys.js\"), getSymbols = __webpack_require__(/*! ./_getSymbols */ \"(app-pages-browser)/./node_modules/lodash/_getSymbols.js\"), keys = __webpack_require__(/*! ./keys */ \"(app-pages-browser)/./node_modules/lodash/keys.js\");\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */ function getAllKeys(object) {\n    return baseGetAllKeys(object, keys, getSymbols);\n}\nmodule.exports = getAllKeys;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldEFsbEtleXMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLGlCQUFpQkMsbUJBQU9BLENBQUMsMEZBQ3pCQyxhQUFhRCxtQkFBT0EsQ0FBQyxrRkFDckJFLE9BQU9GLG1CQUFPQSxDQUFDO0FBRW5COzs7Ozs7Q0FNQyxHQUNELFNBQVNHLFdBQVdDLE1BQU07SUFDeEIsT0FBT0wsZUFBZUssUUFBUUYsTUFBTUQ7QUFDdEM7QUFFQUksT0FBT0MsT0FBTyxHQUFHSCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRBbGxLZXlzLmpzPzdkNmUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VHZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUdldEFsbEtleXMnKSxcbiAgICBnZXRTeW1ib2xzID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9scycpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBbGxLZXlzO1xuIl0sIm5hbWVzIjpbImJhc2VHZXRBbGxLZXlzIiwicmVxdWlyZSIsImdldFN5bWJvbHMiLCJrZXlzIiwiZ2V0QWxsS2V5cyIsIm9iamVjdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_getAllKeys.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_getMapData.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getMapData.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar isKeyable = __webpack_require__(/*! ./_isKeyable */ \"(app-pages-browser)/./node_modules/lodash/_isKeyable.js\");\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */ function getMapData(map, key) {\n    var data = map.__data__;\n    return isKeyable(key) ? data[typeof key == \"string\" ? \"string\" : \"hash\"] : data.map;\n}\nmodule.exports = getMapData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE1hcERhdGEuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDO0FBRXhCOzs7Ozs7O0NBT0MsR0FDRCxTQUFTQyxXQUFXQyxHQUFHLEVBQUVDLEdBQUc7SUFDMUIsSUFBSUMsT0FBT0YsSUFBSUcsUUFBUTtJQUN2QixPQUFPTixVQUFVSSxPQUNiQyxJQUFJLENBQUMsT0FBT0QsT0FBTyxXQUFXLFdBQVcsT0FBTyxHQUNoREMsS0FBS0YsR0FBRztBQUNkO0FBRUFJLE9BQU9DLE9BQU8sR0FBR04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TWFwRGF0YS5qcz82YzZiIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBpc0tleWFibGUgPSByZXF1aXJlKCcuL19pc0tleWFibGUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hcERhdGE7XG4iXSwibmFtZXMiOlsiaXNLZXlhYmxlIiwicmVxdWlyZSIsImdldE1hcERhdGEiLCJtYXAiLCJrZXkiLCJkYXRhIiwiX19kYXRhX18iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_getMapData.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_getNative.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getNative.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar baseIsNative = __webpack_require__(/*! ./_baseIsNative */ \"(app-pages-browser)/./node_modules/lodash/_baseIsNative.js\"), getValue = __webpack_require__(/*! ./_getValue */ \"(app-pages-browser)/./node_modules/lodash/_getValue.js\");\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */ function getNative(object, key) {\n    var value = getValue(object, key);\n    return baseIsNative(value) ? value : undefined;\n}\nmodule.exports = getNative;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE5hdGl2ZS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsZUFBZUMsbUJBQU9BLENBQUMsc0ZBQ3ZCQyxXQUFXRCxtQkFBT0EsQ0FBQztBQUV2Qjs7Ozs7OztDQU9DLEdBQ0QsU0FBU0UsVUFBVUMsTUFBTSxFQUFFQyxHQUFHO0lBQzVCLElBQUlDLFFBQVFKLFNBQVNFLFFBQVFDO0lBQzdCLE9BQU9MLGFBQWFNLFNBQVNBLFFBQVFDO0FBQ3ZDO0FBRUFDLE9BQU9DLE9BQU8sR0FBR04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TmF0aXZlLmpzPzQxYzkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VJc05hdGl2ZSA9IHJlcXVpcmUoJy4vX2Jhc2VJc05hdGl2ZScpLFxuICAgIGdldFZhbHVlID0gcmVxdWlyZSgnLi9fZ2V0VmFsdWUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXROYXRpdmU7XG4iXSwibmFtZXMiOlsiYmFzZUlzTmF0aXZlIiwicmVxdWlyZSIsImdldFZhbHVlIiwiZ2V0TmF0aXZlIiwib2JqZWN0Iiwia2V5IiwidmFsdWUiLCJ1bmRlZmluZWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_getNative.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_getRawTag.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getRawTag.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar Symbol = __webpack_require__(/*! ./_Symbol */ \"(app-pages-browser)/./node_modules/lodash/_Symbol.js\");\n/** Used for built-in method references. */ var objectProto = Object.prototype;\n/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */ var nativeObjectToString = objectProto.toString;\n/** Built-in value references. */ var symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */ function getRawTag(value) {\n    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];\n    try {\n        value[symToStringTag] = undefined;\n        var unmasked = true;\n    } catch (e) {}\n    var result = nativeObjectToString.call(value);\n    if (unmasked) {\n        if (isOwn) {\n            value[symToStringTag] = tag;\n        } else {\n            delete value[symToStringTag];\n        }\n    }\n    return result;\n}\nmodule.exports = getRawTag;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFJhd1RhZy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUM7QUFFckIseUNBQXlDLEdBQ3pDLElBQUlDLGNBQWNDLE9BQU9DLFNBQVM7QUFFbEMsOENBQThDLEdBQzlDLElBQUlDLGlCQUFpQkgsWUFBWUcsY0FBYztBQUUvQzs7OztDQUlDLEdBQ0QsSUFBSUMsdUJBQXVCSixZQUFZSyxRQUFRO0FBRS9DLCtCQUErQixHQUMvQixJQUFJQyxpQkFBaUJSLFNBQVNBLE9BQU9TLFdBQVcsR0FBR0M7QUFFbkQ7Ozs7OztDQU1DLEdBQ0QsU0FBU0MsVUFBVUMsS0FBSztJQUN0QixJQUFJQyxRQUFRUixlQUFlUyxJQUFJLENBQUNGLE9BQU9KLGlCQUNuQ08sTUFBTUgsS0FBSyxDQUFDSixlQUFlO0lBRS9CLElBQUk7UUFDRkksS0FBSyxDQUFDSixlQUFlLEdBQUdFO1FBQ3hCLElBQUlNLFdBQVc7SUFDakIsRUFBRSxPQUFPQyxHQUFHLENBQUM7SUFFYixJQUFJQyxTQUFTWixxQkFBcUJRLElBQUksQ0FBQ0Y7SUFDdkMsSUFBSUksVUFBVTtRQUNaLElBQUlILE9BQU87WUFDVEQsS0FBSyxDQUFDSixlQUFlLEdBQUdPO1FBQzFCLE9BQU87WUFDTCxPQUFPSCxLQUFLLENBQUNKLGVBQWU7UUFDOUI7SUFDRjtJQUNBLE9BQU9VO0FBQ1Q7QUFFQUMsT0FBT0MsT0FBTyxHQUFHVCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanM/ZmM4MiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYXdUYWc7XG4iXSwibmFtZXMiOlsiU3ltYm9sIiwicmVxdWlyZSIsIm9iamVjdFByb3RvIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsInRvU3RyaW5nIiwic3ltVG9TdHJpbmdUYWciLCJ0b1N0cmluZ1RhZyIsInVuZGVmaW5lZCIsImdldFJhd1RhZyIsInZhbHVlIiwiaXNPd24iLCJjYWxsIiwidGFnIiwidW5tYXNrZWQiLCJlIiwicmVzdWx0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_getRawTag.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_getSymbols.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getSymbols.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar arrayFilter = __webpack_require__(/*! ./_arrayFilter */ \"(app-pages-browser)/./node_modules/lodash/_arrayFilter.js\"), stubArray = __webpack_require__(/*! ./stubArray */ \"(app-pages-browser)/./node_modules/lodash/stubArray.js\");\n/** Used for built-in method references. */ var objectProto = Object.prototype;\n/** Built-in value references. */ var propertyIsEnumerable = objectProto.propertyIsEnumerable;\n/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeGetSymbols = Object.getOwnPropertySymbols;\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */ var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n    if (object == null) {\n        return [];\n    }\n    object = Object(object);\n    return arrayFilter(nativeGetSymbols(object), function(symbol) {\n        return propertyIsEnumerable.call(object, symbol);\n    });\n};\nmodule.exports = getSymbols;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFN5bWJvbHMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLGNBQWNDLG1CQUFPQSxDQUFDLG9GQUN0QkMsWUFBWUQsbUJBQU9BLENBQUM7QUFFeEIseUNBQXlDLEdBQ3pDLElBQUlFLGNBQWNDLE9BQU9DLFNBQVM7QUFFbEMsK0JBQStCLEdBQy9CLElBQUlDLHVCQUF1QkgsWUFBWUcsb0JBQW9CO0FBRTNELHNGQUFzRixHQUN0RixJQUFJQyxtQkFBbUJILE9BQU9JLHFCQUFxQjtBQUVuRDs7Ozs7O0NBTUMsR0FDRCxJQUFJQyxhQUFhLENBQUNGLG1CQUFtQkwsWUFBWSxTQUFTUSxNQUFNO0lBQzlELElBQUlBLFVBQVUsTUFBTTtRQUNsQixPQUFPLEVBQUU7SUFDWDtJQUNBQSxTQUFTTixPQUFPTTtJQUNoQixPQUFPVixZQUFZTyxpQkFBaUJHLFNBQVMsU0FBU0MsTUFBTTtRQUMxRCxPQUFPTCxxQkFBcUJNLElBQUksQ0FBQ0YsUUFBUUM7SUFDM0M7QUFDRjtBQUVBRSxPQUFPQyxPQUFPLEdBQUdMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFN5bWJvbHMuanM/NWJmZSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXJyYXlGaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheUZpbHRlcicpLFxuICAgIHN0dWJBcnJheSA9IHJlcXVpcmUoJy4vc3R1YkFycmF5Jyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gKi9cbnZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICByZXR1cm4gYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbihzeW1ib2wpIHtcbiAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRTeW1ib2xzO1xuIl0sIm5hbWVzIjpbImFycmF5RmlsdGVyIiwicmVxdWlyZSIsInN0dWJBcnJheSIsIm9iamVjdFByb3RvIiwiT2JqZWN0IiwicHJvdG90eXBlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJuYXRpdmVHZXRTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0U3ltYm9scyIsIm9iamVjdCIsInN5bWJvbCIsImNhbGwiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_getSymbols.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_getTag.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_getTag.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar DataView = __webpack_require__(/*! ./_DataView */ \"(app-pages-browser)/./node_modules/lodash/_DataView.js\"), Map = __webpack_require__(/*! ./_Map */ \"(app-pages-browser)/./node_modules/lodash/_Map.js\"), Promise = __webpack_require__(/*! ./_Promise */ \"(app-pages-browser)/./node_modules/lodash/_Promise.js\"), Set = __webpack_require__(/*! ./_Set */ \"(app-pages-browser)/./node_modules/lodash/_Set.js\"), WeakMap = __webpack_require__(/*! ./_WeakMap */ \"(app-pages-browser)/./node_modules/lodash/_WeakMap.js\"), baseGetTag = __webpack_require__(/*! ./_baseGetTag */ \"(app-pages-browser)/./node_modules/lodash/_baseGetTag.js\"), toSource = __webpack_require__(/*! ./_toSource */ \"(app-pages-browser)/./node_modules/lodash/_toSource.js\");\n/** `Object#toString` result references. */ var mapTag = \"[object Map]\", objectTag = \"[object Object]\", promiseTag = \"[object Promise]\", setTag = \"[object Set]\", weakMapTag = \"[object WeakMap]\";\nvar dataViewTag = \"[object DataView]\";\n/** Used to detect maps, sets, and weakmaps. */ var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */ var getTag = baseGetTag;\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set) != setTag || WeakMap && getTag(new WeakMap) != weakMapTag) {\n    getTag = function(value) {\n        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : \"\";\n        if (ctorString) {\n            switch(ctorString){\n                case dataViewCtorString:\n                    return dataViewTag;\n                case mapCtorString:\n                    return mapTag;\n                case promiseCtorString:\n                    return promiseTag;\n                case setCtorString:\n                    return setTag;\n                case weakMapCtorString:\n                    return weakMapTag;\n            }\n        }\n        return result;\n    };\n}\nmodule.exports = getTag;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFRhZy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsV0FBV0MsbUJBQU9BLENBQUMsOEVBQ25CQyxNQUFNRCxtQkFBT0EsQ0FBQyxvRUFDZEUsVUFBVUYsbUJBQU9BLENBQUMsNEVBQ2xCRyxNQUFNSCxtQkFBT0EsQ0FBQyxvRUFDZEksVUFBVUosbUJBQU9BLENBQUMsNEVBQ2xCSyxhQUFhTCxtQkFBT0EsQ0FBQyxrRkFDckJNLFdBQVdOLG1CQUFPQSxDQUFDO0FBRXZCLHlDQUF5QyxHQUN6QyxJQUFJTyxTQUFTLGdCQUNUQyxZQUFZLG1CQUNaQyxhQUFhLG9CQUNiQyxTQUFTLGdCQUNUQyxhQUFhO0FBRWpCLElBQUlDLGNBQWM7QUFFbEIsNkNBQTZDLEdBQzdDLElBQUlDLHFCQUFxQlAsU0FBU1AsV0FDOUJlLGdCQUFnQlIsU0FBU0wsTUFDekJjLG9CQUFvQlQsU0FBU0osVUFDN0JjLGdCQUFnQlYsU0FBU0gsTUFDekJjLG9CQUFvQlgsU0FBU0Y7QUFFakM7Ozs7OztDQU1DLEdBQ0QsSUFBSWMsU0FBU2I7QUFFYiwyRkFBMkY7QUFDM0YsSUFBSSxZQUFhYSxPQUFPLElBQUluQixTQUFTLElBQUlvQixZQUFZLFFBQVFQLGVBQ3hEWCxPQUFPaUIsT0FBTyxJQUFJakIsUUFBUU0sVUFDMUJMLFdBQVdnQixPQUFPaEIsUUFBUWtCLE9BQU8sT0FBT1gsY0FDeENOLE9BQU9lLE9BQU8sSUFBSWYsUUFBUU8sVUFDMUJOLFdBQVdjLE9BQU8sSUFBSWQsWUFBWU8sWUFBYTtJQUNsRE8sU0FBUyxTQUFTRyxLQUFLO1FBQ3JCLElBQUlDLFNBQVNqQixXQUFXZ0IsUUFDcEJFLE9BQU9ELFVBQVVkLFlBQVlhLE1BQU1HLFdBQVcsR0FBR0MsV0FDakRDLGFBQWFILE9BQU9qQixTQUFTaUIsUUFBUTtRQUV6QyxJQUFJRyxZQUFZO1lBQ2QsT0FBUUE7Z0JBQ04sS0FBS2I7b0JBQW9CLE9BQU9EO2dCQUNoQyxLQUFLRTtvQkFBZSxPQUFPUDtnQkFDM0IsS0FBS1E7b0JBQW1CLE9BQU9OO2dCQUMvQixLQUFLTztvQkFBZSxPQUFPTjtnQkFDM0IsS0FBS087b0JBQW1CLE9BQU9OO1lBQ2pDO1FBQ0Y7UUFDQSxPQUFPVztJQUNUO0FBQ0Y7QUFFQUssT0FBT0MsT0FBTyxHQUFHViIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRUYWcuanM/NmRiYyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgRGF0YVZpZXcgPSByZXF1aXJlKCcuL19EYXRhVmlldycpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpLFxuICAgIFByb21pc2UgPSByZXF1aXJlKCcuL19Qcm9taXNlJyksXG4gICAgU2V0ID0gcmVxdWlyZSgnLi9fU2V0JyksXG4gICAgV2Vha01hcCA9IHJlcXVpcmUoJy4vX1dlYWtNYXAnKSxcbiAgICBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIHRvU291cmNlID0gcmVxdWlyZSgnLi9fdG9Tb3VyY2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbnZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksXG4gICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4vKipcbiAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG52YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRUYWc7XG4iXSwibmFtZXMiOlsiRGF0YVZpZXciLCJyZXF1aXJlIiwiTWFwIiwiUHJvbWlzZSIsIlNldCIsIldlYWtNYXAiLCJiYXNlR2V0VGFnIiwidG9Tb3VyY2UiLCJtYXBUYWciLCJvYmplY3RUYWciLCJwcm9taXNlVGFnIiwic2V0VGFnIiwid2Vha01hcFRhZyIsImRhdGFWaWV3VGFnIiwiZGF0YVZpZXdDdG9yU3RyaW5nIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwiZ2V0VGFnIiwiQXJyYXlCdWZmZXIiLCJyZXNvbHZlIiwidmFsdWUiLCJyZXN1bHQiLCJDdG9yIiwiY29uc3RydWN0b3IiLCJ1bmRlZmluZWQiLCJjdG9yU3RyaW5nIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_getTag.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_getValue.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_getValue.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */ \nfunction getValue(object, key) {\n    return object == null ? undefined : object[key];\n}\nmodule.exports = getValue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFZhbHVlLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0NBT0M7QUFDRCxTQUFTQSxTQUFTQyxNQUFNLEVBQUVDLEdBQUc7SUFDM0IsT0FBT0QsVUFBVSxPQUFPRSxZQUFZRixNQUFNLENBQUNDLElBQUk7QUFDakQ7QUFFQUUsT0FBT0MsT0FBTyxHQUFHTCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRWYWx1ZS5qcz9lOTlmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFZhbHVlO1xuIl0sIm5hbWVzIjpbImdldFZhbHVlIiwib2JqZWN0Iiwia2V5IiwidW5kZWZpbmVkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_getValue.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_hashClear.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_hashClear.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar nativeCreate = __webpack_require__(/*! ./_nativeCreate */ \"(app-pages-browser)/./node_modules/lodash/_nativeCreate.js\");\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */ function hashClear() {\n    this.__data__ = nativeCreate ? nativeCreate(null) : {};\n    this.size = 0;\n}\nmodule.exports = hashClear;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hDbGVhci5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsZUFBZUMsbUJBQU9BLENBQUM7QUFFM0I7Ozs7OztDQU1DLEdBQ0QsU0FBU0M7SUFDUCxJQUFJLENBQUNDLFFBQVEsR0FBR0gsZUFBZUEsYUFBYSxRQUFRLENBQUM7SUFDckQsSUFBSSxDQUFDSSxJQUFJLEdBQUc7QUFDZDtBQUVBQyxPQUFPQyxPQUFPLEdBQUdKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hDbGVhci5qcz9jNjA0Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIEhhc2hcbiAqL1xuZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaENsZWFyO1xuIl0sIm5hbWVzIjpbIm5hdGl2ZUNyZWF0ZSIsInJlcXVpcmUiLCJoYXNoQ2xlYXIiLCJfX2RhdGFfXyIsInNpemUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_hashClear.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_hashDelete.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_hashDelete.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ \nfunction hashDelete(key) {\n    var result = this.has(key) && delete this.__data__[key];\n    this.size -= result ? 1 : 0;\n    return result;\n}\nmodule.exports = hashDelete;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hEZWxldGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDO0FBQ0QsU0FBU0EsV0FBV0MsR0FBRztJQUNyQixJQUFJQyxTQUFTLElBQUksQ0FBQ0MsR0FBRyxDQUFDRixRQUFRLE9BQU8sSUFBSSxDQUFDRyxRQUFRLENBQUNILElBQUk7SUFDdkQsSUFBSSxDQUFDSSxJQUFJLElBQUlILFNBQVMsSUFBSTtJQUMxQixPQUFPQTtBQUNUO0FBRUFJLE9BQU9DLE9BQU8sR0FBR1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaERlbGV0ZS5qcz8yNmQyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaERlbGV0ZTtcbiJdLCJuYW1lcyI6WyJoYXNoRGVsZXRlIiwia2V5IiwicmVzdWx0IiwiaGFzIiwiX19kYXRhX18iLCJzaXplIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_hashDelete.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_hashGet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashGet.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar nativeCreate = __webpack_require__(/*! ./_nativeCreate */ \"(app-pages-browser)/./node_modules/lodash/_nativeCreate.js\");\n/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = \"__lodash_hash_undefined__\";\n/** Used for built-in method references. */ var objectProto = Object.prototype;\n/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function hashGet(key) {\n    var data = this.__data__;\n    if (nativeCreate) {\n        var result = data[key];\n        return result === HASH_UNDEFINED ? undefined : result;\n    }\n    return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\nmodule.exports = hashGet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hHZXQuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLGVBQWVDLG1CQUFPQSxDQUFDO0FBRTNCLGtEQUFrRCxHQUNsRCxJQUFJQyxpQkFBaUI7QUFFckIseUNBQXlDLEdBQ3pDLElBQUlDLGNBQWNDLE9BQU9DLFNBQVM7QUFFbEMsOENBQThDLEdBQzlDLElBQUlDLGlCQUFpQkgsWUFBWUcsY0FBYztBQUUvQzs7Ozs7Ozs7Q0FRQyxHQUNELFNBQVNDLFFBQVFDLEdBQUc7SUFDbEIsSUFBSUMsT0FBTyxJQUFJLENBQUNDLFFBQVE7SUFDeEIsSUFBSVYsY0FBYztRQUNoQixJQUFJVyxTQUFTRixJQUFJLENBQUNELElBQUk7UUFDdEIsT0FBT0csV0FBV1QsaUJBQWlCVSxZQUFZRDtJQUNqRDtJQUNBLE9BQU9MLGVBQWVPLElBQUksQ0FBQ0osTUFBTUQsT0FBT0MsSUFBSSxDQUFDRCxJQUFJLEdBQUdJO0FBQ3REO0FBRUFFLE9BQU9DLE9BQU8sR0FBR1IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaEdldC5qcz9kN2VhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hHZXQ7XG4iXSwibmFtZXMiOlsibmF0aXZlQ3JlYXRlIiwicmVxdWlyZSIsIkhBU0hfVU5ERUZJTkVEIiwib2JqZWN0UHJvdG8iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImhhc2hHZXQiLCJrZXkiLCJkYXRhIiwiX19kYXRhX18iLCJyZXN1bHQiLCJ1bmRlZmluZWQiLCJjYWxsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_hashGet.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_hashHas.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashHas.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar nativeCreate = __webpack_require__(/*! ./_nativeCreate */ \"(app-pages-browser)/./node_modules/lodash/_nativeCreate.js\");\n/** Used for built-in method references. */ var objectProto = Object.prototype;\n/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function hashHas(key) {\n    var data = this.__data__;\n    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\nmodule.exports = hashHas;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hIYXMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLGVBQWVDLG1CQUFPQSxDQUFDO0FBRTNCLHlDQUF5QyxHQUN6QyxJQUFJQyxjQUFjQyxPQUFPQyxTQUFTO0FBRWxDLDhDQUE4QyxHQUM5QyxJQUFJQyxpQkFBaUJILFlBQVlHLGNBQWM7QUFFL0M7Ozs7Ozs7O0NBUUMsR0FDRCxTQUFTQyxRQUFRQyxHQUFHO0lBQ2xCLElBQUlDLE9BQU8sSUFBSSxDQUFDQyxRQUFRO0lBQ3hCLE9BQU9ULGVBQWdCUSxJQUFJLENBQUNELElBQUksS0FBS0csWUFBYUwsZUFBZU0sSUFBSSxDQUFDSCxNQUFNRDtBQUM5RTtBQUVBSyxPQUFPQyxPQUFPLEdBQUdQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hIYXMuanM/MzRjOSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoSGFzO1xuIl0sIm5hbWVzIjpbIm5hdGl2ZUNyZWF0ZSIsInJlcXVpcmUiLCJvYmplY3RQcm90byIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiaGFzaEhhcyIsImtleSIsImRhdGEiLCJfX2RhdGFfXyIsInVuZGVmaW5lZCIsImNhbGwiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_hashHas.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_hashSet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashSet.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar nativeCreate = __webpack_require__(/*! ./_nativeCreate */ \"(app-pages-browser)/./node_modules/lodash/_nativeCreate.js\");\n/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = \"__lodash_hash_undefined__\";\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */ function hashSet(key, value) {\n    var data = this.__data__;\n    this.size += this.has(key) ? 0 : 1;\n    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;\n    return this;\n}\nmodule.exports = hashSet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hTZXQuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLGVBQWVDLG1CQUFPQSxDQUFDO0FBRTNCLGtEQUFrRCxHQUNsRCxJQUFJQyxpQkFBaUI7QUFFckI7Ozs7Ozs7OztDQVNDLEdBQ0QsU0FBU0MsUUFBUUMsR0FBRyxFQUFFQyxLQUFLO0lBQ3pCLElBQUlDLE9BQU8sSUFBSSxDQUFDQyxRQUFRO0lBQ3hCLElBQUksQ0FBQ0MsSUFBSSxJQUFJLElBQUksQ0FBQ0MsR0FBRyxDQUFDTCxPQUFPLElBQUk7SUFDakNFLElBQUksQ0FBQ0YsSUFBSSxHQUFHLGdCQUFpQkMsVUFBVUssWUFBYVIsaUJBQWlCRztJQUNyRSxPQUFPLElBQUk7QUFDYjtBQUVBTSxPQUFPQyxPQUFPLEdBQUdUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hTZXQuanM/MGYwMSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgdGhpcy5zaXplICs9IHRoaXMuaGFzKGtleSkgPyAwIDogMTtcbiAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hTZXQ7XG4iXSwibmFtZXMiOlsibmF0aXZlQ3JlYXRlIiwicmVxdWlyZSIsIkhBU0hfVU5ERUZJTkVEIiwiaGFzaFNldCIsImtleSIsInZhbHVlIiwiZGF0YSIsIl9fZGF0YV9fIiwic2l6ZSIsImhhcyIsInVuZGVmaW5lZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_hashSet.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_isIndex.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_isIndex.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/** Used as references for various `Number` constants. */ \nvar MAX_SAFE_INTEGER = 9007199254740991;\n/** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\\d*)$/;\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */ function isIndex(value, length) {\n    var type = typeof value;\n    length = length == null ? MAX_SAFE_INTEGER : length;\n    return !!length && (type == \"number\" || type != \"symbol\" && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n}\nmodule.exports = isIndex;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzSW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsdURBQXVEO0FBQ3ZELElBQUlBLG1CQUFtQjtBQUV2Qiw0Q0FBNEMsR0FDNUMsSUFBSUMsV0FBVztBQUVmOzs7Ozs7O0NBT0MsR0FDRCxTQUFTQyxRQUFRQyxLQUFLLEVBQUVDLE1BQU07SUFDNUIsSUFBSUMsT0FBTyxPQUFPRjtJQUNsQkMsU0FBU0EsVUFBVSxPQUFPSixtQkFBbUJJO0lBRTdDLE9BQU8sQ0FBQyxDQUFDQSxVQUNOQyxDQUFBQSxRQUFRLFlBQ05BLFFBQVEsWUFBWUosU0FBU0ssSUFBSSxDQUFDSCxNQUFNLEtBQ3RDQSxRQUFRLENBQUMsS0FBS0EsUUFBUSxLQUFLLEtBQUtBLFFBQVFDO0FBQ2pEO0FBRUFHLE9BQU9DLE9BQU8sR0FBR04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNJbmRleC5qcz82NWJiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0luZGV4O1xuIl0sIm5hbWVzIjpbIk1BWF9TQUZFX0lOVEVHRVIiLCJyZUlzVWludCIsImlzSW5kZXgiLCJ2YWx1ZSIsImxlbmd0aCIsInR5cGUiLCJ0ZXN0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_isIndex.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_isKeyable.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_isKeyable.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */ \nfunction isKeyable(value) {\n    var type = typeof value;\n    return type == \"string\" || type == \"number\" || type == \"symbol\" || type == \"boolean\" ? value !== \"__proto__\" : value === null;\n}\nmodule.exports = isKeyable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzS2V5YWJsZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0NBTUM7QUFDRCxTQUFTQSxVQUFVQyxLQUFLO0lBQ3RCLElBQUlDLE9BQU8sT0FBT0Q7SUFDbEIsT0FBTyxRQUFTLFlBQVlDLFFBQVEsWUFBWUEsUUFBUSxZQUFZQSxRQUFRLFlBQ3ZFRCxVQUFVLGNBQ1ZBLFVBQVU7QUFDakI7QUFFQUUsT0FBT0MsT0FBTyxHQUFHSiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0tleWFibGUuanM/ZDVkZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNLZXlhYmxlO1xuIl0sIm5hbWVzIjpbImlzS2V5YWJsZSIsInZhbHVlIiwidHlwZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_isKeyable.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_isMasked.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_isMasked.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar coreJsData = __webpack_require__(/*! ./_coreJsData */ \"(app-pages-browser)/./node_modules/lodash/_coreJsData.js\");\n/** Used to detect methods masquerading as native. */ var maskSrcKey = function() {\n    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || \"\");\n    return uid ? \"Symbol(src)_1.\" + uid : \"\";\n}();\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */ function isMasked(func) {\n    return !!maskSrcKey && maskSrcKey in func;\n}\nmodule.exports = isMasked;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzTWFza2VkLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxhQUFhQyxtQkFBT0EsQ0FBQztBQUV6QixtREFBbUQsR0FDbkQsSUFBSUMsYUFBYztJQUNoQixJQUFJQyxNQUFNLFNBQVNDLElBQUksQ0FBQ0osY0FBY0EsV0FBV0ssSUFBSSxJQUFJTCxXQUFXSyxJQUFJLENBQUNDLFFBQVEsSUFBSTtJQUNyRixPQUFPSCxNQUFPLG1CQUFtQkEsTUFBTztBQUMxQztBQUVBOzs7Ozs7Q0FNQyxHQUNELFNBQVNJLFNBQVNDLElBQUk7SUFDcEIsT0FBTyxDQUFDLENBQUNOLGNBQWVBLGNBQWNNO0FBQ3hDO0FBRUFDLE9BQU9DLE9BQU8sR0FBR0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNNYXNrZWQuanM/ZTRjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29yZUpzRGF0YSA9IHJlcXVpcmUoJy4vX2NvcmVKc0RhdGEnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc01hc2tlZDtcbiJdLCJuYW1lcyI6WyJjb3JlSnNEYXRhIiwicmVxdWlyZSIsIm1hc2tTcmNLZXkiLCJ1aWQiLCJleGVjIiwia2V5cyIsIklFX1BST1RPIiwiaXNNYXNrZWQiLCJmdW5jIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_isMasked.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_isPrototype.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_isPrototype.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/** Used for built-in method references. */ \nvar objectProto = Object.prototype;\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */ function isPrototype(value) {\n    var Ctor = value && value.constructor, proto = typeof Ctor == \"function\" && Ctor.prototype || objectProto;\n    return value === proto;\n}\nmodule.exports = isPrototype;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzUHJvdG90eXBlLmpzIiwibWFwcGluZ3MiOiJBQUFBLHlDQUF5QztBQUN6QyxJQUFJQSxjQUFjQyxPQUFPQyxTQUFTO0FBRWxDOzs7Ozs7Q0FNQyxHQUNELFNBQVNDLFlBQVlDLEtBQUs7SUFDeEIsSUFBSUMsT0FBT0QsU0FBU0EsTUFBTUUsV0FBVyxFQUNqQ0MsUUFBUSxPQUFRRixRQUFRLGNBQWNBLEtBQUtILFNBQVMsSUFBS0Y7SUFFN0QsT0FBT0ksVUFBVUc7QUFDbkI7QUFFQUMsT0FBT0MsT0FBTyxHQUFHTiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc1Byb3RvdHlwZS5qcz81MDExIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1Byb3RvdHlwZTtcbiJdLCJuYW1lcyI6WyJvYmplY3RQcm90byIsIk9iamVjdCIsInByb3RvdHlwZSIsImlzUHJvdG90eXBlIiwidmFsdWUiLCJDdG9yIiwiY29uc3RydWN0b3IiLCJwcm90byIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_isPrototype.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_listCacheClear.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_listCacheClear.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */ \nfunction listCacheClear() {\n    this.__data__ = [];\n    this.size = 0;\n}\nmodule.exports = listCacheClear;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUNsZWFyLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Q0FNQztBQUNELFNBQVNBO0lBQ1AsSUFBSSxDQUFDQyxRQUFRLEdBQUcsRUFBRTtJQUNsQixJQUFJLENBQUNDLElBQUksR0FBRztBQUNkO0FBRUFDLE9BQU9DLE9BQU8sR0FBR0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlQ2xlYXIuanM/NWY5MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlQ2xlYXI7XG4iXSwibmFtZXMiOlsibGlzdENhY2hlQ2xlYXIiLCJfX2RhdGFfXyIsInNpemUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_listCacheClear.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_listCacheDelete.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_listCacheDelete.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ \"(app-pages-browser)/./node_modules/lodash/_assocIndexOf.js\");\n/** Used for built-in method references. */ var arrayProto = Array.prototype;\n/** Built-in value references. */ var splice = arrayProto.splice;\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function listCacheDelete(key) {\n    var data = this.__data__, index = assocIndexOf(data, key);\n    if (index < 0) {\n        return false;\n    }\n    var lastIndex = data.length - 1;\n    if (index == lastIndex) {\n        data.pop();\n    } else {\n        splice.call(data, index, 1);\n    }\n    --this.size;\n    return true;\n}\nmodule.exports = listCacheDelete;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZURlbGV0ZS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsZUFBZUMsbUJBQU9BLENBQUM7QUFFM0IseUNBQXlDLEdBQ3pDLElBQUlDLGFBQWFDLE1BQU1DLFNBQVM7QUFFaEMsK0JBQStCLEdBQy9CLElBQUlDLFNBQVNILFdBQVdHLE1BQU07QUFFOUI7Ozs7Ozs7O0NBUUMsR0FDRCxTQUFTQyxnQkFBZ0JDLEdBQUc7SUFDMUIsSUFBSUMsT0FBTyxJQUFJLENBQUNDLFFBQVEsRUFDcEJDLFFBQVFWLGFBQWFRLE1BQU1EO0lBRS9CLElBQUlHLFFBQVEsR0FBRztRQUNiLE9BQU87SUFDVDtJQUNBLElBQUlDLFlBQVlILEtBQUtJLE1BQU0sR0FBRztJQUM5QixJQUFJRixTQUFTQyxXQUFXO1FBQ3RCSCxLQUFLSyxHQUFHO0lBQ1YsT0FBTztRQUNMUixPQUFPUyxJQUFJLENBQUNOLE1BQU1FLE9BQU87SUFDM0I7SUFDQSxFQUFFLElBQUksQ0FBQ0ssSUFBSTtJQUNYLE9BQU87QUFDVDtBQUVBQyxPQUFPQyxPQUFPLEdBQUdYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZURlbGV0ZS5qcz8xMzg1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgLS10aGlzLnNpemU7XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZURlbGV0ZTtcbiJdLCJuYW1lcyI6WyJhc3NvY0luZGV4T2YiLCJyZXF1aXJlIiwiYXJyYXlQcm90byIsIkFycmF5IiwicHJvdG90eXBlIiwic3BsaWNlIiwibGlzdENhY2hlRGVsZXRlIiwia2V5IiwiZGF0YSIsIl9fZGF0YV9fIiwiaW5kZXgiLCJsYXN0SW5kZXgiLCJsZW5ndGgiLCJwb3AiLCJjYWxsIiwic2l6ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_listCacheDelete.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_listCacheGet.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheGet.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ \"(app-pages-browser)/./node_modules/lodash/_assocIndexOf.js\");\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function listCacheGet(key) {\n    var data = this.__data__, index = assocIndexOf(data, key);\n    return index < 0 ? undefined : data[index][1];\n}\nmodule.exports = listCacheGet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUdldC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsZUFBZUMsbUJBQU9BLENBQUM7QUFFM0I7Ozs7Ozs7O0NBUUMsR0FDRCxTQUFTQyxhQUFhQyxHQUFHO0lBQ3ZCLElBQUlDLE9BQU8sSUFBSSxDQUFDQyxRQUFRLEVBQ3BCQyxRQUFRTixhQUFhSSxNQUFNRDtJQUUvQixPQUFPRyxRQUFRLElBQUlDLFlBQVlILElBQUksQ0FBQ0UsTUFBTSxDQUFDLEVBQUU7QUFDL0M7QUFFQUUsT0FBT0MsT0FBTyxHQUFHUCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVHZXQuanM/YzIzMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlR2V0O1xuIl0sIm5hbWVzIjpbImFzc29jSW5kZXhPZiIsInJlcXVpcmUiLCJsaXN0Q2FjaGVHZXQiLCJrZXkiLCJkYXRhIiwiX19kYXRhX18iLCJpbmRleCIsInVuZGVmaW5lZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_listCacheGet.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_listCacheHas.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheHas.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ \"(app-pages-browser)/./node_modules/lodash/_assocIndexOf.js\");\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function listCacheHas(key) {\n    return assocIndexOf(this.__data__, key) > -1;\n}\nmodule.exports = listCacheHas;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUhhcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsZUFBZUMsbUJBQU9BLENBQUM7QUFFM0I7Ozs7Ozs7O0NBUUMsR0FDRCxTQUFTQyxhQUFhQyxHQUFHO0lBQ3ZCLE9BQU9ILGFBQWEsSUFBSSxDQUFDSSxRQUFRLEVBQUVELE9BQU8sQ0FBQztBQUM3QztBQUVBRSxPQUFPQyxPQUFPLEdBQUdKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUhhcy5qcz9kOWY1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlSGFzO1xuIl0sIm5hbWVzIjpbImFzc29jSW5kZXhPZiIsInJlcXVpcmUiLCJsaXN0Q2FjaGVIYXMiLCJrZXkiLCJfX2RhdGFfXyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_listCacheHas.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_listCacheSet.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheSet.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ \"(app-pages-browser)/./node_modules/lodash/_assocIndexOf.js\");\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */ function listCacheSet(key, value) {\n    var data = this.__data__, index = assocIndexOf(data, key);\n    if (index < 0) {\n        ++this.size;\n        data.push([\n            key,\n            value\n        ]);\n    } else {\n        data[index][1] = value;\n    }\n    return this;\n}\nmodule.exports = listCacheSet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZVNldC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsZUFBZUMsbUJBQU9BLENBQUM7QUFFM0I7Ozs7Ozs7OztDQVNDLEdBQ0QsU0FBU0MsYUFBYUMsR0FBRyxFQUFFQyxLQUFLO0lBQzlCLElBQUlDLE9BQU8sSUFBSSxDQUFDQyxRQUFRLEVBQ3BCQyxRQUFRUCxhQUFhSyxNQUFNRjtJQUUvQixJQUFJSSxRQUFRLEdBQUc7UUFDYixFQUFFLElBQUksQ0FBQ0MsSUFBSTtRQUNYSCxLQUFLSSxJQUFJLENBQUM7WUFBQ047WUFBS0M7U0FBTTtJQUN4QixPQUFPO1FBQ0xDLElBQUksQ0FBQ0UsTUFBTSxDQUFDLEVBQUUsR0FBR0g7SUFDbkI7SUFDQSxPQUFPLElBQUk7QUFDYjtBQUVBTSxPQUFPQyxPQUFPLEdBQUdUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZVNldC5qcz9mYTA4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICArK3RoaXMuc2l6ZTtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZVNldDtcbiJdLCJuYW1lcyI6WyJhc3NvY0luZGV4T2YiLCJyZXF1aXJlIiwibGlzdENhY2hlU2V0Iiwia2V5IiwidmFsdWUiLCJkYXRhIiwiX19kYXRhX18iLCJpbmRleCIsInNpemUiLCJwdXNoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_listCacheSet.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_mapCacheClear.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_mapCacheClear.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar Hash = __webpack_require__(/*! ./_Hash */ \"(app-pages-browser)/./node_modules/lodash/_Hash.js\"), ListCache = __webpack_require__(/*! ./_ListCache */ \"(app-pages-browser)/./node_modules/lodash/_ListCache.js\"), Map = __webpack_require__(/*! ./_Map */ \"(app-pages-browser)/./node_modules/lodash/_Map.js\");\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */ function mapCacheClear() {\n    this.size = 0;\n    this.__data__ = {\n        \"hash\": new Hash,\n        \"map\": new (Map || ListCache),\n        \"string\": new Hash\n    };\n}\nmodule.exports = mapCacheClear;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlQ2xlYXIuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDLHNFQUNmQyxZQUFZRCxtQkFBT0EsQ0FBQyxnRkFDcEJFLE1BQU1GLG1CQUFPQSxDQUFDO0FBRWxCOzs7Ozs7Q0FNQyxHQUNELFNBQVNHO0lBQ1AsSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDWixJQUFJLENBQUNDLFFBQVEsR0FBRztRQUNkLFFBQVEsSUFBSU47UUFDWixPQUFPLElBQUtHLENBQUFBLE9BQU9ELFNBQVE7UUFDM0IsVUFBVSxJQUFJRjtJQUNoQjtBQUNGO0FBRUFPLE9BQU9DLE9BQU8sR0FBR0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVDbGVhci5qcz85YTExIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBIYXNoID0gcmVxdWlyZSgnLi9fSGFzaCcpLFxuICAgIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVDbGVhcjtcbiJdLCJuYW1lcyI6WyJIYXNoIiwicmVxdWlyZSIsIkxpc3RDYWNoZSIsIk1hcCIsIm1hcENhY2hlQ2xlYXIiLCJzaXplIiwiX19kYXRhX18iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_mapCacheClear.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_mapCacheDelete.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_mapCacheDelete.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar getMapData = __webpack_require__(/*! ./_getMapData */ \"(app-pages-browser)/./node_modules/lodash/_getMapData.js\");\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function mapCacheDelete(key) {\n    var result = getMapData(this, key)[\"delete\"](key);\n    this.size -= result ? 1 : 0;\n    return result;\n}\nmodule.exports = mapCacheDelete;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlRGVsZXRlLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxhQUFhQyxtQkFBT0EsQ0FBQztBQUV6Qjs7Ozs7Ozs7Q0FRQyxHQUNELFNBQVNDLGVBQWVDLEdBQUc7SUFDekIsSUFBSUMsU0FBU0osV0FBVyxJQUFJLEVBQUVHLElBQUksQ0FBQyxTQUFTLENBQUNBO0lBQzdDLElBQUksQ0FBQ0UsSUFBSSxJQUFJRCxTQUFTLElBQUk7SUFDMUIsT0FBT0E7QUFDVDtBQUVBRSxPQUFPQyxPQUFPLEdBQUdMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlRGVsZXRlLmpzPzIyMTkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlRGVsZXRlO1xuIl0sIm5hbWVzIjpbImdldE1hcERhdGEiLCJyZXF1aXJlIiwibWFwQ2FjaGVEZWxldGUiLCJrZXkiLCJyZXN1bHQiLCJzaXplIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_mapCacheDelete.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_mapCacheGet.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheGet.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar getMapData = __webpack_require__(/*! ./_getMapData */ \"(app-pages-browser)/./node_modules/lodash/_getMapData.js\");\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function mapCacheGet(key) {\n    return getMapData(this, key).get(key);\n}\nmodule.exports = mapCacheGet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlR2V0LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxhQUFhQyxtQkFBT0EsQ0FBQztBQUV6Qjs7Ozs7Ozs7Q0FRQyxHQUNELFNBQVNDLFlBQVlDLEdBQUc7SUFDdEIsT0FBT0gsV0FBVyxJQUFJLEVBQUVHLEtBQUtDLEdBQUcsQ0FBQ0Q7QUFDbkM7QUFFQUUsT0FBT0MsT0FBTyxHQUFHSiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUdldC5qcz8xMjAyIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVHZXQ7XG4iXSwibmFtZXMiOlsiZ2V0TWFwRGF0YSIsInJlcXVpcmUiLCJtYXBDYWNoZUdldCIsImtleSIsImdldCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_mapCacheGet.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_mapCacheHas.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheHas.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar getMapData = __webpack_require__(/*! ./_getMapData */ \"(app-pages-browser)/./node_modules/lodash/_getMapData.js\");\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function mapCacheHas(key) {\n    return getMapData(this, key).has(key);\n}\nmodule.exports = mapCacheHas;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlSGFzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxhQUFhQyxtQkFBT0EsQ0FBQztBQUV6Qjs7Ozs7Ozs7Q0FRQyxHQUNELFNBQVNDLFlBQVlDLEdBQUc7SUFDdEIsT0FBT0gsV0FBVyxJQUFJLEVBQUVHLEtBQUtDLEdBQUcsQ0FBQ0Q7QUFDbkM7QUFFQUUsT0FBT0MsT0FBTyxHQUFHSiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUhhcy5qcz82YjI1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlSGFzO1xuIl0sIm5hbWVzIjpbImdldE1hcERhdGEiLCJyZXF1aXJlIiwibWFwQ2FjaGVIYXMiLCJrZXkiLCJoYXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_mapCacheHas.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_mapCacheSet.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheSet.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar getMapData = __webpack_require__(/*! ./_getMapData */ \"(app-pages-browser)/./node_modules/lodash/_getMapData.js\");\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */ function mapCacheSet(key, value) {\n    var data = getMapData(this, key), size = data.size;\n    data.set(key, value);\n    this.size += data.size == size ? 0 : 1;\n    return this;\n}\nmodule.exports = mapCacheSet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlU2V0LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxhQUFhQyxtQkFBT0EsQ0FBQztBQUV6Qjs7Ozs7Ozs7O0NBU0MsR0FDRCxTQUFTQyxZQUFZQyxHQUFHLEVBQUVDLEtBQUs7SUFDN0IsSUFBSUMsT0FBT0wsV0FBVyxJQUFJLEVBQUVHLE1BQ3hCRyxPQUFPRCxLQUFLQyxJQUFJO0lBRXBCRCxLQUFLRSxHQUFHLENBQUNKLEtBQUtDO0lBQ2QsSUFBSSxDQUFDRSxJQUFJLElBQUlELEtBQUtDLElBQUksSUFBSUEsT0FBTyxJQUFJO0lBQ3JDLE9BQU8sSUFBSTtBQUNiO0FBRUFFLE9BQU9DLE9BQU8sR0FBR1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVTZXQuanM/Yzg2NiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlU2V0O1xuIl0sIm5hbWVzIjpbImdldE1hcERhdGEiLCJyZXF1aXJlIiwibWFwQ2FjaGVTZXQiLCJrZXkiLCJ2YWx1ZSIsImRhdGEiLCJzaXplIiwic2V0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_mapCacheSet.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_mapToArray.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_mapToArray.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */ \nfunction mapToArray(map) {\n    var index = -1, result = Array(map.size);\n    map.forEach(function(value, key) {\n        result[++index] = [\n            key,\n            value\n        ];\n    });\n    return result;\n}\nmodule.exports = mapToArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcFRvQXJyYXkuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztDQU1DO0FBQ0QsU0FBU0EsV0FBV0MsR0FBRztJQUNyQixJQUFJQyxRQUFRLENBQUMsR0FDVEMsU0FBU0MsTUFBTUgsSUFBSUksSUFBSTtJQUUzQkosSUFBSUssT0FBTyxDQUFDLFNBQVNDLEtBQUssRUFBRUMsR0FBRztRQUM3QkwsTUFBTSxDQUFDLEVBQUVELE1BQU0sR0FBRztZQUFDTTtZQUFLRDtTQUFNO0lBQ2hDO0lBQ0EsT0FBT0o7QUFDVDtBQUVBTSxPQUFPQyxPQUFPLEdBQUdWIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcFRvQXJyYXkuanM/Nzk4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gKi9cbmZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcFRvQXJyYXk7XG4iXSwibmFtZXMiOlsibWFwVG9BcnJheSIsIm1hcCIsImluZGV4IiwicmVzdWx0IiwiQXJyYXkiLCJzaXplIiwiZm9yRWFjaCIsInZhbHVlIiwia2V5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_mapToArray.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_nativeCreate.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_nativeCreate.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar getNative = __webpack_require__(/*! ./_getNative */ \"(app-pages-browser)/./node_modules/lodash/_getNative.js\");\n/* Built-in method references that are verified to be native. */ var nativeCreate = getNative(Object, \"create\");\nmodule.exports = nativeCreate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25hdGl2ZUNyZWF0ZS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsWUFBWUMsbUJBQU9BLENBQUM7QUFFeEIsOERBQThELEdBQzlELElBQUlDLGVBQWVGLFVBQVVHLFFBQVE7QUFFckNDLE9BQU9DLE9BQU8sR0FBR0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlQ3JlYXRlLmpzPzhmMDYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUNyZWF0ZTtcbiJdLCJuYW1lcyI6WyJnZXROYXRpdmUiLCJyZXF1aXJlIiwibmF0aXZlQ3JlYXRlIiwiT2JqZWN0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_nativeCreate.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_nativeKeys.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_nativeKeys.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar overArg = __webpack_require__(/*! ./_overArg */ \"(app-pages-browser)/./node_modules/lodash/_overArg.js\");\n/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeKeys = overArg(Object.keys, Object);\nmodule.exports = nativeKeys;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25hdGl2ZUtleXMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFVBQVVDLG1CQUFPQSxDQUFDO0FBRXRCLHNGQUFzRixHQUN0RixJQUFJQyxhQUFhRixRQUFRRyxPQUFPQyxJQUFJLEVBQUVEO0FBRXRDRSxPQUFPQyxPQUFPLEdBQUdKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25hdGl2ZUtleXMuanM/MWVmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgb3ZlckFyZyA9IHJlcXVpcmUoJy4vX292ZXJBcmcnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUtleXM7XG4iXSwibmFtZXMiOlsib3ZlckFyZyIsInJlcXVpcmUiLCJuYXRpdmVLZXlzIiwiT2JqZWN0Iiwia2V5cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_nativeKeys.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_nodeUtil.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_nodeUtil.js ***!
  \******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/* module decorator */ module = __webpack_require__.nmd(module);\n\nvar freeGlobal = __webpack_require__(/*! ./_freeGlobal */ \"(app-pages-browser)/./node_modules/lodash/_freeGlobal.js\");\n/** Detect free variable `exports`. */ var freeExports =  true && exports && !exports.nodeType && exports;\n/** Detect free variable `module`. */ var freeModule = freeExports && \"object\" == \"object\" && module && !module.nodeType && module;\n/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;\n/** Detect free variable `process` from Node.js. */ var freeProcess = moduleExports && freeGlobal.process;\n/** Used to access faster Node.js helpers. */ var nodeUtil = function() {\n    try {\n        // Use `util.types` for Node.js 10+.\n        var types = freeModule && freeModule.require && freeModule.require(\"util\").types;\n        if (types) {\n            return types;\n        }\n        // Legacy `process.binding('util')` for Node.js < 10.\n        return freeProcess && freeProcess.binding && freeProcess.binding(\"util\");\n    } catch (e) {}\n}();\nmodule.exports = nodeUtil;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25vZGVVdGlsLmpzIiwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsYUFBYUMsbUJBQU9BLENBQUM7QUFFekIsb0NBQW9DLEdBQ3BDLElBQUlDLGNBQWMsS0FBa0IsSUFBWUMsV0FBVyxDQUFDQSxRQUFRQyxRQUFRLElBQUlEO0FBRWhGLG1DQUFtQyxHQUNuQyxJQUFJRSxhQUFhSCxlQUFlLFFBQWFJLElBQUksWUFBWUEsVUFBVSxDQUFDQSxPQUFPRixRQUFRLElBQUlFO0FBRTNGLDREQUE0RCxHQUM1RCxJQUFJQyxnQkFBZ0JGLGNBQWNBLFdBQVdGLE9BQU8sS0FBS0Q7QUFFekQsaURBQWlELEdBQ2pELElBQUlNLGNBQWNELGlCQUFpQlAsV0FBV1MsT0FBTztBQUVyRCwyQ0FBMkMsR0FDM0MsSUFBSUMsV0FBWTtJQUNkLElBQUk7UUFDRixvQ0FBb0M7UUFDcEMsSUFBSUMsUUFBUU4sY0FBY0EsV0FBV0osT0FBTyxJQUFJSSxXQUFXSixPQUFPLENBQUMsUUFBUVUsS0FBSztRQUVoRixJQUFJQSxPQUFPO1lBQ1QsT0FBT0E7UUFDVDtRQUVBLHFEQUFxRDtRQUNyRCxPQUFPSCxlQUFlQSxZQUFZSSxPQUFPLElBQUlKLFlBQVlJLE9BQU8sQ0FBQztJQUNuRSxFQUFFLE9BQU9DLEdBQUcsQ0FBQztBQUNmO0FBRUFQLE9BQU9ILE9BQU8sR0FBR08iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbm9kZVV0aWwuanM/OTU2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgIGlmICh0eXBlcykge1xuICAgICAgcmV0dXJuIHR5cGVzO1xuICAgIH1cblxuICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBub2RlVXRpbDtcbiJdLCJuYW1lcyI6WyJmcmVlR2xvYmFsIiwicmVxdWlyZSIsImZyZWVFeHBvcnRzIiwiZXhwb3J0cyIsIm5vZGVUeXBlIiwiZnJlZU1vZHVsZSIsIm1vZHVsZSIsIm1vZHVsZUV4cG9ydHMiLCJmcmVlUHJvY2VzcyIsInByb2Nlc3MiLCJub2RlVXRpbCIsInR5cGVzIiwiYmluZGluZyIsImUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_nodeUtil.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_objectToString.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_objectToString.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/** Used for built-in method references. */ \nvar objectProto = Object.prototype;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */ var nativeObjectToString = objectProto.toString;\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */ function objectToString(value) {\n    return nativeObjectToString.call(value);\n}\nmodule.exports = objectToString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX29iamVjdFRvU3RyaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFBLHlDQUF5QztBQUN6QyxJQUFJQSxjQUFjQyxPQUFPQyxTQUFTO0FBRWxDOzs7O0NBSUMsR0FDRCxJQUFJQyx1QkFBdUJILFlBQVlJLFFBQVE7QUFFL0M7Ozs7OztDQU1DLEdBQ0QsU0FBU0MsZUFBZUMsS0FBSztJQUMzQixPQUFPSCxxQkFBcUJJLElBQUksQ0FBQ0Q7QUFDbkM7QUFFQUUsT0FBT0MsT0FBTyxHQUFHSiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcz9kZmRkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG9iamVjdFRvU3RyaW5nO1xuIl0sIm5hbWVzIjpbIm9iamVjdFByb3RvIiwiT2JqZWN0IiwicHJvdG90eXBlIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJ0b1N0cmluZyIsIm9iamVjdFRvU3RyaW5nIiwidmFsdWUiLCJjYWxsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_objectToString.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_overArg.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_overArg.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */ \nfunction overArg(func, transform) {\n    return function(arg) {\n        return func(transform(arg));\n    };\n}\nmodule.exports = overArg;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX292ZXJBcmcuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Q0FPQztBQUNELFNBQVNBLFFBQVFDLElBQUksRUFBRUMsU0FBUztJQUM5QixPQUFPLFNBQVNDLEdBQUc7UUFDakIsT0FBT0YsS0FBS0MsVUFBVUM7SUFDeEI7QUFDRjtBQUVBQyxPQUFPQyxPQUFPLEdBQUdMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX292ZXJBcmcuanM/YjBjYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvdmVyQXJnO1xuIl0sIm5hbWVzIjpbIm92ZXJBcmciLCJmdW5jIiwidHJhbnNmb3JtIiwiYXJnIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_overArg.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_root.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/_root.js ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar freeGlobal = __webpack_require__(/*! ./_freeGlobal */ \"(app-pages-browser)/./node_modules/lodash/_freeGlobal.js\");\n/** Detect free variable `self`. */ var freeSelf = typeof self == \"object\" && self && self.Object === Object && self;\n/** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function(\"return this\")();\nmodule.exports = root;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3Jvb3QuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLGFBQWFDLG1CQUFPQSxDQUFDO0FBRXpCLGlDQUFpQyxHQUNqQyxJQUFJQyxXQUFXLE9BQU9DLFFBQVEsWUFBWUEsUUFBUUEsS0FBS0MsTUFBTSxLQUFLQSxVQUFVRDtBQUU1RSw4Q0FBOEMsR0FDOUMsSUFBSUUsT0FBT0wsY0FBY0UsWUFBWUksU0FBUztBQUU5Q0MsT0FBT0MsT0FBTyxHQUFHSCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19yb290LmpzP2VkYmYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSByb290O1xuIl0sIm5hbWVzIjpbImZyZWVHbG9iYWwiLCJyZXF1aXJlIiwiZnJlZVNlbGYiLCJzZWxmIiwiT2JqZWN0Iiwicm9vdCIsIkZ1bmN0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_root.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_setCacheAdd.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_setCacheAdd.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/** Used to stand-in for `undefined` hash values. */ \nvar HASH_UNDEFINED = \"__lodash_hash_undefined__\";\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */ function setCacheAdd(value) {\n    this.__data__.set(value, HASH_UNDEFINED);\n    return this;\n}\nmodule.exports = setCacheAdd;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldENhY2hlQWRkLmpzIiwibWFwcGluZ3MiOiJBQUFBLGtEQUFrRDtBQUNsRCxJQUFJQSxpQkFBaUI7QUFFckI7Ozs7Ozs7OztDQVNDLEdBQ0QsU0FBU0MsWUFBWUMsS0FBSztJQUN4QixJQUFJLENBQUNDLFFBQVEsQ0FBQ0MsR0FBRyxDQUFDRixPQUFPRjtJQUN6QixPQUFPLElBQUk7QUFDYjtBQUVBSyxPQUFPQyxPQUFPLEdBQUdMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldENhY2hlQWRkLmpzPzBkY2MiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGFkZFxuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAYWxpYXMgcHVzaFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0Q2FjaGVBZGQ7XG4iXSwibmFtZXMiOlsiSEFTSF9VTkRFRklORUQiLCJzZXRDYWNoZUFkZCIsInZhbHVlIiwiX19kYXRhX18iLCJzZXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_setCacheAdd.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_setCacheHas.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_setCacheHas.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */ \nfunction setCacheHas(value) {\n    return this.__data__.has(value);\n}\nmodule.exports = setCacheHas;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldENhY2hlSGFzLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztDQVFDO0FBQ0QsU0FBU0EsWUFBWUMsS0FBSztJQUN4QixPQUFPLElBQUksQ0FBQ0MsUUFBUSxDQUFDQyxHQUFHLENBQUNGO0FBQzNCO0FBRUFHLE9BQU9DLE9BQU8sR0FBR0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0Q2FjaGVIYXMuanM/MzFmNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlSGFzKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0Q2FjaGVIYXM7XG4iXSwibmFtZXMiOlsic2V0Q2FjaGVIYXMiLCJ2YWx1ZSIsIl9fZGF0YV9fIiwiaGFzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_setCacheHas.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_setToArray.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_setToArray.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */ \nfunction setToArray(set) {\n    var index = -1, result = Array(set.size);\n    set.forEach(function(value) {\n        result[++index] = value;\n    });\n    return result;\n}\nmodule.exports = setToArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldFRvQXJyYXkuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztDQU1DO0FBQ0QsU0FBU0EsV0FBV0MsR0FBRztJQUNyQixJQUFJQyxRQUFRLENBQUMsR0FDVEMsU0FBU0MsTUFBTUgsSUFBSUksSUFBSTtJQUUzQkosSUFBSUssT0FBTyxDQUFDLFNBQVNDLEtBQUs7UUFDeEJKLE1BQU0sQ0FBQyxFQUFFRCxNQUFNLEdBQUdLO0lBQ3BCO0lBQ0EsT0FBT0o7QUFDVDtBQUVBSyxPQUFPQyxPQUFPLEdBQUdUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldFRvQXJyYXkuanM/Y2Q0MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFRvQXJyYXk7XG4iXSwibmFtZXMiOlsic2V0VG9BcnJheSIsInNldCIsImluZGV4IiwicmVzdWx0IiwiQXJyYXkiLCJzaXplIiwiZm9yRWFjaCIsInZhbHVlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_setToArray.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_stackClear.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_stackClear.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar ListCache = __webpack_require__(/*! ./_ListCache */ \"(app-pages-browser)/./node_modules/lodash/_ListCache.js\");\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */ function stackClear() {\n    this.__data__ = new ListCache;\n    this.size = 0;\n}\nmodule.exports = stackClear;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrQ2xlYXIuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDO0FBRXhCOzs7Ozs7Q0FNQyxHQUNELFNBQVNDO0lBQ1AsSUFBSSxDQUFDQyxRQUFRLEdBQUcsSUFBSUg7SUFDcEIsSUFBSSxDQUFDSSxJQUFJLEdBQUc7QUFDZDtBQUVBQyxPQUFPQyxPQUFPLEdBQUdKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrQ2xlYXIuanM/ODc5NyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqL1xuZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tDbGVhcjtcbiJdLCJuYW1lcyI6WyJMaXN0Q2FjaGUiLCJyZXF1aXJlIiwic3RhY2tDbGVhciIsIl9fZGF0YV9fIiwic2l6ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_stackClear.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_stackDelete.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_stackDelete.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ \nfunction stackDelete(key) {\n    var data = this.__data__, result = data[\"delete\"](key);\n    this.size = data.size;\n    return result;\n}\nmodule.exports = stackDelete;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrRGVsZXRlLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztDQVFDO0FBQ0QsU0FBU0EsWUFBWUMsR0FBRztJQUN0QixJQUFJQyxPQUFPLElBQUksQ0FBQ0MsUUFBUSxFQUNwQkMsU0FBU0YsSUFBSSxDQUFDLFNBQVMsQ0FBQ0Q7SUFFNUIsSUFBSSxDQUFDSSxJQUFJLEdBQUdILEtBQUtHLElBQUk7SUFDckIsT0FBT0Q7QUFDVDtBQUVBRSxPQUFPQyxPQUFPLEdBQUdQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrRGVsZXRlLmpzP2RkYjIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrRGVsZXRlO1xuIl0sIm5hbWVzIjpbInN0YWNrRGVsZXRlIiwia2V5IiwiZGF0YSIsIl9fZGF0YV9fIiwicmVzdWx0Iiwic2l6ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_stackDelete.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_stackGet.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackGet.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ \nfunction stackGet(key) {\n    return this.__data__.get(key);\n}\nmodule.exports = stackGet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrR2V0LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztDQVFDO0FBQ0QsU0FBU0EsU0FBU0MsR0FBRztJQUNuQixPQUFPLElBQUksQ0FBQ0MsUUFBUSxDQUFDQyxHQUFHLENBQUNGO0FBQzNCO0FBRUFHLE9BQU9DLE9BQU8sR0FBR0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tHZXQuanM/NzkwMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tHZXQ7XG4iXSwibmFtZXMiOlsic3RhY2tHZXQiLCJrZXkiLCJfX2RhdGFfXyIsImdldCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_stackGet.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_stackHas.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackHas.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ \nfunction stackHas(key) {\n    return this.__data__.has(key);\n}\nmodule.exports = stackHas;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrSGFzLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztDQVFDO0FBQ0QsU0FBU0EsU0FBU0MsR0FBRztJQUNuQixPQUFPLElBQUksQ0FBQ0MsUUFBUSxDQUFDQyxHQUFHLENBQUNGO0FBQzNCO0FBRUFHLE9BQU9DLE9BQU8sR0FBR0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tIYXMuanM/MjY4OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrSGFzO1xuIl0sIm5hbWVzIjpbInN0YWNrSGFzIiwia2V5IiwiX19kYXRhX18iLCJoYXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_stackHas.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_stackSet.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackSet.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar ListCache = __webpack_require__(/*! ./_ListCache */ \"(app-pages-browser)/./node_modules/lodash/_ListCache.js\"), Map = __webpack_require__(/*! ./_Map */ \"(app-pages-browser)/./node_modules/lodash/_Map.js\"), MapCache = __webpack_require__(/*! ./_MapCache */ \"(app-pages-browser)/./node_modules/lodash/_MapCache.js\");\n/** Used as the size to enable large array optimizations. */ var LARGE_ARRAY_SIZE = 200;\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */ function stackSet(key, value) {\n    var data = this.__data__;\n    if (data instanceof ListCache) {\n        var pairs = data.__data__;\n        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {\n            pairs.push([\n                key,\n                value\n            ]);\n            this.size = ++data.size;\n            return this;\n        }\n        data = this.__data__ = new MapCache(pairs);\n    }\n    data.set(key, value);\n    this.size = data.size;\n    return this;\n}\nmodule.exports = stackSet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrU2V0LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxZQUFZQyxtQkFBT0EsQ0FBQyxnRkFDcEJDLE1BQU1ELG1CQUFPQSxDQUFDLG9FQUNkRSxXQUFXRixtQkFBT0EsQ0FBQztBQUV2QiwwREFBMEQsR0FDMUQsSUFBSUcsbUJBQW1CO0FBRXZCOzs7Ozs7Ozs7Q0FTQyxHQUNELFNBQVNDLFNBQVNDLEdBQUcsRUFBRUMsS0FBSztJQUMxQixJQUFJQyxPQUFPLElBQUksQ0FBQ0MsUUFBUTtJQUN4QixJQUFJRCxnQkFBZ0JSLFdBQVc7UUFDN0IsSUFBSVUsUUFBUUYsS0FBS0MsUUFBUTtRQUN6QixJQUFJLENBQUNQLE9BQVFRLE1BQU1DLE1BQU0sR0FBR1AsbUJBQW1CLEdBQUk7WUFDakRNLE1BQU1FLElBQUksQ0FBQztnQkFBQ047Z0JBQUtDO2FBQU07WUFDdkIsSUFBSSxDQUFDTSxJQUFJLEdBQUcsRUFBRUwsS0FBS0ssSUFBSTtZQUN2QixPQUFPLElBQUk7UUFDYjtRQUNBTCxPQUFPLElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUlOLFNBQVNPO0lBQ3RDO0lBQ0FGLEtBQUtNLEdBQUcsQ0FBQ1IsS0FBS0M7SUFDZCxJQUFJLENBQUNNLElBQUksR0FBR0wsS0FBS0ssSUFBSTtJQUNyQixPQUFPLElBQUk7QUFDYjtBQUVBRSxPQUFPQyxPQUFPLEdBQUdYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrU2V0LmpzPzRlNTciXSwic291cmNlc0NvbnRlbnQiOlsidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpLFxuICAgIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqXG4gKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gIH1cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tTZXQ7XG4iXSwibmFtZXMiOlsiTGlzdENhY2hlIiwicmVxdWlyZSIsIk1hcCIsIk1hcENhY2hlIiwiTEFSR0VfQVJSQVlfU0laRSIsInN0YWNrU2V0Iiwia2V5IiwidmFsdWUiLCJkYXRhIiwiX19kYXRhX18iLCJwYWlycyIsImxlbmd0aCIsInB1c2giLCJzaXplIiwic2V0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_stackSet.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_toSource.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_toSource.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/** Used for built-in method references. */ \nvar funcProto = Function.prototype;\n/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */ function toSource(func) {\n    if (func != null) {\n        try {\n            return funcToString.call(func);\n        } catch (e) {}\n        try {\n            return func + \"\";\n        } catch (e) {}\n    }\n    return \"\";\n}\nmodule.exports = toSource;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3RvU291cmNlLmpzIiwibWFwcGluZ3MiOiJBQUFBLHlDQUF5QztBQUN6QyxJQUFJQSxZQUFZQyxTQUFTQyxTQUFTO0FBRWxDLHdEQUF3RCxHQUN4RCxJQUFJQyxlQUFlSCxVQUFVSSxRQUFRO0FBRXJDOzs7Ozs7Q0FNQyxHQUNELFNBQVNDLFNBQVNDLElBQUk7SUFDcEIsSUFBSUEsUUFBUSxNQUFNO1FBQ2hCLElBQUk7WUFDRixPQUFPSCxhQUFhSSxJQUFJLENBQUNEO1FBQzNCLEVBQUUsT0FBT0UsR0FBRyxDQUFDO1FBQ2IsSUFBSTtZQUNGLE9BQVFGLE9BQU87UUFDakIsRUFBRSxPQUFPRSxHQUFHLENBQUM7SUFDZjtJQUNBLE9BQU87QUFDVDtBQUVBQyxPQUFPQyxPQUFPLEdBQUdMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3RvU291cmNlLmpzP2FiYmYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvU291cmNlO1xuIl0sIm5hbWVzIjpbImZ1bmNQcm90byIsIkZ1bmN0aW9uIiwicHJvdG90eXBlIiwiZnVuY1RvU3RyaW5nIiwidG9TdHJpbmciLCJ0b1NvdXJjZSIsImZ1bmMiLCJjYWxsIiwiZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_toSource.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/eq.js":
/*!***********************************!*\
  !*** ./node_modules/lodash/eq.js ***!
  \***********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */ \nfunction eq(value, other) {\n    return value === other || value !== value && other !== other;\n}\nmodule.exports = eq;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZXEuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0ErQkM7QUFDRCxTQUFTQSxHQUFHQyxLQUFLLEVBQUVDLEtBQUs7SUFDdEIsT0FBT0QsVUFBVUMsU0FBVUQsVUFBVUEsU0FBU0MsVUFBVUE7QUFDMUQ7QUFFQUMsT0FBT0MsT0FBTyxHQUFHSiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2VxLmpzPzgyZDkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBQZXJmb3JtcyBhXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoJ2EnLCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoTmFOLCBOYU4pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXE7XG4iXSwibmFtZXMiOlsiZXEiLCJ2YWx1ZSIsIm90aGVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/eq.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/isArguments.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/isArguments.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar baseIsArguments = __webpack_require__(/*! ./_baseIsArguments */ \"(app-pages-browser)/./node_modules/lodash/_baseIsArguments.js\"), isObjectLike = __webpack_require__(/*! ./isObjectLike */ \"(app-pages-browser)/./node_modules/lodash/isObjectLike.js\");\n/** Used for built-in method references. */ var objectProto = Object.prototype;\n/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n/** Built-in value references. */ var propertyIsEnumerable = objectProto.propertyIsEnumerable;\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */ var isArguments = baseIsArguments(function() {\n    return arguments;\n}()) ? baseIsArguments : function(value) {\n    return isObjectLike(value) && hasOwnProperty.call(value, \"callee\") && !propertyIsEnumerable.call(value, \"callee\");\n};\nmodule.exports = isArguments;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcmd1bWVudHMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLGtCQUFrQkMsbUJBQU9BLENBQUMsNEZBQzFCQyxlQUFlRCxtQkFBT0EsQ0FBQztBQUUzQix5Q0FBeUMsR0FDekMsSUFBSUUsY0FBY0MsT0FBT0MsU0FBUztBQUVsQyw4Q0FBOEMsR0FDOUMsSUFBSUMsaUJBQWlCSCxZQUFZRyxjQUFjO0FBRS9DLCtCQUErQixHQUMvQixJQUFJQyx1QkFBdUJKLFlBQVlJLG9CQUFvQjtBQUUzRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FpQkMsR0FDRCxJQUFJQyxjQUFjUixnQkFBZ0I7SUFBYSxPQUFPUztBQUFXLE9BQU9ULGtCQUFrQixTQUFTVSxLQUFLO0lBQ3RHLE9BQU9SLGFBQWFRLFVBQVVKLGVBQWVLLElBQUksQ0FBQ0QsT0FBTyxhQUN2RCxDQUFDSCxxQkFBcUJJLElBQUksQ0FBQ0QsT0FBTztBQUN0QztBQUVBRSxPQUFPQyxPQUFPLEdBQUdMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcmd1bWVudHMuanM/YmMxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYmFzZUlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9fYmFzZUlzQXJndW1lbnRzJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcmd1bWVudHM7XG4iXSwibmFtZXMiOlsiYmFzZUlzQXJndW1lbnRzIiwicmVxdWlyZSIsImlzT2JqZWN0TGlrZSIsIm9iamVjdFByb3RvIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImlzQXJndW1lbnRzIiwiYXJndW1lbnRzIiwidmFsdWUiLCJjYWxsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/isArguments.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/isArray.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/isArray.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */ \nvar isArray = Array.isArray;\nmodule.exports = isArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXNCQztBQUNELElBQUlBLFVBQVVDLE1BQU1ELE9BQU87QUFFM0JFLE9BQU9DLE9BQU8sR0FBR0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5LmpzPzc2MzciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheTtcbiJdLCJuYW1lcyI6WyJpc0FycmF5IiwiQXJyYXkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/isArray.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/isArrayLike.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/isArrayLike.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar isFunction = __webpack_require__(/*! ./isFunction */ \"(app-pages-browser)/./node_modules/lodash/isFunction.js\"), isLength = __webpack_require__(/*! ./isLength */ \"(app-pages-browser)/./node_modules/lodash/isLength.js\");\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */ function isArrayLike(value) {\n    return value != null && isLength(value.length) && !isFunction(value);\n}\nmodule.exports = isArrayLike;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheUxpa2UuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLGFBQWFDLG1CQUFPQSxDQUFDLGdGQUNyQkMsV0FBV0QsbUJBQU9BLENBQUM7QUFFdkI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXdCQyxHQUNELFNBQVNFLFlBQVlDLEtBQUs7SUFDeEIsT0FBT0EsU0FBUyxRQUFRRixTQUFTRSxNQUFNQyxNQUFNLEtBQUssQ0FBQ0wsV0FBV0k7QUFDaEU7QUFFQUUsT0FBT0MsT0FBTyxHQUFHSiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXlMaWtlLmpzPzAwNGEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheUxpa2U7XG4iXSwibmFtZXMiOlsiaXNGdW5jdGlvbiIsInJlcXVpcmUiLCJpc0xlbmd0aCIsImlzQXJyYXlMaWtlIiwidmFsdWUiLCJsZW5ndGgiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/isArrayLike.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/isBuffer.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isBuffer.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/* module decorator */ module = __webpack_require__.nmd(module);\n\nvar root = __webpack_require__(/*! ./_root */ \"(app-pages-browser)/./node_modules/lodash/_root.js\"), stubFalse = __webpack_require__(/*! ./stubFalse */ \"(app-pages-browser)/./node_modules/lodash/stubFalse.js\");\n/** Detect free variable `exports`. */ var freeExports =  true && exports && !exports.nodeType && exports;\n/** Detect free variable `module`. */ var freeModule = freeExports && \"object\" == \"object\" && module && !module.nodeType && module;\n/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;\n/** Built-in value references. */ var Buffer = moduleExports ? root.Buffer : undefined;\n/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */ var isBuffer = nativeIsBuffer || stubFalse;\nmodule.exports = isBuffer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNCdWZmZXIuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxPQUFPQyxtQkFBT0EsQ0FBQyxzRUFDZkMsWUFBWUQsbUJBQU9BLENBQUM7QUFFeEIsb0NBQW9DLEdBQ3BDLElBQUlFLGNBQWMsS0FBa0IsSUFBWUMsV0FBVyxDQUFDQSxRQUFRQyxRQUFRLElBQUlEO0FBRWhGLG1DQUFtQyxHQUNuQyxJQUFJRSxhQUFhSCxlQUFlLFFBQWFJLElBQUksWUFBWUEsVUFBVSxDQUFDQSxPQUFPRixRQUFRLElBQUlFO0FBRTNGLDREQUE0RCxHQUM1RCxJQUFJQyxnQkFBZ0JGLGNBQWNBLFdBQVdGLE9BQU8sS0FBS0Q7QUFFekQsK0JBQStCLEdBQy9CLElBQUlNLFNBQVNELGdCQUFnQlIsS0FBS1MsTUFBTSxHQUFHQztBQUUzQyxzRkFBc0YsR0FDdEYsSUFBSUMsaUJBQWlCRixTQUFTQSxPQUFPRyxRQUFRLEdBQUdGO0FBRWhEOzs7Ozs7Ozs7Ozs7Ozs7O0NBZ0JDLEdBQ0QsSUFBSUUsV0FBV0Qsa0JBQWtCVDtBQUVqQ0ssT0FBT0gsT0FBTyxHQUFHUSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQnVmZmVyLmpzPzUxNWYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290JyksXG4gICAgc3R1YkZhbHNlID0gcmVxdWlyZSgnLi9zdHViRmFsc2UnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmZmVyO1xuIl0sIm5hbWVzIjpbInJvb3QiLCJyZXF1aXJlIiwic3R1YkZhbHNlIiwiZnJlZUV4cG9ydHMiLCJleHBvcnRzIiwibm9kZVR5cGUiLCJmcmVlTW9kdWxlIiwibW9kdWxlIiwibW9kdWxlRXhwb3J0cyIsIkJ1ZmZlciIsInVuZGVmaW5lZCIsIm5hdGl2ZUlzQnVmZmVyIiwiaXNCdWZmZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/isBuffer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/isEqual.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/isEqual.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar baseIsEqual = __webpack_require__(/*! ./_baseIsEqual */ \"(app-pages-browser)/./node_modules/lodash/_baseIsEqual.js\");\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */ function isEqual(value, other) {\n    return baseIsEqual(value, other);\n}\nmodule.exports = isEqual;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNFcXVhbC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsY0FBY0MsbUJBQU9BLENBQUM7QUFFMUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQTJCQyxHQUNELFNBQVNDLFFBQVFDLEtBQUssRUFBRUMsS0FBSztJQUMzQixPQUFPSixZQUFZRyxPQUFPQztBQUM1QjtBQUVBQyxPQUFPQyxPQUFPLEdBQUdKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNFcXVhbC5qcz82MzA3Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlSXNFcXVhbCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsJyk7XG5cbi8qKlxuICogUGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZVxuICogZXF1aXZhbGVudC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsXG4gKiBkYXRlIG9iamVjdHMsIGVycm9yIG9iamVjdHMsIG1hcHMsIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsXG4gKiBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWQgYXJyYXlzLiBgT2JqZWN0YCBvYmplY3RzIGFyZSBjb21wYXJlZFxuICogYnkgdGhlaXIgb3duLCBub3QgaW5oZXJpdGVkLCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuIEZ1bmN0aW9ucyBhbmQgRE9NXG4gKiBub2RlcyBhcmUgY29tcGFyZWQgYnkgc3RyaWN0IGVxdWFsaXR5LCBpLmUuIGA9PT1gLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmlzRXF1YWwob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogb2JqZWN0ID09PSBvdGhlcjtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRXF1YWwodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRXF1YWw7XG4iXSwibmFtZXMiOlsiYmFzZUlzRXF1YWwiLCJyZXF1aXJlIiwiaXNFcXVhbCIsInZhbHVlIiwib3RoZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/isEqual.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/isFunction.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/isFunction.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar baseGetTag = __webpack_require__(/*! ./_baseGetTag */ \"(app-pages-browser)/./node_modules/lodash/_baseGetTag.js\"), isObject = __webpack_require__(/*! ./isObject */ \"(app-pages-browser)/./node_modules/lodash/isObject.js\");\n/** `Object#toString` result references. */ var asyncTag = \"[object AsyncFunction]\", funcTag = \"[object Function]\", genTag = \"[object GeneratorFunction]\", proxyTag = \"[object Proxy]\";\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */ function isFunction(value) {\n    if (!isObject(value)) {\n        return false;\n    }\n    // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 9 which returns 'object' for typed arrays and other constructors.\n    var tag = baseGetTag(value);\n    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\nmodule.exports = isFunction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNGdW5jdGlvbi5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsYUFBYUMsbUJBQU9BLENBQUMsa0ZBQ3JCQyxXQUFXRCxtQkFBT0EsQ0FBQztBQUV2Qix5Q0FBeUMsR0FDekMsSUFBSUUsV0FBVywwQkFDWEMsVUFBVSxxQkFDVkMsU0FBUyw4QkFDVEMsV0FBVztBQUVmOzs7Ozs7Ozs7Ozs7Ozs7O0NBZ0JDLEdBQ0QsU0FBU0MsV0FBV0MsS0FBSztJQUN2QixJQUFJLENBQUNOLFNBQVNNLFFBQVE7UUFDcEIsT0FBTztJQUNUO0lBQ0Esd0VBQXdFO0lBQ3hFLDhFQUE4RTtJQUM5RSxJQUFJQyxNQUFNVCxXQUFXUTtJQUNyQixPQUFPQyxPQUFPTCxXQUFXSyxPQUFPSixVQUFVSSxPQUFPTixZQUFZTSxPQUFPSDtBQUN0RTtBQUVBSSxPQUFPQyxPQUFPLEdBQUdKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNGdW5jdGlvbi5qcz82ZTQ3Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRnVuY3Rpb247XG4iXSwibmFtZXMiOlsiYmFzZUdldFRhZyIsInJlcXVpcmUiLCJpc09iamVjdCIsImFzeW5jVGFnIiwiZnVuY1RhZyIsImdlblRhZyIsInByb3h5VGFnIiwiaXNGdW5jdGlvbiIsInZhbHVlIiwidGFnIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/isFunction.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/isLength.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isLength.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/** Used as references for various `Number` constants. */ \nvar MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */ function isLength(value) {\n    return typeof value == \"number\" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\nmodule.exports = isLength;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNMZW5ndGguanMiLCJtYXBwaW5ncyI6IkFBQUEsdURBQXVEO0FBQ3ZELElBQUlBLG1CQUFtQjtBQUV2Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXlCQyxHQUNELFNBQVNDLFNBQVNDLEtBQUs7SUFDckIsT0FBTyxPQUFPQSxTQUFTLFlBQ3JCQSxRQUFRLENBQUMsS0FBS0EsUUFBUSxLQUFLLEtBQUtBLFNBQVNGO0FBQzdDO0FBRUFHLE9BQU9DLE9BQU8sR0FBR0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0xlbmd0aC5qcz8yYmVmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0xlbmd0aDtcbiJdLCJuYW1lcyI6WyJNQVhfU0FGRV9JTlRFR0VSIiwiaXNMZW5ndGgiLCJ2YWx1ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/isLength.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/isObject.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isObject.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */ \nfunction isObject(value) {\n    var type = typeof value;\n    return value != null && (type == \"object\" || type == \"function\");\n}\nmodule.exports = isObject;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3QuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXdCQztBQUNELFNBQVNBLFNBQVNDLEtBQUs7SUFDckIsSUFBSUMsT0FBTyxPQUFPRDtJQUNsQixPQUFPQSxTQUFTLFFBQVNDLENBQUFBLFFBQVEsWUFBWUEsUUFBUSxVQUFTO0FBQ2hFO0FBRUFDLE9BQU9DLE9BQU8sR0FBR0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdC5qcz8xNjQzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuIl0sIm5hbWVzIjpbImlzT2JqZWN0IiwidmFsdWUiLCJ0eXBlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/isObject.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/isObjectLike.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/isObjectLike.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */ \nfunction isObjectLike(value) {\n    return value != null && typeof value == \"object\";\n}\nmodule.exports = isObjectLike;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3RMaWtlLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXVCQztBQUNELFNBQVNBLGFBQWFDLEtBQUs7SUFDekIsT0FBT0EsU0FBUyxRQUFRLE9BQU9BLFNBQVM7QUFDMUM7QUFFQUMsT0FBT0MsT0FBTyxHQUFHSCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcz9jYmVjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcbiJdLCJuYW1lcyI6WyJpc09iamVjdExpa2UiLCJ2YWx1ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/isObjectLike.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/isTypedArray.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/isTypedArray.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar baseIsTypedArray = __webpack_require__(/*! ./_baseIsTypedArray */ \"(app-pages-browser)/./node_modules/lodash/_baseIsTypedArray.js\"), baseUnary = __webpack_require__(/*! ./_baseUnary */ \"(app-pages-browser)/./node_modules/lodash/_baseUnary.js\"), nodeUtil = __webpack_require__(/*! ./_nodeUtil */ \"(app-pages-browser)/./node_modules/lodash/_nodeUtil.js\");\n/* Node.js helper references. */ var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */ var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\nmodule.exports = isTypedArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNUeXBlZEFycmF5LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxtQkFBbUJDLG1CQUFPQSxDQUFDLDhGQUMzQkMsWUFBWUQsbUJBQU9BLENBQUMsZ0ZBQ3BCRSxXQUFXRixtQkFBT0EsQ0FBQztBQUV2Qiw4QkFBOEIsR0FDOUIsSUFBSUcsbUJBQW1CRCxZQUFZQSxTQUFTRSxZQUFZO0FBRXhEOzs7Ozs7Ozs7Ozs7Ozs7O0NBZ0JDLEdBQ0QsSUFBSUEsZUFBZUQsbUJBQW1CRixVQUFVRSxvQkFBb0JKO0FBRXBFTSxPQUFPQyxPQUFPLEdBQUdGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNUeXBlZEFycmF5LmpzPzQ3NjQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VJc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL19iYXNlSXNUeXBlZEFycmF5JyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgbm9kZVV0aWwgPSByZXF1aXJlKCcuL19ub2RlVXRpbCcpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc1R5cGVkQXJyYXk7XG4iXSwibmFtZXMiOlsiYmFzZUlzVHlwZWRBcnJheSIsInJlcXVpcmUiLCJiYXNlVW5hcnkiLCJub2RlVXRpbCIsIm5vZGVJc1R5cGVkQXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/isTypedArray.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/keys.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/keys.js ***!
  \*************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar arrayLikeKeys = __webpack_require__(/*! ./_arrayLikeKeys */ \"(app-pages-browser)/./node_modules/lodash/_arrayLikeKeys.js\"), baseKeys = __webpack_require__(/*! ./_baseKeys */ \"(app-pages-browser)/./node_modules/lodash/_baseKeys.js\"), isArrayLike = __webpack_require__(/*! ./isArrayLike */ \"(app-pages-browser)/./node_modules/lodash/isArrayLike.js\");\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */ function keys(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\nmodule.exports = keys;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gva2V5cy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsZ0JBQWdCQyxtQkFBT0EsQ0FBQyx3RkFDeEJDLFdBQVdELG1CQUFPQSxDQUFDLDhFQUNuQkUsY0FBY0YsbUJBQU9BLENBQUM7QUFFMUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQTJCQyxHQUNELFNBQVNHLEtBQUtDLE1BQU07SUFDbEIsT0FBT0YsWUFBWUUsVUFBVUwsY0FBY0ssVUFBVUgsU0FBU0c7QUFDaEU7QUFFQUMsT0FBT0MsT0FBTyxHQUFHSCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2tleXMuanM/YTZlZiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXJyYXlMaWtlS2V5cyA9IHJlcXVpcmUoJy4vX2FycmF5TGlrZUtleXMnKSxcbiAgICBiYXNlS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VLZXlzJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8ua2V5cygnaGknKTtcbiAqIC8vID0+IFsnMCcsICcxJ11cbiAqL1xuZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXM7XG4iXSwibmFtZXMiOlsiYXJyYXlMaWtlS2V5cyIsInJlcXVpcmUiLCJiYXNlS2V5cyIsImlzQXJyYXlMaWtlIiwia2V5cyIsIm9iamVjdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/keys.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/stubArray.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/stubArray.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */ \nfunction stubArray() {\n    return [];\n}\nmodule.exports = stubArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvc3R1YkFycmF5LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztDQWlCQztBQUNELFNBQVNBO0lBQ1AsT0FBTyxFQUFFO0FBQ1g7QUFFQUMsT0FBT0MsT0FBTyxHQUFHRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL3N0dWJBcnJheS5qcz81Mzg2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAqIC8vID0+IFtbXSwgW11dXG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICByZXR1cm4gW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkFycmF5O1xuIl0sIm5hbWVzIjpbInN0dWJBcnJheSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/stubArray.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/stubFalse.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/stubFalse.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */ \nfunction stubFalse() {\n    return false;\n}\nmodule.exports = stubFalse;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvc3R1YkZhbHNlLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Q0FZQztBQUNELFNBQVNBO0lBQ1AsT0FBTztBQUNUO0FBRUFDLE9BQU9DLE9BQU8sR0FBR0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViRmFsc2UuanM/ZTQ0MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkZhbHNlO1xuIl0sIm5hbWVzIjpbInN0dWJGYWxzZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/stubFalse.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quill/dist/quill.js":
/*!******************************************!*\
  !*** ./node_modules/quill/dist/quill.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\n\n/*!\n * Quill Editor v1.3.7\n * https://quilljs.com/\n * Copyright (c) 2014, Jason Chen\n * Copyright (c) 2013, salesforce.com\n */ (function webpackUniversalModuleDefinition(root, factory) {\n    if (true) module.exports = factory();\n    else {}\n})(typeof self !== \"undefined\" ? self : void 0, function() {\n    return /******/ function(modules) {\n        /******/ // The module cache\n        /******/ var installedModules = {};\n        /******/ /******/ // The require function\n        /******/ function __nested_webpack_require_731__(moduleId) {\n            /******/ /******/ // Check if module is in cache\n            /******/ if (installedModules[moduleId]) {\n                /******/ return installedModules[moduleId].exports;\n            /******/ }\n            /******/ // Create a new module (and put it into the cache)\n            /******/ var module1 = installedModules[moduleId] = {\n                /******/ i: moduleId,\n                /******/ l: false,\n                /******/ exports: {}\n            };\n            /******/ /******/ // Execute the module function\n            /******/ modules[moduleId].call(module1.exports, module1, module1.exports, __nested_webpack_require_731__);\n            /******/ /******/ // Flag the module as loaded\n            /******/ module1.l = true;\n            /******/ /******/ // Return the exports of the module\n            /******/ return module1.exports;\n        /******/ }\n        /******/ /******/ /******/ // expose the modules object (__webpack_modules__)\n        /******/ __nested_webpack_require_731__.m = modules;\n        /******/ /******/ // expose the module cache\n        /******/ __nested_webpack_require_731__.c = installedModules;\n        /******/ /******/ // define getter function for harmony exports\n        /******/ __nested_webpack_require_731__.d = function(exports1, name, getter) {\n            /******/ if (!__nested_webpack_require_731__.o(exports1, name)) {\n                /******/ Object.defineProperty(exports1, name, {\n                    /******/ configurable: false,\n                    /******/ enumerable: true,\n                    /******/ get: getter\n                });\n            /******/ }\n        /******/ };\n        /******/ /******/ // getDefaultExport function for compatibility with non-harmony modules\n        /******/ __nested_webpack_require_731__.n = function(module1) {\n            /******/ var getter = module1 && module1.__esModule ? /******/ function getDefault() {\n                return module1[\"default\"];\n            } : /******/ function getModuleExports() {\n                return module1;\n            };\n            /******/ __nested_webpack_require_731__.d(getter, \"a\", getter);\n            /******/ return getter;\n        /******/ };\n        /******/ /******/ // Object.prototype.hasOwnProperty.call\n        /******/ __nested_webpack_require_731__.o = function(object, property) {\n            return Object.prototype.hasOwnProperty.call(object, property);\n        };\n        /******/ /******/ // __webpack_public_path__\n        /******/ __nested_webpack_require_731__.p = \"\";\n        /******/ /******/ // Load entry module and return exports\n        /******/ return __nested_webpack_require_731__(__nested_webpack_require_731__.s = 109);\n    /******/ }([\n        /* 0 */ /***/ function(module1, exports1, __nested_webpack_require_3420__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var container_1 = __nested_webpack_require_3420__(17);\n            var format_1 = __nested_webpack_require_3420__(18);\n            var leaf_1 = __nested_webpack_require_3420__(19);\n            var scroll_1 = __nested_webpack_require_3420__(45);\n            var inline_1 = __nested_webpack_require_3420__(46);\n            var block_1 = __nested_webpack_require_3420__(47);\n            var embed_1 = __nested_webpack_require_3420__(48);\n            var text_1 = __nested_webpack_require_3420__(49);\n            var attributor_1 = __nested_webpack_require_3420__(12);\n            var class_1 = __nested_webpack_require_3420__(32);\n            var style_1 = __nested_webpack_require_3420__(33);\n            var store_1 = __nested_webpack_require_3420__(31);\n            var Registry = __nested_webpack_require_3420__(1);\n            var Parchment = {\n                Scope: Registry.Scope,\n                create: Registry.create,\n                find: Registry.find,\n                query: Registry.query,\n                register: Registry.register,\n                Container: container_1.default,\n                Format: format_1.default,\n                Leaf: leaf_1.default,\n                Embed: embed_1.default,\n                Scroll: scroll_1.default,\n                Block: block_1.default,\n                Inline: inline_1.default,\n                Text: text_1.default,\n                Attributor: {\n                    Attribute: attributor_1.default,\n                    Class: class_1.default,\n                    Style: style_1.default,\n                    Store: store_1.default\n                }\n            };\n            exports1.default = Parchment;\n        /***/ },\n        /* 1 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            var __extends = this && this.__extends || function() {\n                var extendStatics = Object.setPrototypeOf || ({\n                    __proto__: []\n                }) instanceof Array && function(d, b) {\n                    d.__proto__ = b;\n                } || function(d, b) {\n                    for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n                };\n                return function(d, b) {\n                    extendStatics(d, b);\n                    function __() {\n                        this.constructor = d;\n                    }\n                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n                };\n            }();\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var ParchmentError = /** @class */ function(_super) {\n                __extends(ParchmentError, _super);\n                function ParchmentError(message) {\n                    var _this = this;\n                    message = \"[Parchment] \" + message;\n                    _this = _super.call(this, message) || this;\n                    _this.message = message;\n                    _this.name = _this.constructor.name;\n                    return _this;\n                }\n                return ParchmentError;\n            }(Error);\n            exports1.ParchmentError = ParchmentError;\n            var attributes = {};\n            var classes = {};\n            var tags = {};\n            var types = {};\n            exports1.DATA_KEY = \"__blot\";\n            var Scope;\n            (function(Scope) {\n                Scope[Scope[\"TYPE\"] = 3] = \"TYPE\";\n                Scope[Scope[\"LEVEL\"] = 12] = \"LEVEL\";\n                Scope[Scope[\"ATTRIBUTE\"] = 13] = \"ATTRIBUTE\";\n                Scope[Scope[\"BLOT\"] = 14] = \"BLOT\";\n                Scope[Scope[\"INLINE\"] = 7] = \"INLINE\";\n                Scope[Scope[\"BLOCK\"] = 11] = \"BLOCK\";\n                Scope[Scope[\"BLOCK_BLOT\"] = 10] = \"BLOCK_BLOT\";\n                Scope[Scope[\"INLINE_BLOT\"] = 6] = \"INLINE_BLOT\";\n                Scope[Scope[\"BLOCK_ATTRIBUTE\"] = 9] = \"BLOCK_ATTRIBUTE\";\n                Scope[Scope[\"INLINE_ATTRIBUTE\"] = 5] = \"INLINE_ATTRIBUTE\";\n                Scope[Scope[\"ANY\"] = 15] = \"ANY\";\n            })(Scope = exports1.Scope || (exports1.Scope = {}));\n            function create(input, value) {\n                var match = query(input);\n                if (match == null) {\n                    throw new ParchmentError(\"Unable to create \" + input + \" blot\");\n                }\n                var BlotClass = match;\n                var node = // @ts-ignore\n                input instanceof Node || input[\"nodeType\"] === Node.TEXT_NODE ? input : BlotClass.create(value);\n                return new BlotClass(node, value);\n            }\n            exports1.create = create;\n            function find(node, bubble) {\n                if (bubble === void 0) {\n                    bubble = false;\n                }\n                if (node == null) return null;\n                // @ts-ignore\n                if (node[exports1.DATA_KEY] != null) return node[exports1.DATA_KEY].blot;\n                if (bubble) return find(node.parentNode, bubble);\n                return null;\n            }\n            exports1.find = find;\n            function query(query, scope) {\n                if (scope === void 0) {\n                    scope = Scope.ANY;\n                }\n                var match;\n                if (typeof query === \"string\") {\n                    match = types[query] || attributes[query];\n                // @ts-ignore\n                } else if (query instanceof Text || query[\"nodeType\"] === Node.TEXT_NODE) {\n                    match = types[\"text\"];\n                } else if (typeof query === \"number\") {\n                    if (query & Scope.LEVEL & Scope.BLOCK) {\n                        match = types[\"block\"];\n                    } else if (query & Scope.LEVEL & Scope.INLINE) {\n                        match = types[\"inline\"];\n                    }\n                } else if (query instanceof HTMLElement) {\n                    var names = (query.getAttribute(\"class\") || \"\").split(/\\s+/);\n                    for(var i in names){\n                        match = classes[names[i]];\n                        if (match) break;\n                    }\n                    match = match || tags[query.tagName];\n                }\n                if (match == null) return null;\n                // @ts-ignore\n                if (scope & Scope.LEVEL & match.scope && scope & Scope.TYPE & match.scope) return match;\n                return null;\n            }\n            exports1.query = query;\n            function register() {\n                var Definitions = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    Definitions[_i] = arguments[_i];\n                }\n                if (Definitions.length > 1) {\n                    return Definitions.map(function(d) {\n                        return register(d);\n                    });\n                }\n                var Definition = Definitions[0];\n                if (typeof Definition.blotName !== \"string\" && typeof Definition.attrName !== \"string\") {\n                    throw new ParchmentError(\"Invalid definition\");\n                } else if (Definition.blotName === \"abstract\") {\n                    throw new ParchmentError(\"Cannot register abstract class\");\n                }\n                types[Definition.blotName || Definition.attrName] = Definition;\n                if (typeof Definition.keyName === \"string\") {\n                    attributes[Definition.keyName] = Definition;\n                } else {\n                    if (Definition.className != null) {\n                        classes[Definition.className] = Definition;\n                    }\n                    if (Definition.tagName != null) {\n                        if (Array.isArray(Definition.tagName)) {\n                            Definition.tagName = Definition.tagName.map(function(tagName) {\n                                return tagName.toUpperCase();\n                            });\n                        } else {\n                            Definition.tagName = Definition.tagName.toUpperCase();\n                        }\n                        var tagNames = Array.isArray(Definition.tagName) ? Definition.tagName : [\n                            Definition.tagName\n                        ];\n                        tagNames.forEach(function(tag) {\n                            if (tags[tag] == null || Definition.className == null) {\n                                tags[tag] = Definition;\n                            }\n                        });\n                    }\n                }\n                return Definition;\n            }\n            exports1.register = register;\n        /***/ },\n        /* 2 */ /***/ function(module1, exports1, __nested_webpack_require_12144__) {\n            var diff = __nested_webpack_require_12144__(51);\n            var equal = __nested_webpack_require_12144__(11);\n            var extend = __nested_webpack_require_12144__(3);\n            var op = __nested_webpack_require_12144__(20);\n            var NULL_CHARACTER = String.fromCharCode(0); // Placeholder char for embed in diff()\n            var Delta = function(ops) {\n                // Assume we are given a well formed ops\n                if (Array.isArray(ops)) {\n                    this.ops = ops;\n                } else if (ops != null && Array.isArray(ops.ops)) {\n                    this.ops = ops.ops;\n                } else {\n                    this.ops = [];\n                }\n            };\n            Delta.prototype.insert = function(text, attributes) {\n                var newOp = {};\n                if (text.length === 0) return this;\n                newOp.insert = text;\n                if (attributes != null && typeof attributes === \"object\" && Object.keys(attributes).length > 0) {\n                    newOp.attributes = attributes;\n                }\n                return this.push(newOp);\n            };\n            Delta.prototype[\"delete\"] = function(length) {\n                if (length <= 0) return this;\n                return this.push({\n                    \"delete\": length\n                });\n            };\n            Delta.prototype.retain = function(length, attributes) {\n                if (length <= 0) return this;\n                var newOp = {\n                    retain: length\n                };\n                if (attributes != null && typeof attributes === \"object\" && Object.keys(attributes).length > 0) {\n                    newOp.attributes = attributes;\n                }\n                return this.push(newOp);\n            };\n            Delta.prototype.push = function(newOp) {\n                var index = this.ops.length;\n                var lastOp = this.ops[index - 1];\n                newOp = extend(true, {}, newOp);\n                if (typeof lastOp === \"object\") {\n                    if (typeof newOp[\"delete\"] === \"number\" && typeof lastOp[\"delete\"] === \"number\") {\n                        this.ops[index - 1] = {\n                            \"delete\": lastOp[\"delete\"] + newOp[\"delete\"]\n                        };\n                        return this;\n                    }\n                    // Since it does not matter if we insert before or after deleting at the same index,\n                    // always prefer to insert first\n                    if (typeof lastOp[\"delete\"] === \"number\" && newOp.insert != null) {\n                        index -= 1;\n                        lastOp = this.ops[index - 1];\n                        if (typeof lastOp !== \"object\") {\n                            this.ops.unshift(newOp);\n                            return this;\n                        }\n                    }\n                    if (equal(newOp.attributes, lastOp.attributes)) {\n                        if (typeof newOp.insert === \"string\" && typeof lastOp.insert === \"string\") {\n                            this.ops[index - 1] = {\n                                insert: lastOp.insert + newOp.insert\n                            };\n                            if (typeof newOp.attributes === \"object\") this.ops[index - 1].attributes = newOp.attributes;\n                            return this;\n                        } else if (typeof newOp.retain === \"number\" && typeof lastOp.retain === \"number\") {\n                            this.ops[index - 1] = {\n                                retain: lastOp.retain + newOp.retain\n                            };\n                            if (typeof newOp.attributes === \"object\") this.ops[index - 1].attributes = newOp.attributes;\n                            return this;\n                        }\n                    }\n                }\n                if (index === this.ops.length) {\n                    this.ops.push(newOp);\n                } else {\n                    this.ops.splice(index, 0, newOp);\n                }\n                return this;\n            };\n            Delta.prototype.chop = function() {\n                var lastOp = this.ops[this.ops.length - 1];\n                if (lastOp && lastOp.retain && !lastOp.attributes) {\n                    this.ops.pop();\n                }\n                return this;\n            };\n            Delta.prototype.filter = function(predicate) {\n                return this.ops.filter(predicate);\n            };\n            Delta.prototype.forEach = function(predicate) {\n                this.ops.forEach(predicate);\n            };\n            Delta.prototype.map = function(predicate) {\n                return this.ops.map(predicate);\n            };\n            Delta.prototype.partition = function(predicate) {\n                var passed = [], failed = [];\n                this.forEach(function(op) {\n                    var target = predicate(op) ? passed : failed;\n                    target.push(op);\n                });\n                return [\n                    passed,\n                    failed\n                ];\n            };\n            Delta.prototype.reduce = function(predicate, initial) {\n                return this.ops.reduce(predicate, initial);\n            };\n            Delta.prototype.changeLength = function() {\n                return this.reduce(function(length, elem) {\n                    if (elem.insert) {\n                        return length + op.length(elem);\n                    } else if (elem.delete) {\n                        return length - elem.delete;\n                    }\n                    return length;\n                }, 0);\n            };\n            Delta.prototype.length = function() {\n                return this.reduce(function(length, elem) {\n                    return length + op.length(elem);\n                }, 0);\n            };\n            Delta.prototype.slice = function(start, end) {\n                start = start || 0;\n                if (typeof end !== \"number\") end = Infinity;\n                var ops = [];\n                var iter = op.iterator(this.ops);\n                var index = 0;\n                while(index < end && iter.hasNext()){\n                    var nextOp;\n                    if (index < start) {\n                        nextOp = iter.next(start - index);\n                    } else {\n                        nextOp = iter.next(end - index);\n                        ops.push(nextOp);\n                    }\n                    index += op.length(nextOp);\n                }\n                return new Delta(ops);\n            };\n            Delta.prototype.compose = function(other) {\n                var thisIter = op.iterator(this.ops);\n                var otherIter = op.iterator(other.ops);\n                var ops = [];\n                var firstOther = otherIter.peek();\n                if (firstOther != null && typeof firstOther.retain === \"number\" && firstOther.attributes == null) {\n                    var firstLeft = firstOther.retain;\n                    while(thisIter.peekType() === \"insert\" && thisIter.peekLength() <= firstLeft){\n                        firstLeft -= thisIter.peekLength();\n                        ops.push(thisIter.next());\n                    }\n                    if (firstOther.retain - firstLeft > 0) {\n                        otherIter.next(firstOther.retain - firstLeft);\n                    }\n                }\n                var delta = new Delta(ops);\n                while(thisIter.hasNext() || otherIter.hasNext()){\n                    if (otherIter.peekType() === \"insert\") {\n                        delta.push(otherIter.next());\n                    } else if (thisIter.peekType() === \"delete\") {\n                        delta.push(thisIter.next());\n                    } else {\n                        var length = Math.min(thisIter.peekLength(), otherIter.peekLength());\n                        var thisOp = thisIter.next(length);\n                        var otherOp = otherIter.next(length);\n                        if (typeof otherOp.retain === \"number\") {\n                            var newOp = {};\n                            if (typeof thisOp.retain === \"number\") {\n                                newOp.retain = length;\n                            } else {\n                                newOp.insert = thisOp.insert;\n                            }\n                            // Preserve null when composing with a retain, otherwise remove it for inserts\n                            var attributes = op.attributes.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === \"number\");\n                            if (attributes) newOp.attributes = attributes;\n                            delta.push(newOp);\n                            // Optimization if rest of other is just retain\n                            if (!otherIter.hasNext() && equal(delta.ops[delta.ops.length - 1], newOp)) {\n                                var rest = new Delta(thisIter.rest());\n                                return delta.concat(rest).chop();\n                            }\n                        // Other op should be delete, we could be an insert or retain\n                        // Insert + delete cancels out\n                        } else if (typeof otherOp[\"delete\"] === \"number\" && typeof thisOp.retain === \"number\") {\n                            delta.push(otherOp);\n                        }\n                    }\n                }\n                return delta.chop();\n            };\n            Delta.prototype.concat = function(other) {\n                var delta = new Delta(this.ops.slice());\n                if (other.ops.length > 0) {\n                    delta.push(other.ops[0]);\n                    delta.ops = delta.ops.concat(other.ops.slice(1));\n                }\n                return delta;\n            };\n            Delta.prototype.diff = function(other, index) {\n                if (this.ops === other.ops) {\n                    return new Delta();\n                }\n                var strings = [\n                    this,\n                    other\n                ].map(function(delta) {\n                    return delta.map(function(op) {\n                        if (op.insert != null) {\n                            return typeof op.insert === \"string\" ? op.insert : NULL_CHARACTER;\n                        }\n                        var prep = delta === other ? \"on\" : \"with\";\n                        throw new Error(\"diff() called \" + prep + \" non-document\");\n                    }).join(\"\");\n                });\n                var delta = new Delta();\n                var diffResult = diff(strings[0], strings[1], index);\n                var thisIter = op.iterator(this.ops);\n                var otherIter = op.iterator(other.ops);\n                diffResult.forEach(function(component) {\n                    var length = component[1].length;\n                    while(length > 0){\n                        var opLength = 0;\n                        switch(component[0]){\n                            case diff.INSERT:\n                                opLength = Math.min(otherIter.peekLength(), length);\n                                delta.push(otherIter.next(opLength));\n                                break;\n                            case diff.DELETE:\n                                opLength = Math.min(length, thisIter.peekLength());\n                                thisIter.next(opLength);\n                                delta[\"delete\"](opLength);\n                                break;\n                            case diff.EQUAL:\n                                opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);\n                                var thisOp = thisIter.next(opLength);\n                                var otherOp = otherIter.next(opLength);\n                                if (equal(thisOp.insert, otherOp.insert)) {\n                                    delta.retain(opLength, op.attributes.diff(thisOp.attributes, otherOp.attributes));\n                                } else {\n                                    delta.push(otherOp)[\"delete\"](opLength);\n                                }\n                                break;\n                        }\n                        length -= opLength;\n                    }\n                });\n                return delta.chop();\n            };\n            Delta.prototype.eachLine = function(predicate, newline) {\n                newline = newline || \"\\n\";\n                var iter = op.iterator(this.ops);\n                var line = new Delta();\n                var i = 0;\n                while(iter.hasNext()){\n                    if (iter.peekType() !== \"insert\") return;\n                    var thisOp = iter.peek();\n                    var start = op.length(thisOp) - iter.peekLength();\n                    var index = typeof thisOp.insert === \"string\" ? thisOp.insert.indexOf(newline, start) - start : -1;\n                    if (index < 0) {\n                        line.push(iter.next());\n                    } else if (index > 0) {\n                        line.push(iter.next(index));\n                    } else {\n                        if (predicate(line, iter.next(1).attributes || {}, i) === false) {\n                            return;\n                        }\n                        i += 1;\n                        line = new Delta();\n                    }\n                }\n                if (line.length() > 0) {\n                    predicate(line, {}, i);\n                }\n            };\n            Delta.prototype.transform = function(other, priority) {\n                priority = !!priority;\n                if (typeof other === \"number\") {\n                    return this.transformPosition(other, priority);\n                }\n                var thisIter = op.iterator(this.ops);\n                var otherIter = op.iterator(other.ops);\n                var delta = new Delta();\n                while(thisIter.hasNext() || otherIter.hasNext()){\n                    if (thisIter.peekType() === \"insert\" && (priority || otherIter.peekType() !== \"insert\")) {\n                        delta.retain(op.length(thisIter.next()));\n                    } else if (otherIter.peekType() === \"insert\") {\n                        delta.push(otherIter.next());\n                    } else {\n                        var length = Math.min(thisIter.peekLength(), otherIter.peekLength());\n                        var thisOp = thisIter.next(length);\n                        var otherOp = otherIter.next(length);\n                        if (thisOp[\"delete\"]) {\n                            continue;\n                        } else if (otherOp[\"delete\"]) {\n                            delta.push(otherOp);\n                        } else {\n                            // We retain either their retain or insert\n                            delta.retain(length, op.attributes.transform(thisOp.attributes, otherOp.attributes, priority));\n                        }\n                    }\n                }\n                return delta.chop();\n            };\n            Delta.prototype.transformPosition = function(index, priority) {\n                priority = !!priority;\n                var thisIter = op.iterator(this.ops);\n                var offset = 0;\n                while(thisIter.hasNext() && offset <= index){\n                    var length = thisIter.peekLength();\n                    var nextType = thisIter.peekType();\n                    thisIter.next();\n                    if (nextType === \"delete\") {\n                        index -= Math.min(length, index - offset);\n                        continue;\n                    } else if (nextType === \"insert\" && (offset < index || !priority)) {\n                        index += length;\n                    }\n                    offset += length;\n                }\n                return index;\n            };\n            module1.exports = Delta;\n        /***/ },\n        /* 3 */ /***/ function(module1, exports1) {\n            \"use strict\";\n            var hasOwn = Object.prototype.hasOwnProperty;\n            var toStr = Object.prototype.toString;\n            var defineProperty = Object.defineProperty;\n            var gOPD = Object.getOwnPropertyDescriptor;\n            var isArray = function isArray(arr) {\n                if (typeof Array.isArray === \"function\") {\n                    return Array.isArray(arr);\n                }\n                return toStr.call(arr) === \"[object Array]\";\n            };\n            var isPlainObject = function isPlainObject(obj) {\n                if (!obj || toStr.call(obj) !== \"[object Object]\") {\n                    return false;\n                }\n                var hasOwnConstructor = hasOwn.call(obj, \"constructor\");\n                var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, \"isPrototypeOf\");\n                // Not own constructor property must be Object\n                if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n                    return false;\n                }\n                // Own properties are enumerated firstly, so to speed up,\n                // if last one is own, then all properties are own.\n                var key;\n                for(key in obj){}\n                return typeof key === \"undefined\" || hasOwn.call(obj, key);\n            };\n            // If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\n            var setProperty = function setProperty(target, options) {\n                if (defineProperty && options.name === \"__proto__\") {\n                    defineProperty(target, options.name, {\n                        enumerable: true,\n                        configurable: true,\n                        value: options.newValue,\n                        writable: true\n                    });\n                } else {\n                    target[options.name] = options.newValue;\n                }\n            };\n            // Return undefined instead of __proto__ if '__proto__' is not an own property\n            var getProperty = function getProperty(obj, name) {\n                if (name === \"__proto__\") {\n                    if (!hasOwn.call(obj, name)) {\n                        return void 0;\n                    } else if (gOPD) {\n                        // In early versions of node, obj['__proto__'] is buggy when obj has\n                        // __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n                        return gOPD(obj, name).value;\n                    }\n                }\n                return obj[name];\n            };\n            module1.exports = function extend() {\n                var options, name, src, copy, copyIsArray, clone;\n                var target = arguments[0];\n                var i = 1;\n                var length = arguments.length;\n                var deep = false;\n                // Handle a deep copy situation\n                if (typeof target === \"boolean\") {\n                    deep = target;\n                    target = arguments[1] || {};\n                    // skip the boolean and the target\n                    i = 2;\n                }\n                if (target == null || typeof target !== \"object\" && typeof target !== \"function\") {\n                    target = {};\n                }\n                for(; i < length; ++i){\n                    options = arguments[i];\n                    // Only deal with non-null/undefined values\n                    if (options != null) {\n                        // Extend the base object\n                        for(name in options){\n                            src = getProperty(target, name);\n                            copy = getProperty(options, name);\n                            // Prevent never-ending loop\n                            if (target !== copy) {\n                                // Recurse if we're merging plain objects or arrays\n                                if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n                                    if (copyIsArray) {\n                                        copyIsArray = false;\n                                        clone = src && isArray(src) ? src : [];\n                                    } else {\n                                        clone = src && isPlainObject(src) ? src : {};\n                                    }\n                                    // Never move original objects, clone them\n                                    setProperty(target, {\n                                        name: name,\n                                        newValue: extend(deep, clone, copy)\n                                    });\n                                // Don't bring in undefined values\n                                } else if (typeof copy !== \"undefined\") {\n                                    setProperty(target, {\n                                        name: name,\n                                        newValue: copy\n                                    });\n                                }\n                            }\n                        }\n                    }\n                }\n                // Return the modified object\n                return target;\n            };\n        /***/ },\n        /* 4 */ /***/ function(module1, exports1, __nested_webpack_require_33535__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.default = exports1.BlockEmbed = exports1.bubbleFormats = undefined;\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _get = function get(object, property, receiver) {\n                if (object === null) object = Function.prototype;\n                var desc = Object.getOwnPropertyDescriptor(object, property);\n                if (desc === undefined) {\n                    var parent = Object.getPrototypeOf(object);\n                    if (parent === null) {\n                        return undefined;\n                    } else {\n                        return get(parent, property, receiver);\n                    }\n                } else if (\"value\" in desc) {\n                    return desc.value;\n                } else {\n                    var getter = desc.get;\n                    if (getter === undefined) {\n                        return undefined;\n                    }\n                    return getter.call(receiver);\n                }\n            };\n            var _extend = __nested_webpack_require_33535__(3);\n            var _extend2 = _interopRequireDefault(_extend);\n            var _quillDelta = __nested_webpack_require_33535__(2);\n            var _quillDelta2 = _interopRequireDefault(_quillDelta);\n            var _parchment = __nested_webpack_require_33535__(0);\n            var _parchment2 = _interopRequireDefault(_parchment);\n            var _break = __nested_webpack_require_33535__(16);\n            var _break2 = _interopRequireDefault(_break);\n            var _inline = __nested_webpack_require_33535__(6);\n            var _inline2 = _interopRequireDefault(_inline);\n            var _text = __nested_webpack_require_33535__(7);\n            var _text2 = _interopRequireDefault(_text);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var NEWLINE_LENGTH = 1;\n            var BlockEmbed = function(_Parchment$Embed) {\n                _inherits(BlockEmbed, _Parchment$Embed);\n                function BlockEmbed() {\n                    _classCallCheck(this, BlockEmbed);\n                    return _possibleConstructorReturn(this, (BlockEmbed.__proto__ || Object.getPrototypeOf(BlockEmbed)).apply(this, arguments));\n                }\n                _createClass(BlockEmbed, [\n                    {\n                        key: \"attach\",\n                        value: function attach() {\n                            _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), \"attach\", this).call(this);\n                            this.attributes = new _parchment2.default.Attributor.Store(this.domNode);\n                        }\n                    },\n                    {\n                        key: \"delta\",\n                        value: function delta() {\n                            return new _quillDelta2.default().insert(this.value(), (0, _extend2.default)(this.formats(), this.attributes.values()));\n                        }\n                    },\n                    {\n                        key: \"format\",\n                        value: function format(name, value) {\n                            var attribute = _parchment2.default.query(name, _parchment2.default.Scope.BLOCK_ATTRIBUTE);\n                            if (attribute != null) {\n                                this.attributes.attribute(attribute, value);\n                            }\n                        }\n                    },\n                    {\n                        key: \"formatAt\",\n                        value: function formatAt(index, length, name, value) {\n                            this.format(name, value);\n                        }\n                    },\n                    {\n                        key: \"insertAt\",\n                        value: function insertAt(index, value, def) {\n                            if (typeof value === \"string\" && value.endsWith(\"\\n\")) {\n                                var block = _parchment2.default.create(Block.blotName);\n                                this.parent.insertBefore(block, index === 0 ? this : this.next);\n                                block.insertAt(0, value.slice(0, -1));\n                            } else {\n                                _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), \"insertAt\", this).call(this, index, value, def);\n                            }\n                        }\n                    }\n                ]);\n                return BlockEmbed;\n            }(_parchment2.default.Embed);\n            BlockEmbed.scope = _parchment2.default.Scope.BLOCK_BLOT;\n            // It is important for cursor behavior BlockEmbeds use tags that are block level elements\n            var Block = function(_Parchment$Block) {\n                _inherits(Block, _Parchment$Block);\n                function Block(domNode) {\n                    _classCallCheck(this, Block);\n                    var _this2 = _possibleConstructorReturn(this, (Block.__proto__ || Object.getPrototypeOf(Block)).call(this, domNode));\n                    _this2.cache = {};\n                    return _this2;\n                }\n                _createClass(Block, [\n                    {\n                        key: \"delta\",\n                        value: function delta() {\n                            if (this.cache.delta == null) {\n                                this.cache.delta = this.descendants(_parchment2.default.Leaf).reduce(function(delta, leaf) {\n                                    if (leaf.length() === 0) {\n                                        return delta;\n                                    } else {\n                                        return delta.insert(leaf.value(), bubbleFormats(leaf));\n                                    }\n                                }, new _quillDelta2.default()).insert(\"\\n\", bubbleFormats(this));\n                            }\n                            return this.cache.delta;\n                        }\n                    },\n                    {\n                        key: \"deleteAt\",\n                        value: function deleteAt(index, length) {\n                            _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), \"deleteAt\", this).call(this, index, length);\n                            this.cache = {};\n                        }\n                    },\n                    {\n                        key: \"formatAt\",\n                        value: function formatAt(index, length, name, value) {\n                            if (length <= 0) return;\n                            if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {\n                                if (index + length === this.length()) {\n                                    this.format(name, value);\n                                }\n                            } else {\n                                _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), \"formatAt\", this).call(this, index, Math.min(length, this.length() - index - 1), name, value);\n                            }\n                            this.cache = {};\n                        }\n                    },\n                    {\n                        key: \"insertAt\",\n                        value: function insertAt(index, value, def) {\n                            if (def != null) return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), \"insertAt\", this).call(this, index, value, def);\n                            if (value.length === 0) return;\n                            var lines = value.split(\"\\n\");\n                            var text = lines.shift();\n                            if (text.length > 0) {\n                                if (index < this.length() - 1 || this.children.tail == null) {\n                                    _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), \"insertAt\", this).call(this, Math.min(index, this.length() - 1), text);\n                                } else {\n                                    this.children.tail.insertAt(this.children.tail.length(), text);\n                                }\n                                this.cache = {};\n                            }\n                            var block = this;\n                            lines.reduce(function(index, line) {\n                                block = block.split(index, true);\n                                block.insertAt(0, line);\n                                return line.length;\n                            }, index + text.length);\n                        }\n                    },\n                    {\n                        key: \"insertBefore\",\n                        value: function insertBefore(blot, ref) {\n                            var head = this.children.head;\n                            _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), \"insertBefore\", this).call(this, blot, ref);\n                            if (head instanceof _break2.default) {\n                                head.remove();\n                            }\n                            this.cache = {};\n                        }\n                    },\n                    {\n                        key: \"length\",\n                        value: function length() {\n                            if (this.cache.length == null) {\n                                this.cache.length = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), \"length\", this).call(this) + NEWLINE_LENGTH;\n                            }\n                            return this.cache.length;\n                        }\n                    },\n                    {\n                        key: \"moveChildren\",\n                        value: function moveChildren(target, ref) {\n                            _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), \"moveChildren\", this).call(this, target, ref);\n                            this.cache = {};\n                        }\n                    },\n                    {\n                        key: \"optimize\",\n                        value: function optimize(context) {\n                            _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), \"optimize\", this).call(this, context);\n                            this.cache = {};\n                        }\n                    },\n                    {\n                        key: \"path\",\n                        value: function path(index) {\n                            return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), \"path\", this).call(this, index, true);\n                        }\n                    },\n                    {\n                        key: \"removeChild\",\n                        value: function removeChild(child) {\n                            _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), \"removeChild\", this).call(this, child);\n                            this.cache = {};\n                        }\n                    },\n                    {\n                        key: \"split\",\n                        value: function split(index) {\n                            var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                            if (force && (index === 0 || index >= this.length() - NEWLINE_LENGTH)) {\n                                var clone = this.clone();\n                                if (index === 0) {\n                                    this.parent.insertBefore(clone, this);\n                                    return this;\n                                } else {\n                                    this.parent.insertBefore(clone, this.next);\n                                    return clone;\n                                }\n                            } else {\n                                var next = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), \"split\", this).call(this, index, force);\n                                this.cache = {};\n                                return next;\n                            }\n                        }\n                    }\n                ]);\n                return Block;\n            }(_parchment2.default.Block);\n            Block.blotName = \"block\";\n            Block.tagName = \"P\";\n            Block.defaultChild = \"break\";\n            Block.allowedChildren = [\n                _inline2.default,\n                _parchment2.default.Embed,\n                _text2.default\n            ];\n            function bubbleFormats(blot) {\n                var formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                if (blot == null) return formats;\n                if (typeof blot.formats === \"function\") {\n                    formats = (0, _extend2.default)(formats, blot.formats());\n                }\n                if (blot.parent == null || blot.parent.blotName == \"scroll\" || blot.parent.statics.scope !== blot.statics.scope) {\n                    return formats;\n                }\n                return bubbleFormats(blot.parent, formats);\n            }\n            exports1.bubbleFormats = bubbleFormats;\n            exports1.BlockEmbed = BlockEmbed;\n            exports1.default = Block;\n        /***/ },\n        /* 5 */ /***/ function(module1, exports1, __nested_webpack_require_49266__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.default = exports1.overload = exports1.expandConfig = undefined;\n            var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function(obj) {\n                return typeof obj;\n            } : function(obj) {\n                return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n            var _slicedToArray = function() {\n                function sliceIterator(arr, i) {\n                    var _arr = [];\n                    var _n = true;\n                    var _d = false;\n                    var _e = undefined;\n                    try {\n                        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n                            _arr.push(_s.value);\n                            if (i && _arr.length === i) break;\n                        }\n                    } catch (err) {\n                        _d = true;\n                        _e = err;\n                    } finally{\n                        try {\n                            if (!_n && _i[\"return\"]) _i[\"return\"]();\n                        } finally{\n                            if (_d) throw _e;\n                        }\n                    }\n                    return _arr;\n                }\n                return function(arr, i) {\n                    if (Array.isArray(arr)) {\n                        return arr;\n                    } else if (Symbol.iterator in Object(arr)) {\n                        return sliceIterator(arr, i);\n                    } else {\n                        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n                    }\n                };\n            }();\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            __nested_webpack_require_49266__(50);\n            var _quillDelta = __nested_webpack_require_49266__(2);\n            var _quillDelta2 = _interopRequireDefault(_quillDelta);\n            var _editor = __nested_webpack_require_49266__(14);\n            var _editor2 = _interopRequireDefault(_editor);\n            var _emitter3 = __nested_webpack_require_49266__(8);\n            var _emitter4 = _interopRequireDefault(_emitter3);\n            var _module = __nested_webpack_require_49266__(9);\n            var _module2 = _interopRequireDefault(_module);\n            var _parchment = __nested_webpack_require_49266__(0);\n            var _parchment2 = _interopRequireDefault(_parchment);\n            var _selection = __nested_webpack_require_49266__(15);\n            var _selection2 = _interopRequireDefault(_selection);\n            var _extend = __nested_webpack_require_49266__(3);\n            var _extend2 = _interopRequireDefault(_extend);\n            var _logger = __nested_webpack_require_49266__(10);\n            var _logger2 = _interopRequireDefault(_logger);\n            var _theme = __nested_webpack_require_49266__(34);\n            var _theme2 = _interopRequireDefault(_theme);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _defineProperty(obj, key, value) {\n                if (key in obj) {\n                    Object.defineProperty(obj, key, {\n                        value: value,\n                        enumerable: true,\n                        configurable: true,\n                        writable: true\n                    });\n                } else {\n                    obj[key] = value;\n                }\n                return obj;\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            var debug = (0, _logger2.default)(\"quill\");\n            var Quill = function() {\n                _createClass(Quill, null, [\n                    {\n                        key: \"debug\",\n                        value: function debug(limit) {\n                            if (limit === true) {\n                                limit = \"log\";\n                            }\n                            _logger2.default.level(limit);\n                        }\n                    },\n                    {\n                        key: \"find\",\n                        value: function find(node) {\n                            return node.__quill || _parchment2.default.find(node);\n                        }\n                    },\n                    {\n                        key: \"import\",\n                        value: function _import(name) {\n                            if (this.imports[name] == null) {\n                                debug.error(\"Cannot import \" + name + \". Are you sure it was registered?\");\n                            }\n                            return this.imports[name];\n                        }\n                    },\n                    {\n                        key: \"register\",\n                        value: function register(path, target) {\n                            var _this = this;\n                            var overwrite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n                            if (typeof path !== \"string\") {\n                                var name = path.attrName || path.blotName;\n                                if (typeof name === \"string\") {\n                                    // register(Blot | Attributor, overwrite)\n                                    this.register(\"formats/\" + name, path, target);\n                                } else {\n                                    Object.keys(path).forEach(function(key) {\n                                        _this.register(key, path[key], target);\n                                    });\n                                }\n                            } else {\n                                if (this.imports[path] != null && !overwrite) {\n                                    debug.warn(\"Overwriting \" + path + \" with\", target);\n                                }\n                                this.imports[path] = target;\n                                if ((path.startsWith(\"blots/\") || path.startsWith(\"formats/\")) && target.blotName !== \"abstract\") {\n                                    _parchment2.default.register(target);\n                                } else if (path.startsWith(\"modules\") && typeof target.register === \"function\") {\n                                    target.register();\n                                }\n                            }\n                        }\n                    }\n                ]);\n                function Quill(container) {\n                    var _this2 = this;\n                    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                    _classCallCheck(this, Quill);\n                    this.options = expandConfig(container, options);\n                    this.container = this.options.container;\n                    if (this.container == null) {\n                        return debug.error(\"Invalid Quill container\", container);\n                    }\n                    if (this.options.debug) {\n                        Quill.debug(this.options.debug);\n                    }\n                    var html = this.container.innerHTML.trim();\n                    this.container.classList.add(\"ql-container\");\n                    this.container.innerHTML = \"\";\n                    this.container.__quill = this;\n                    this.root = this.addContainer(\"ql-editor\");\n                    this.root.classList.add(\"ql-blank\");\n                    this.root.setAttribute(\"data-gramm\", false);\n                    this.scrollingContainer = this.options.scrollingContainer || this.root;\n                    this.emitter = new _emitter4.default();\n                    this.scroll = _parchment2.default.create(this.root, {\n                        emitter: this.emitter,\n                        whitelist: this.options.formats\n                    });\n                    this.editor = new _editor2.default(this.scroll);\n                    this.selection = new _selection2.default(this.scroll, this.emitter);\n                    this.theme = new this.options.theme(this, this.options);\n                    this.keyboard = this.theme.addModule(\"keyboard\");\n                    this.clipboard = this.theme.addModule(\"clipboard\");\n                    this.history = this.theme.addModule(\"history\");\n                    this.theme.init();\n                    this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function(type) {\n                        if (type === _emitter4.default.events.TEXT_CHANGE) {\n                            _this2.root.classList.toggle(\"ql-blank\", _this2.editor.isBlank());\n                        }\n                    });\n                    this.emitter.on(_emitter4.default.events.SCROLL_UPDATE, function(source, mutations) {\n                        var range = _this2.selection.lastRange;\n                        var index = range && range.length === 0 ? range.index : undefined;\n                        modify.call(_this2, function() {\n                            return _this2.editor.update(null, mutations, index);\n                        }, source);\n                    });\n                    var contents = this.clipboard.convert(\"<div class='ql-editor' style=\\\"white-space: normal;\\\">\" + html + \"<p><br></p></div>\");\n                    this.setContents(contents);\n                    this.history.clear();\n                    if (this.options.placeholder) {\n                        this.root.setAttribute(\"data-placeholder\", this.options.placeholder);\n                    }\n                    if (this.options.readOnly) {\n                        this.disable();\n                    }\n                }\n                _createClass(Quill, [\n                    {\n                        key: \"addContainer\",\n                        value: function addContainer(container) {\n                            var refNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n                            if (typeof container === \"string\") {\n                                var className = container;\n                                container = document.createElement(\"div\");\n                                container.classList.add(className);\n                            }\n                            this.container.insertBefore(container, refNode);\n                            return container;\n                        }\n                    },\n                    {\n                        key: \"blur\",\n                        value: function blur() {\n                            this.selection.setRange(null);\n                        }\n                    },\n                    {\n                        key: \"deleteText\",\n                        value: function deleteText(index, length, source) {\n                            var _this3 = this;\n                            var _overload = overload(index, length, source);\n                            var _overload2 = _slicedToArray(_overload, 4);\n                            index = _overload2[0];\n                            length = _overload2[1];\n                            source = _overload2[3];\n                            return modify.call(this, function() {\n                                return _this3.editor.deleteText(index, length);\n                            }, source, index, -1 * length);\n                        }\n                    },\n                    {\n                        key: \"disable\",\n                        value: function disable() {\n                            this.enable(false);\n                        }\n                    },\n                    {\n                        key: \"enable\",\n                        value: function enable() {\n                            var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n                            this.scroll.enable(enabled);\n                            this.container.classList.toggle(\"ql-disabled\", !enabled);\n                        }\n                    },\n                    {\n                        key: \"focus\",\n                        value: function focus() {\n                            var scrollTop = this.scrollingContainer.scrollTop;\n                            this.selection.focus();\n                            this.scrollingContainer.scrollTop = scrollTop;\n                            this.scrollIntoView();\n                        }\n                    },\n                    {\n                        key: \"format\",\n                        value: function format(name, value) {\n                            var _this4 = this;\n                            var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;\n                            return modify.call(this, function() {\n                                var range = _this4.getSelection(true);\n                                var change = new _quillDelta2.default();\n                                if (range == null) {\n                                    return change;\n                                } else if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {\n                                    change = _this4.editor.formatLine(range.index, range.length, _defineProperty({}, name, value));\n                                } else if (range.length === 0) {\n                                    _this4.selection.format(name, value);\n                                    return change;\n                                } else {\n                                    change = _this4.editor.formatText(range.index, range.length, _defineProperty({}, name, value));\n                                }\n                                _this4.setSelection(range, _emitter4.default.sources.SILENT);\n                                return change;\n                            }, source);\n                        }\n                    },\n                    {\n                        key: \"formatLine\",\n                        value: function formatLine(index, length, name, value, source) {\n                            var _this5 = this;\n                            var formats = void 0;\n                            var _overload3 = overload(index, length, name, value, source);\n                            var _overload4 = _slicedToArray(_overload3, 4);\n                            index = _overload4[0];\n                            length = _overload4[1];\n                            formats = _overload4[2];\n                            source = _overload4[3];\n                            return modify.call(this, function() {\n                                return _this5.editor.formatLine(index, length, formats);\n                            }, source, index, 0);\n                        }\n                    },\n                    {\n                        key: \"formatText\",\n                        value: function formatText(index, length, name, value, source) {\n                            var _this6 = this;\n                            var formats = void 0;\n                            var _overload5 = overload(index, length, name, value, source);\n                            var _overload6 = _slicedToArray(_overload5, 4);\n                            index = _overload6[0];\n                            length = _overload6[1];\n                            formats = _overload6[2];\n                            source = _overload6[3];\n                            return modify.call(this, function() {\n                                return _this6.editor.formatText(index, length, formats);\n                            }, source, index, 0);\n                        }\n                    },\n                    {\n                        key: \"getBounds\",\n                        value: function getBounds(index) {\n                            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n                            var bounds = void 0;\n                            if (typeof index === \"number\") {\n                                bounds = this.selection.getBounds(index, length);\n                            } else {\n                                bounds = this.selection.getBounds(index.index, index.length);\n                            }\n                            var containerBounds = this.container.getBoundingClientRect();\n                            return {\n                                bottom: bounds.bottom - containerBounds.top,\n                                height: bounds.height,\n                                left: bounds.left - containerBounds.left,\n                                right: bounds.right - containerBounds.left,\n                                top: bounds.top - containerBounds.top,\n                                width: bounds.width\n                            };\n                        }\n                    },\n                    {\n                        key: \"getContents\",\n                        value: function getContents() {\n                            var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n                            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;\n                            var _overload7 = overload(index, length);\n                            var _overload8 = _slicedToArray(_overload7, 2);\n                            index = _overload8[0];\n                            length = _overload8[1];\n                            return this.editor.getContents(index, length);\n                        }\n                    },\n                    {\n                        key: \"getFormat\",\n                        value: function getFormat() {\n                            var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getSelection(true);\n                            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n                            if (typeof index === \"number\") {\n                                return this.editor.getFormat(index, length);\n                            } else {\n                                return this.editor.getFormat(index.index, index.length);\n                            }\n                        }\n                    },\n                    {\n                        key: \"getIndex\",\n                        value: function getIndex(blot) {\n                            return blot.offset(this.scroll);\n                        }\n                    },\n                    {\n                        key: \"getLength\",\n                        value: function getLength() {\n                            return this.scroll.length();\n                        }\n                    },\n                    {\n                        key: \"getLeaf\",\n                        value: function getLeaf(index) {\n                            return this.scroll.leaf(index);\n                        }\n                    },\n                    {\n                        key: \"getLine\",\n                        value: function getLine(index) {\n                            return this.scroll.line(index);\n                        }\n                    },\n                    {\n                        key: \"getLines\",\n                        value: function getLines() {\n                            var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n                            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;\n                            if (typeof index !== \"number\") {\n                                return this.scroll.lines(index.index, index.length);\n                            } else {\n                                return this.scroll.lines(index, length);\n                            }\n                        }\n                    },\n                    {\n                        key: \"getModule\",\n                        value: function getModule(name) {\n                            return this.theme.modules[name];\n                        }\n                    },\n                    {\n                        key: \"getSelection\",\n                        value: function getSelection() {\n                            var focus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n                            if (focus) this.focus();\n                            this.update(); // Make sure we access getRange with editor in consistent state\n                            return this.selection.getRange()[0];\n                        }\n                    },\n                    {\n                        key: \"getText\",\n                        value: function getText() {\n                            var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n                            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;\n                            var _overload9 = overload(index, length);\n                            var _overload10 = _slicedToArray(_overload9, 2);\n                            index = _overload10[0];\n                            length = _overload10[1];\n                            return this.editor.getText(index, length);\n                        }\n                    },\n                    {\n                        key: \"hasFocus\",\n                        value: function hasFocus() {\n                            return this.selection.hasFocus();\n                        }\n                    },\n                    {\n                        key: \"insertEmbed\",\n                        value: function insertEmbed(index, embed, value) {\n                            var _this7 = this;\n                            var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Quill.sources.API;\n                            return modify.call(this, function() {\n                                return _this7.editor.insertEmbed(index, embed, value);\n                            }, source, index);\n                        }\n                    },\n                    {\n                        key: \"insertText\",\n                        value: function insertText(index, text, name, value, source) {\n                            var _this8 = this;\n                            var formats = void 0;\n                            var _overload11 = overload(index, 0, name, value, source);\n                            var _overload12 = _slicedToArray(_overload11, 4);\n                            index = _overload12[0];\n                            formats = _overload12[2];\n                            source = _overload12[3];\n                            return modify.call(this, function() {\n                                return _this8.editor.insertText(index, text, formats);\n                            }, source, index, text.length);\n                        }\n                    },\n                    {\n                        key: \"isEnabled\",\n                        value: function isEnabled() {\n                            return !this.container.classList.contains(\"ql-disabled\");\n                        }\n                    },\n                    {\n                        key: \"off\",\n                        value: function off() {\n                            return this.emitter.off.apply(this.emitter, arguments);\n                        }\n                    },\n                    {\n                        key: \"on\",\n                        value: function on() {\n                            return this.emitter.on.apply(this.emitter, arguments);\n                        }\n                    },\n                    {\n                        key: \"once\",\n                        value: function once() {\n                            return this.emitter.once.apply(this.emitter, arguments);\n                        }\n                    },\n                    {\n                        key: \"pasteHTML\",\n                        value: function pasteHTML(index, html, source) {\n                            this.clipboard.dangerouslyPasteHTML(index, html, source);\n                        }\n                    },\n                    {\n                        key: \"removeFormat\",\n                        value: function removeFormat(index, length, source) {\n                            var _this9 = this;\n                            var _overload13 = overload(index, length, source);\n                            var _overload14 = _slicedToArray(_overload13, 4);\n                            index = _overload14[0];\n                            length = _overload14[1];\n                            source = _overload14[3];\n                            return modify.call(this, function() {\n                                return _this9.editor.removeFormat(index, length);\n                            }, source, index);\n                        }\n                    },\n                    {\n                        key: \"scrollIntoView\",\n                        value: function scrollIntoView() {\n                            this.selection.scrollIntoView(this.scrollingContainer);\n                        }\n                    },\n                    {\n                        key: \"setContents\",\n                        value: function setContents(delta) {\n                            var _this10 = this;\n                            var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;\n                            return modify.call(this, function() {\n                                delta = new _quillDelta2.default(delta);\n                                var length = _this10.getLength();\n                                var deleted = _this10.editor.deleteText(0, length);\n                                var applied = _this10.editor.applyDelta(delta);\n                                var lastOp = applied.ops[applied.ops.length - 1];\n                                if (lastOp != null && typeof lastOp.insert === \"string\" && lastOp.insert[lastOp.insert.length - 1] === \"\\n\") {\n                                    _this10.editor.deleteText(_this10.getLength() - 1, 1);\n                                    applied.delete(1);\n                                }\n                                var ret = deleted.compose(applied);\n                                return ret;\n                            }, source);\n                        }\n                    },\n                    {\n                        key: \"setSelection\",\n                        value: function setSelection(index, length, source) {\n                            if (index == null) {\n                                this.selection.setRange(null, length || Quill.sources.API);\n                            } else {\n                                var _overload15 = overload(index, length, source);\n                                var _overload16 = _slicedToArray(_overload15, 4);\n                                index = _overload16[0];\n                                length = _overload16[1];\n                                source = _overload16[3];\n                                this.selection.setRange(new _selection.Range(index, length), source);\n                                if (source !== _emitter4.default.sources.SILENT) {\n                                    this.selection.scrollIntoView(this.scrollingContainer);\n                                }\n                            }\n                        }\n                    },\n                    {\n                        key: \"setText\",\n                        value: function setText(text) {\n                            var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;\n                            var delta = new _quillDelta2.default().insert(text);\n                            return this.setContents(delta, source);\n                        }\n                    },\n                    {\n                        key: \"update\",\n                        value: function update() {\n                            var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;\n                            var change = this.scroll.update(source); // Will update selection before selection.update() does if text changes\n                            this.selection.update(source);\n                            return change;\n                        }\n                    },\n                    {\n                        key: \"updateContents\",\n                        value: function updateContents(delta) {\n                            var _this11 = this;\n                            var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;\n                            return modify.call(this, function() {\n                                delta = new _quillDelta2.default(delta);\n                                return _this11.editor.applyDelta(delta, source);\n                            }, source, true);\n                        }\n                    }\n                ]);\n                return Quill;\n            }();\n            Quill.DEFAULTS = {\n                bounds: null,\n                formats: null,\n                modules: {},\n                placeholder: \"\",\n                readOnly: false,\n                scrollingContainer: null,\n                strict: true,\n                theme: \"default\"\n            };\n            Quill.events = _emitter4.default.events;\n            Quill.sources = _emitter4.default.sources;\n            // eslint-disable-next-line no-undef\n            Quill.version =  false ? 0 : \"1.3.7\";\n            Quill.imports = {\n                \"delta\": _quillDelta2.default,\n                \"parchment\": _parchment2.default,\n                \"core/module\": _module2.default,\n                \"core/theme\": _theme2.default\n            };\n            function expandConfig(container, userConfig) {\n                userConfig = (0, _extend2.default)(true, {\n                    container: container,\n                    modules: {\n                        clipboard: true,\n                        keyboard: true,\n                        history: true\n                    }\n                }, userConfig);\n                if (!userConfig.theme || userConfig.theme === Quill.DEFAULTS.theme) {\n                    userConfig.theme = _theme2.default;\n                } else {\n                    userConfig.theme = Quill.import(\"themes/\" + userConfig.theme);\n                    if (userConfig.theme == null) {\n                        throw new Error(\"Invalid theme \" + userConfig.theme + \". Did you register it?\");\n                    }\n                }\n                var themeConfig = (0, _extend2.default)(true, {}, userConfig.theme.DEFAULTS);\n                [\n                    themeConfig,\n                    userConfig\n                ].forEach(function(config) {\n                    config.modules = config.modules || {};\n                    Object.keys(config.modules).forEach(function(module1) {\n                        if (config.modules[module1] === true) {\n                            config.modules[module1] = {};\n                        }\n                    });\n                });\n                var moduleNames = Object.keys(themeConfig.modules).concat(Object.keys(userConfig.modules));\n                var moduleConfig = moduleNames.reduce(function(config, name) {\n                    var moduleClass = Quill.import(\"modules/\" + name);\n                    if (moduleClass == null) {\n                        debug.error(\"Cannot load \" + name + \" module. Are you sure you registered it?\");\n                    } else {\n                        config[name] = moduleClass.DEFAULTS || {};\n                    }\n                    return config;\n                }, {});\n                // Special case toolbar shorthand\n                if (userConfig.modules != null && userConfig.modules.toolbar && userConfig.modules.toolbar.constructor !== Object) {\n                    userConfig.modules.toolbar = {\n                        container: userConfig.modules.toolbar\n                    };\n                }\n                userConfig = (0, _extend2.default)(true, {}, Quill.DEFAULTS, {\n                    modules: moduleConfig\n                }, themeConfig, userConfig);\n                [\n                    \"bounds\",\n                    \"container\",\n                    \"scrollingContainer\"\n                ].forEach(function(key) {\n                    if (typeof userConfig[key] === \"string\") {\n                        userConfig[key] = document.querySelector(userConfig[key]);\n                    }\n                });\n                userConfig.modules = Object.keys(userConfig.modules).reduce(function(config, name) {\n                    if (userConfig.modules[name]) {\n                        config[name] = userConfig.modules[name];\n                    }\n                    return config;\n                }, {});\n                return userConfig;\n            }\n            // Handle selection preservation and TEXT_CHANGE emission\n            // common to modification APIs\n            function modify(modifier, source, index, shift) {\n                if (this.options.strict && !this.isEnabled() && source === _emitter4.default.sources.USER) {\n                    return new _quillDelta2.default();\n                }\n                var range = index == null ? null : this.getSelection();\n                var oldDelta = this.editor.delta;\n                var change = modifier();\n                if (range != null) {\n                    if (index === true) index = range.index;\n                    if (shift == null) {\n                        range = shiftRange(range, change, source);\n                    } else if (shift !== 0) {\n                        range = shiftRange(range, index, shift, source);\n                    }\n                    this.setSelection(range, _emitter4.default.sources.SILENT);\n                }\n                if (change.length() > 0) {\n                    var _emitter;\n                    var args = [\n                        _emitter4.default.events.TEXT_CHANGE,\n                        change,\n                        oldDelta,\n                        source\n                    ];\n                    (_emitter = this.emitter).emit.apply(_emitter, [\n                        _emitter4.default.events.EDITOR_CHANGE\n                    ].concat(args));\n                    if (source !== _emitter4.default.sources.SILENT) {\n                        var _emitter2;\n                        (_emitter2 = this.emitter).emit.apply(_emitter2, args);\n                    }\n                }\n                return change;\n            }\n            function overload(index, length, name, value, source) {\n                var formats = {};\n                if (typeof index.index === \"number\" && typeof index.length === \"number\") {\n                    // Allow for throwaway end (used by insertText/insertEmbed)\n                    if (typeof length !== \"number\") {\n                        source = value, value = name, name = length, length = index.length, index = index.index;\n                    } else {\n                        length = index.length, index = index.index;\n                    }\n                } else if (typeof length !== \"number\") {\n                    source = value, value = name, name = length, length = 0;\n                }\n                // Handle format being object, two format name/value strings or excluded\n                if ((typeof name === \"undefined\" ? \"undefined\" : _typeof(name)) === \"object\") {\n                    formats = name;\n                    source = value;\n                } else if (typeof name === \"string\") {\n                    if (value != null) {\n                        formats[name] = value;\n                    } else {\n                        source = name;\n                    }\n                }\n                // Handle optional source\n                source = source || _emitter4.default.sources.API;\n                return [\n                    index,\n                    length,\n                    formats,\n                    source\n                ];\n            }\n            function shiftRange(range, index, length, source) {\n                if (range == null) return null;\n                var start = void 0, end = void 0;\n                if (index instanceof _quillDelta2.default) {\n                    var _map = [\n                        range.index,\n                        range.index + range.length\n                    ].map(function(pos) {\n                        return index.transformPosition(pos, source !== _emitter4.default.sources.USER);\n                    });\n                    var _map2 = _slicedToArray(_map, 2);\n                    start = _map2[0];\n                    end = _map2[1];\n                } else {\n                    var _map3 = [\n                        range.index,\n                        range.index + range.length\n                    ].map(function(pos) {\n                        if (pos < index || pos === index && source === _emitter4.default.sources.USER) return pos;\n                        if (length >= 0) {\n                            return pos + length;\n                        } else {\n                            return Math.max(index, pos + length);\n                        }\n                    });\n                    var _map4 = _slicedToArray(_map3, 2);\n                    start = _map4[0];\n                    end = _map4[1];\n                }\n                return new _selection.Range(start, end - start);\n            }\n            exports1.expandConfig = expandConfig;\n            exports1.overload = overload;\n            exports1.default = Quill;\n        /***/ },\n        /* 6 */ /***/ function(module1, exports1, __nested_webpack_require_88469__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _get = function get(object, property, receiver) {\n                if (object === null) object = Function.prototype;\n                var desc = Object.getOwnPropertyDescriptor(object, property);\n                if (desc === undefined) {\n                    var parent = Object.getPrototypeOf(object);\n                    if (parent === null) {\n                        return undefined;\n                    } else {\n                        return get(parent, property, receiver);\n                    }\n                } else if (\"value\" in desc) {\n                    return desc.value;\n                } else {\n                    var getter = desc.get;\n                    if (getter === undefined) {\n                        return undefined;\n                    }\n                    return getter.call(receiver);\n                }\n            };\n            var _text = __nested_webpack_require_88469__(7);\n            var _text2 = _interopRequireDefault(_text);\n            var _parchment = __nested_webpack_require_88469__(0);\n            var _parchment2 = _interopRequireDefault(_parchment);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var Inline = function(_Parchment$Inline) {\n                _inherits(Inline, _Parchment$Inline);\n                function Inline() {\n                    _classCallCheck(this, Inline);\n                    return _possibleConstructorReturn(this, (Inline.__proto__ || Object.getPrototypeOf(Inline)).apply(this, arguments));\n                }\n                _createClass(Inline, [\n                    {\n                        key: \"formatAt\",\n                        value: function formatAt(index, length, name, value) {\n                            if (Inline.compare(this.statics.blotName, name) < 0 && _parchment2.default.query(name, _parchment2.default.Scope.BLOT)) {\n                                var blot = this.isolate(index, length);\n                                if (value) {\n                                    blot.wrap(name, value);\n                                }\n                            } else {\n                                _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), \"formatAt\", this).call(this, index, length, name, value);\n                            }\n                        }\n                    },\n                    {\n                        key: \"optimize\",\n                        value: function optimize(context) {\n                            _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), \"optimize\", this).call(this, context);\n                            if (this.parent instanceof Inline && Inline.compare(this.statics.blotName, this.parent.statics.blotName) > 0) {\n                                var parent = this.parent.isolate(this.offset(), this.length());\n                                this.moveChildren(parent);\n                                parent.wrap(this);\n                            }\n                        }\n                    }\n                ], [\n                    {\n                        key: \"compare\",\n                        value: function compare(self1, other) {\n                            var selfIndex = Inline.order.indexOf(self1);\n                            var otherIndex = Inline.order.indexOf(other);\n                            if (selfIndex >= 0 || otherIndex >= 0) {\n                                return selfIndex - otherIndex;\n                            } else if (self1 === other) {\n                                return 0;\n                            } else if (self1 < other) {\n                                return -1;\n                            } else {\n                                return 1;\n                            }\n                        }\n                    }\n                ]);\n                return Inline;\n            }(_parchment2.default.Inline);\n            Inline.allowedChildren = [\n                Inline,\n                _parchment2.default.Embed,\n                _text2.default\n            ];\n            // Lower index means deeper in the DOM tree, since not found (-1) is for embeds\n            Inline.order = [\n                \"cursor\",\n                \"inline\",\n                \"underline\",\n                \"strike\",\n                \"italic\",\n                \"bold\",\n                \"script\",\n                \"link\",\n                \"code\" // Must be higher\n            ];\n            exports1.default = Inline;\n        /***/ },\n        /* 7 */ /***/ function(module1, exports1, __nested_webpack_require_95454__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var _parchment = __nested_webpack_require_95454__(0);\n            var _parchment2 = _interopRequireDefault(_parchment);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var TextBlot = function(_Parchment$Text) {\n                _inherits(TextBlot, _Parchment$Text);\n                function TextBlot() {\n                    _classCallCheck(this, TextBlot);\n                    return _possibleConstructorReturn(this, (TextBlot.__proto__ || Object.getPrototypeOf(TextBlot)).apply(this, arguments));\n                }\n                return TextBlot;\n            }(_parchment2.default.Text);\n            exports1.default = TextBlot;\n        /***/ },\n        /* 8 */ /***/ function(module1, exports1, __nested_webpack_require_97760__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _get = function get(object, property, receiver) {\n                if (object === null) object = Function.prototype;\n                var desc = Object.getOwnPropertyDescriptor(object, property);\n                if (desc === undefined) {\n                    var parent = Object.getPrototypeOf(object);\n                    if (parent === null) {\n                        return undefined;\n                    } else {\n                        return get(parent, property, receiver);\n                    }\n                } else if (\"value\" in desc) {\n                    return desc.value;\n                } else {\n                    var getter = desc.get;\n                    if (getter === undefined) {\n                        return undefined;\n                    }\n                    return getter.call(receiver);\n                }\n            };\n            var _eventemitter = __nested_webpack_require_97760__(54);\n            var _eventemitter2 = _interopRequireDefault(_eventemitter);\n            var _logger = __nested_webpack_require_97760__(10);\n            var _logger2 = _interopRequireDefault(_logger);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var debug = (0, _logger2.default)(\"quill:events\");\n            var EVENTS = [\n                \"selectionchange\",\n                \"mousedown\",\n                \"mouseup\",\n                \"click\"\n            ];\n            EVENTS.forEach(function(eventName) {\n                document.addEventListener(eventName, function() {\n                    for(var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++){\n                        args[_key] = arguments[_key];\n                    }\n                    [].slice.call(document.querySelectorAll(\".ql-container\")).forEach(function(node) {\n                        // TODO use WeakMap\n                        if (node.__quill && node.__quill.emitter) {\n                            var _node$__quill$emitter;\n                            (_node$__quill$emitter = node.__quill.emitter).handleDOM.apply(_node$__quill$emitter, args);\n                        }\n                    });\n                });\n            });\n            var Emitter = function(_EventEmitter) {\n                _inherits(Emitter, _EventEmitter);\n                function Emitter() {\n                    _classCallCheck(this, Emitter);\n                    var _this = _possibleConstructorReturn(this, (Emitter.__proto__ || Object.getPrototypeOf(Emitter)).call(this));\n                    _this.listeners = {};\n                    _this.on(\"error\", debug.error);\n                    return _this;\n                }\n                _createClass(Emitter, [\n                    {\n                        key: \"emit\",\n                        value: function emit() {\n                            debug.log.apply(debug, arguments);\n                            _get(Emitter.prototype.__proto__ || Object.getPrototypeOf(Emitter.prototype), \"emit\", this).apply(this, arguments);\n                        }\n                    },\n                    {\n                        key: \"handleDOM\",\n                        value: function handleDOM(event) {\n                            for(var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                                args[_key2 - 1] = arguments[_key2];\n                            }\n                            (this.listeners[event.type] || []).forEach(function(_ref) {\n                                var node = _ref.node, handler = _ref.handler;\n                                if (event.target === node || node.contains(event.target)) {\n                                    handler.apply(undefined, [\n                                        event\n                                    ].concat(args));\n                                }\n                            });\n                        }\n                    },\n                    {\n                        key: \"listenDOM\",\n                        value: function listenDOM(eventName, node, handler) {\n                            if (!this.listeners[eventName]) {\n                                this.listeners[eventName] = [];\n                            }\n                            this.listeners[eventName].push({\n                                node: node,\n                                handler: handler\n                            });\n                        }\n                    }\n                ]);\n                return Emitter;\n            }(_eventemitter2.default);\n            Emitter.events = {\n                EDITOR_CHANGE: \"editor-change\",\n                SCROLL_BEFORE_UPDATE: \"scroll-before-update\",\n                SCROLL_OPTIMIZE: \"scroll-optimize\",\n                SCROLL_UPDATE: \"scroll-update\",\n                SELECTION_CHANGE: \"selection-change\",\n                TEXT_CHANGE: \"text-change\"\n            };\n            Emitter.sources = {\n                API: \"api\",\n                SILENT: \"silent\",\n                USER: \"user\"\n            };\n            exports1.default = Emitter;\n        /***/ },\n        /* 9 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            var Module = function Module(quill) {\n                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                _classCallCheck(this, Module);\n                this.quill = quill;\n                this.options = options;\n            };\n            Module.DEFAULTS = {};\n            exports1.default = Module;\n        /***/ },\n        /* 10 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var levels = [\n                \"error\",\n                \"warn\",\n                \"log\",\n                \"info\"\n            ];\n            var level = \"warn\";\n            function debug(method) {\n                if (levels.indexOf(method) <= levels.indexOf(level)) {\n                    var _console;\n                    for(var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                        args[_key - 1] = arguments[_key];\n                    }\n                    (_console = console)[method].apply(_console, args); // eslint-disable-line no-console\n                }\n            }\n            function namespace(ns) {\n                return levels.reduce(function(logger, method) {\n                    logger[method] = debug.bind(console, method, ns);\n                    return logger;\n                }, {});\n            }\n            debug.level = namespace.level = function(newLevel) {\n                level = newLevel;\n            };\n            exports1.default = namespace;\n        /***/ },\n        /* 11 */ /***/ function(module1, exports1, __nested_webpack_require_107450__) {\n            var pSlice = Array.prototype.slice;\n            var objectKeys = __nested_webpack_require_107450__(52);\n            var isArguments = __nested_webpack_require_107450__(53);\n            var deepEqual = module1.exports = function(actual, expected, opts) {\n                if (!opts) opts = {};\n                // 7.1. All identical values are equivalent, as determined by ===.\n                if (actual === expected) {\n                    return true;\n                } else if (actual instanceof Date && expected instanceof Date) {\n                    return actual.getTime() === expected.getTime();\n                // 7.3. Other pairs that do not both pass typeof value == 'object',\n                // equivalence is determined by ==.\n                } else if (!actual || !expected || typeof actual != \"object\" && typeof expected != \"object\") {\n                    return opts.strict ? actual === expected : actual == expected;\n                // 7.4. For all other Object pairs, including Array objects, equivalence is\n                // determined by having the same number of owned properties (as verified\n                // with Object.prototype.hasOwnProperty.call), the same set of keys\n                // (although not necessarily the same order), equivalent values for every\n                // corresponding key, and an identical 'prototype' property. Note: this\n                // accounts for both named and indexed properties on Arrays.\n                } else {\n                    return objEquiv(actual, expected, opts);\n                }\n            };\n            function isUndefinedOrNull(value) {\n                return value === null || value === undefined;\n            }\n            function isBuffer(x) {\n                if (!x || typeof x !== \"object\" || typeof x.length !== \"number\") return false;\n                if (typeof x.copy !== \"function\" || typeof x.slice !== \"function\") {\n                    return false;\n                }\n                if (x.length > 0 && typeof x[0] !== \"number\") return false;\n                return true;\n            }\n            function objEquiv(a, b, opts) {\n                var i, key;\n                if (isUndefinedOrNull(a) || isUndefinedOrNull(b)) return false;\n                // an identical 'prototype' property.\n                if (a.prototype !== b.prototype) return false;\n                //~~~I've managed to break Object.keys through screwy arguments passing.\n                //   Converting to array solves the problem.\n                if (isArguments(a)) {\n                    if (!isArguments(b)) {\n                        return false;\n                    }\n                    a = pSlice.call(a);\n                    b = pSlice.call(b);\n                    return deepEqual(a, b, opts);\n                }\n                if (isBuffer(a)) {\n                    if (!isBuffer(b)) {\n                        return false;\n                    }\n                    if (a.length !== b.length) return false;\n                    for(i = 0; i < a.length; i++){\n                        if (a[i] !== b[i]) return false;\n                    }\n                    return true;\n                }\n                try {\n                    var ka = objectKeys(a), kb = objectKeys(b);\n                } catch (e) {\n                    return false;\n                }\n                // having the same number of owned properties (keys incorporates\n                // hasOwnProperty)\n                if (ka.length != kb.length) return false;\n                //the same set of keys (although not necessarily the same order),\n                ka.sort();\n                kb.sort();\n                //~~~cheap key test\n                for(i = ka.length - 1; i >= 0; i--){\n                    if (ka[i] != kb[i]) return false;\n                }\n                //equivalent values for every corresponding key, and\n                //~~~possibly expensive deep test\n                for(i = ka.length - 1; i >= 0; i--){\n                    key = ka[i];\n                    if (!deepEqual(a[key], b[key], opts)) return false;\n                }\n                return typeof a === typeof b;\n            }\n        /***/ },\n        /* 12 */ /***/ function(module1, exports1, __nested_webpack_require_111683__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var Registry = __nested_webpack_require_111683__(1);\n            var Attributor = /** @class */ function() {\n                function Attributor(attrName, keyName, options) {\n                    if (options === void 0) {\n                        options = {};\n                    }\n                    this.attrName = attrName;\n                    this.keyName = keyName;\n                    var attributeBit = Registry.Scope.TYPE & Registry.Scope.ATTRIBUTE;\n                    if (options.scope != null) {\n                        // Ignore type bits, force attribute bit\n                        this.scope = options.scope & Registry.Scope.LEVEL | attributeBit;\n                    } else {\n                        this.scope = Registry.Scope.ATTRIBUTE;\n                    }\n                    if (options.whitelist != null) this.whitelist = options.whitelist;\n                }\n                Attributor.keys = function(node) {\n                    return [].map.call(node.attributes, function(item) {\n                        return item.name;\n                    });\n                };\n                Attributor.prototype.add = function(node, value) {\n                    if (!this.canAdd(node, value)) return false;\n                    node.setAttribute(this.keyName, value);\n                    return true;\n                };\n                Attributor.prototype.canAdd = function(node, value) {\n                    var match = Registry.query(node, Registry.Scope.BLOT & (this.scope | Registry.Scope.TYPE));\n                    if (match == null) return false;\n                    if (this.whitelist == null) return true;\n                    if (typeof value === \"string\") {\n                        return this.whitelist.indexOf(value.replace(/[\"']/g, \"\")) > -1;\n                    } else {\n                        return this.whitelist.indexOf(value) > -1;\n                    }\n                };\n                Attributor.prototype.remove = function(node) {\n                    node.removeAttribute(this.keyName);\n                };\n                Attributor.prototype.value = function(node) {\n                    var value = node.getAttribute(this.keyName);\n                    if (this.canAdd(node, value) && value) {\n                        return value;\n                    }\n                    return \"\";\n                };\n                return Attributor;\n            }();\n            exports1.default = Attributor;\n        /***/ },\n        /* 13 */ /***/ function(module1, exports1, __nested_webpack_require_114341__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.default = exports1.Code = undefined;\n            var _slicedToArray = function() {\n                function sliceIterator(arr, i) {\n                    var _arr = [];\n                    var _n = true;\n                    var _d = false;\n                    var _e = undefined;\n                    try {\n                        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n                            _arr.push(_s.value);\n                            if (i && _arr.length === i) break;\n                        }\n                    } catch (err) {\n                        _d = true;\n                        _e = err;\n                    } finally{\n                        try {\n                            if (!_n && _i[\"return\"]) _i[\"return\"]();\n                        } finally{\n                            if (_d) throw _e;\n                        }\n                    }\n                    return _arr;\n                }\n                return function(arr, i) {\n                    if (Array.isArray(arr)) {\n                        return arr;\n                    } else if (Symbol.iterator in Object(arr)) {\n                        return sliceIterator(arr, i);\n                    } else {\n                        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n                    }\n                };\n            }();\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _get = function get(object, property, receiver) {\n                if (object === null) object = Function.prototype;\n                var desc = Object.getOwnPropertyDescriptor(object, property);\n                if (desc === undefined) {\n                    var parent = Object.getPrototypeOf(object);\n                    if (parent === null) {\n                        return undefined;\n                    } else {\n                        return get(parent, property, receiver);\n                    }\n                } else if (\"value\" in desc) {\n                    return desc.value;\n                } else {\n                    var getter = desc.get;\n                    if (getter === undefined) {\n                        return undefined;\n                    }\n                    return getter.call(receiver);\n                }\n            };\n            var _quillDelta = __nested_webpack_require_114341__(2);\n            var _quillDelta2 = _interopRequireDefault(_quillDelta);\n            var _parchment = __nested_webpack_require_114341__(0);\n            var _parchment2 = _interopRequireDefault(_parchment);\n            var _block = __nested_webpack_require_114341__(4);\n            var _block2 = _interopRequireDefault(_block);\n            var _inline = __nested_webpack_require_114341__(6);\n            var _inline2 = _interopRequireDefault(_inline);\n            var _text = __nested_webpack_require_114341__(7);\n            var _text2 = _interopRequireDefault(_text);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var Code = function(_Inline) {\n                _inherits(Code, _Inline);\n                function Code() {\n                    _classCallCheck(this, Code);\n                    return _possibleConstructorReturn(this, (Code.__proto__ || Object.getPrototypeOf(Code)).apply(this, arguments));\n                }\n                return Code;\n            }(_inline2.default);\n            Code.blotName = \"code\";\n            Code.tagName = \"CODE\";\n            var CodeBlock = function(_Block) {\n                _inherits(CodeBlock, _Block);\n                function CodeBlock() {\n                    _classCallCheck(this, CodeBlock);\n                    return _possibleConstructorReturn(this, (CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock)).apply(this, arguments));\n                }\n                _createClass(CodeBlock, [\n                    {\n                        key: \"delta\",\n                        value: function delta() {\n                            var _this3 = this;\n                            var text = this.domNode.textContent;\n                            if (text.endsWith(\"\\n\")) {\n                                // Should always be true\n                                text = text.slice(0, -1);\n                            }\n                            return text.split(\"\\n\").reduce(function(delta, frag) {\n                                return delta.insert(frag).insert(\"\\n\", _this3.formats());\n                            }, new _quillDelta2.default());\n                        }\n                    },\n                    {\n                        key: \"format\",\n                        value: function format(name, value) {\n                            if (name === this.statics.blotName && value) return;\n                            var _descendant = this.descendant(_text2.default, this.length() - 1), _descendant2 = _slicedToArray(_descendant, 1), text = _descendant2[0];\n                            if (text != null) {\n                                text.deleteAt(text.length() - 1, 1);\n                            }\n                            _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), \"format\", this).call(this, name, value);\n                        }\n                    },\n                    {\n                        key: \"formatAt\",\n                        value: function formatAt(index, length, name, value) {\n                            if (length === 0) return;\n                            if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK) == null || name === this.statics.blotName && value === this.statics.formats(this.domNode)) {\n                                return;\n                            }\n                            var nextNewline = this.newlineIndex(index);\n                            if (nextNewline < 0 || nextNewline >= index + length) return;\n                            var prevNewline = this.newlineIndex(index, true) + 1;\n                            var isolateLength = nextNewline - prevNewline + 1;\n                            var blot = this.isolate(prevNewline, isolateLength);\n                            var next = blot.next;\n                            blot.format(name, value);\n                            if (next instanceof CodeBlock) {\n                                next.formatAt(0, index - prevNewline + length - isolateLength, name, value);\n                            }\n                        }\n                    },\n                    {\n                        key: \"insertAt\",\n                        value: function insertAt(index, value, def) {\n                            if (def != null) return;\n                            var _descendant3 = this.descendant(_text2.default, index), _descendant4 = _slicedToArray(_descendant3, 2), text = _descendant4[0], offset = _descendant4[1];\n                            text.insertAt(offset, value);\n                        }\n                    },\n                    {\n                        key: \"length\",\n                        value: function length() {\n                            var length = this.domNode.textContent.length;\n                            if (!this.domNode.textContent.endsWith(\"\\n\")) {\n                                return length + 1;\n                            }\n                            return length;\n                        }\n                    },\n                    {\n                        key: \"newlineIndex\",\n                        value: function newlineIndex(searchIndex) {\n                            var reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                            if (!reverse) {\n                                var offset = this.domNode.textContent.slice(searchIndex).indexOf(\"\\n\");\n                                return offset > -1 ? searchIndex + offset : -1;\n                            } else {\n                                return this.domNode.textContent.slice(0, searchIndex).lastIndexOf(\"\\n\");\n                            }\n                        }\n                    },\n                    {\n                        key: \"optimize\",\n                        value: function optimize(context) {\n                            if (!this.domNode.textContent.endsWith(\"\\n\")) {\n                                this.appendChild(_parchment2.default.create(\"text\", \"\\n\"));\n                            }\n                            _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), \"optimize\", this).call(this, context);\n                            var next = this.next;\n                            if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && this.statics.formats(this.domNode) === next.statics.formats(next.domNode)) {\n                                next.optimize(context);\n                                next.moveChildren(this);\n                                next.remove();\n                            }\n                        }\n                    },\n                    {\n                        key: \"replace\",\n                        value: function replace(target) {\n                            _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), \"replace\", this).call(this, target);\n                            [].slice.call(this.domNode.querySelectorAll(\"*\")).forEach(function(node) {\n                                var blot = _parchment2.default.find(node);\n                                if (blot == null) {\n                                    node.parentNode.removeChild(node);\n                                } else if (blot instanceof _parchment2.default.Embed) {\n                                    blot.remove();\n                                } else {\n                                    blot.unwrap();\n                                }\n                            });\n                        }\n                    }\n                ], [\n                    {\n                        key: \"create\",\n                        value: function create(value) {\n                            var domNode = _get(CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock), \"create\", this).call(this, value);\n                            domNode.setAttribute(\"spellcheck\", false);\n                            return domNode;\n                        }\n                    },\n                    {\n                        key: \"formats\",\n                        value: function formats() {\n                            return true;\n                        }\n                    }\n                ]);\n                return CodeBlock;\n            }(_block2.default);\n            CodeBlock.blotName = \"code-block\";\n            CodeBlock.tagName = \"PRE\";\n            CodeBlock.TAB = \"  \";\n            exports1.Code = Code;\n            exports1.default = CodeBlock;\n        /***/ },\n        /* 14 */ /***/ function(module1, exports1, __nested_webpack_require_127655__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function(obj) {\n                return typeof obj;\n            } : function(obj) {\n                return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n            var _slicedToArray = function() {\n                function sliceIterator(arr, i) {\n                    var _arr = [];\n                    var _n = true;\n                    var _d = false;\n                    var _e = undefined;\n                    try {\n                        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n                            _arr.push(_s.value);\n                            if (i && _arr.length === i) break;\n                        }\n                    } catch (err) {\n                        _d = true;\n                        _e = err;\n                    } finally{\n                        try {\n                            if (!_n && _i[\"return\"]) _i[\"return\"]();\n                        } finally{\n                            if (_d) throw _e;\n                        }\n                    }\n                    return _arr;\n                }\n                return function(arr, i) {\n                    if (Array.isArray(arr)) {\n                        return arr;\n                    } else if (Symbol.iterator in Object(arr)) {\n                        return sliceIterator(arr, i);\n                    } else {\n                        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n                    }\n                };\n            }();\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _quillDelta = __nested_webpack_require_127655__(2);\n            var _quillDelta2 = _interopRequireDefault(_quillDelta);\n            var _op = __nested_webpack_require_127655__(20);\n            var _op2 = _interopRequireDefault(_op);\n            var _parchment = __nested_webpack_require_127655__(0);\n            var _parchment2 = _interopRequireDefault(_parchment);\n            var _code = __nested_webpack_require_127655__(13);\n            var _code2 = _interopRequireDefault(_code);\n            var _cursor = __nested_webpack_require_127655__(24);\n            var _cursor2 = _interopRequireDefault(_cursor);\n            var _block = __nested_webpack_require_127655__(4);\n            var _block2 = _interopRequireDefault(_block);\n            var _break = __nested_webpack_require_127655__(16);\n            var _break2 = _interopRequireDefault(_break);\n            var _clone = __nested_webpack_require_127655__(21);\n            var _clone2 = _interopRequireDefault(_clone);\n            var _deepEqual = __nested_webpack_require_127655__(11);\n            var _deepEqual2 = _interopRequireDefault(_deepEqual);\n            var _extend = __nested_webpack_require_127655__(3);\n            var _extend2 = _interopRequireDefault(_extend);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _defineProperty(obj, key, value) {\n                if (key in obj) {\n                    Object.defineProperty(obj, key, {\n                        value: value,\n                        enumerable: true,\n                        configurable: true,\n                        writable: true\n                    });\n                } else {\n                    obj[key] = value;\n                }\n                return obj;\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            var ASCII = /^[ -~]*$/;\n            var Editor = function() {\n                function Editor(scroll) {\n                    _classCallCheck(this, Editor);\n                    this.scroll = scroll;\n                    this.delta = this.getDelta();\n                }\n                _createClass(Editor, [\n                    {\n                        key: \"applyDelta\",\n                        value: function applyDelta(delta) {\n                            var _this = this;\n                            var consumeNextNewline = false;\n                            this.scroll.update();\n                            var scrollLength = this.scroll.length();\n                            this.scroll.batchStart();\n                            delta = normalizeDelta(delta);\n                            delta.reduce(function(index, op) {\n                                var length = op.retain || op.delete || op.insert.length || 1;\n                                var attributes = op.attributes || {};\n                                if (op.insert != null) {\n                                    if (typeof op.insert === \"string\") {\n                                        var text = op.insert;\n                                        if (text.endsWith(\"\\n\") && consumeNextNewline) {\n                                            consumeNextNewline = false;\n                                            text = text.slice(0, -1);\n                                        }\n                                        if (index >= scrollLength && !text.endsWith(\"\\n\")) {\n                                            consumeNextNewline = true;\n                                        }\n                                        _this.scroll.insertAt(index, text);\n                                        var _scroll$line = _this.scroll.line(index), _scroll$line2 = _slicedToArray(_scroll$line, 2), line = _scroll$line2[0], offset = _scroll$line2[1];\n                                        var formats = (0, _extend2.default)({}, (0, _block.bubbleFormats)(line));\n                                        if (line instanceof _block2.default) {\n                                            var _line$descendant = line.descendant(_parchment2.default.Leaf, offset), _line$descendant2 = _slicedToArray(_line$descendant, 1), leaf = _line$descendant2[0];\n                                            formats = (0, _extend2.default)(formats, (0, _block.bubbleFormats)(leaf));\n                                        }\n                                        attributes = _op2.default.attributes.diff(formats, attributes) || {};\n                                    } else if (_typeof(op.insert) === \"object\") {\n                                        var key = Object.keys(op.insert)[0]; // There should only be one key\n                                        if (key == null) return index;\n                                        _this.scroll.insertAt(index, key, op.insert[key]);\n                                    }\n                                    scrollLength += length;\n                                }\n                                Object.keys(attributes).forEach(function(name) {\n                                    _this.scroll.formatAt(index, length, name, attributes[name]);\n                                });\n                                return index + length;\n                            }, 0);\n                            delta.reduce(function(index, op) {\n                                if (typeof op.delete === \"number\") {\n                                    _this.scroll.deleteAt(index, op.delete);\n                                    return index;\n                                }\n                                return index + (op.retain || op.insert.length || 1);\n                            }, 0);\n                            this.scroll.batchEnd();\n                            return this.update(delta);\n                        }\n                    },\n                    {\n                        key: \"deleteText\",\n                        value: function deleteText(index, length) {\n                            this.scroll.deleteAt(index, length);\n                            return this.update(new _quillDelta2.default().retain(index).delete(length));\n                        }\n                    },\n                    {\n                        key: \"formatLine\",\n                        value: function formatLine(index, length) {\n                            var _this2 = this;\n                            var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n                            this.scroll.update();\n                            Object.keys(formats).forEach(function(format) {\n                                if (_this2.scroll.whitelist != null && !_this2.scroll.whitelist[format]) return;\n                                var lines = _this2.scroll.lines(index, Math.max(length, 1));\n                                var lengthRemaining = length;\n                                lines.forEach(function(line) {\n                                    var lineLength = line.length();\n                                    if (!(line instanceof _code2.default)) {\n                                        line.format(format, formats[format]);\n                                    } else {\n                                        var codeIndex = index - line.offset(_this2.scroll);\n                                        var codeLength = line.newlineIndex(codeIndex + lengthRemaining) - codeIndex + 1;\n                                        line.formatAt(codeIndex, codeLength, format, formats[format]);\n                                    }\n                                    lengthRemaining -= lineLength;\n                                });\n                            });\n                            this.scroll.optimize();\n                            return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));\n                        }\n                    },\n                    {\n                        key: \"formatText\",\n                        value: function formatText(index, length) {\n                            var _this3 = this;\n                            var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n                            Object.keys(formats).forEach(function(format) {\n                                _this3.scroll.formatAt(index, length, format, formats[format]);\n                            });\n                            return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));\n                        }\n                    },\n                    {\n                        key: \"getContents\",\n                        value: function getContents(index, length) {\n                            return this.delta.slice(index, index + length);\n                        }\n                    },\n                    {\n                        key: \"getDelta\",\n                        value: function getDelta() {\n                            return this.scroll.lines().reduce(function(delta, line) {\n                                return delta.concat(line.delta());\n                            }, new _quillDelta2.default());\n                        }\n                    },\n                    {\n                        key: \"getFormat\",\n                        value: function getFormat(index) {\n                            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n                            var lines = [], leaves = [];\n                            if (length === 0) {\n                                this.scroll.path(index).forEach(function(path) {\n                                    var _path = _slicedToArray(path, 1), blot = _path[0];\n                                    if (blot instanceof _block2.default) {\n                                        lines.push(blot);\n                                    } else if (blot instanceof _parchment2.default.Leaf) {\n                                        leaves.push(blot);\n                                    }\n                                });\n                            } else {\n                                lines = this.scroll.lines(index, length);\n                                leaves = this.scroll.descendants(_parchment2.default.Leaf, index, length);\n                            }\n                            var formatsArr = [\n                                lines,\n                                leaves\n                            ].map(function(blots) {\n                                if (blots.length === 0) return {};\n                                var formats = (0, _block.bubbleFormats)(blots.shift());\n                                while(Object.keys(formats).length > 0){\n                                    var blot = blots.shift();\n                                    if (blot == null) return formats;\n                                    formats = combineFormats((0, _block.bubbleFormats)(blot), formats);\n                                }\n                                return formats;\n                            });\n                            return _extend2.default.apply(_extend2.default, formatsArr);\n                        }\n                    },\n                    {\n                        key: \"getText\",\n                        value: function getText(index, length) {\n                            return this.getContents(index, length).filter(function(op) {\n                                return typeof op.insert === \"string\";\n                            }).map(function(op) {\n                                return op.insert;\n                            }).join(\"\");\n                        }\n                    },\n                    {\n                        key: \"insertEmbed\",\n                        value: function insertEmbed(index, embed, value) {\n                            this.scroll.insertAt(index, embed, value);\n                            return this.update(new _quillDelta2.default().retain(index).insert(_defineProperty({}, embed, value)));\n                        }\n                    },\n                    {\n                        key: \"insertText\",\n                        value: function insertText(index, text) {\n                            var _this4 = this;\n                            var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n                            text = text.replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\");\n                            this.scroll.insertAt(index, text);\n                            Object.keys(formats).forEach(function(format) {\n                                _this4.scroll.formatAt(index, text.length, format, formats[format]);\n                            });\n                            return this.update(new _quillDelta2.default().retain(index).insert(text, (0, _clone2.default)(formats)));\n                        }\n                    },\n                    {\n                        key: \"isBlank\",\n                        value: function isBlank() {\n                            if (this.scroll.children.length == 0) return true;\n                            if (this.scroll.children.length > 1) return false;\n                            var block = this.scroll.children.head;\n                            if (block.statics.blotName !== _block2.default.blotName) return false;\n                            if (block.children.length > 1) return false;\n                            return block.children.head instanceof _break2.default;\n                        }\n                    },\n                    {\n                        key: \"removeFormat\",\n                        value: function removeFormat(index, length) {\n                            var text = this.getText(index, length);\n                            var _scroll$line3 = this.scroll.line(index + length), _scroll$line4 = _slicedToArray(_scroll$line3, 2), line = _scroll$line4[0], offset = _scroll$line4[1];\n                            var suffixLength = 0, suffix = new _quillDelta2.default();\n                            if (line != null) {\n                                if (!(line instanceof _code2.default)) {\n                                    suffixLength = line.length() - offset;\n                                } else {\n                                    suffixLength = line.newlineIndex(offset) - offset + 1;\n                                }\n                                suffix = line.delta().slice(offset, offset + suffixLength - 1).insert(\"\\n\");\n                            }\n                            var contents = this.getContents(index, length + suffixLength);\n                            var diff = contents.diff(new _quillDelta2.default().insert(text).concat(suffix));\n                            var delta = new _quillDelta2.default().retain(index).concat(diff);\n                            return this.applyDelta(delta);\n                        }\n                    },\n                    {\n                        key: \"update\",\n                        value: function update(change) {\n                            var mutations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n                            var cursorIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n                            var oldDelta = this.delta;\n                            if (mutations.length === 1 && mutations[0].type === \"characterData\" && mutations[0].target.data.match(ASCII) && _parchment2.default.find(mutations[0].target)) {\n                                // Optimization for character changes\n                                var textBlot = _parchment2.default.find(mutations[0].target);\n                                var formats = (0, _block.bubbleFormats)(textBlot);\n                                var index = textBlot.offset(this.scroll);\n                                var oldValue = mutations[0].oldValue.replace(_cursor2.default.CONTENTS, \"\");\n                                var oldText = new _quillDelta2.default().insert(oldValue);\n                                var newText = new _quillDelta2.default().insert(textBlot.value());\n                                var diffDelta = new _quillDelta2.default().retain(index).concat(oldText.diff(newText, cursorIndex));\n                                change = diffDelta.reduce(function(delta, op) {\n                                    if (op.insert) {\n                                        return delta.insert(op.insert, formats);\n                                    } else {\n                                        return delta.push(op);\n                                    }\n                                }, new _quillDelta2.default());\n                                this.delta = oldDelta.compose(change);\n                            } else {\n                                this.delta = this.getDelta();\n                                if (!change || !(0, _deepEqual2.default)(oldDelta.compose(change), this.delta)) {\n                                    change = oldDelta.diff(this.delta, cursorIndex);\n                                }\n                            }\n                            return change;\n                        }\n                    }\n                ]);\n                return Editor;\n            }();\n            function combineFormats(formats, combined) {\n                return Object.keys(combined).reduce(function(merged, name) {\n                    if (formats[name] == null) return merged;\n                    if (combined[name] === formats[name]) {\n                        merged[name] = combined[name];\n                    } else if (Array.isArray(combined[name])) {\n                        if (combined[name].indexOf(formats[name]) < 0) {\n                            merged[name] = combined[name].concat([\n                                formats[name]\n                            ]);\n                        }\n                    } else {\n                        merged[name] = [\n                            combined[name],\n                            formats[name]\n                        ];\n                    }\n                    return merged;\n                }, {});\n            }\n            function normalizeDelta(delta) {\n                return delta.reduce(function(delta, op) {\n                    if (op.insert === 1) {\n                        var attributes = (0, _clone2.default)(op.attributes);\n                        delete attributes[\"image\"];\n                        return delta.insert({\n                            image: op.attributes.image\n                        }, attributes);\n                    }\n                    if (op.attributes != null && (op.attributes.list === true || op.attributes.bullet === true)) {\n                        op = (0, _clone2.default)(op);\n                        if (op.attributes.list) {\n                            op.attributes.list = \"ordered\";\n                        } else {\n                            op.attributes.list = \"bullet\";\n                            delete op.attributes.bullet;\n                        }\n                    }\n                    if (typeof op.insert === \"string\") {\n                        var text = op.insert.replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\");\n                        return delta.insert(text, op.attributes);\n                    }\n                    return delta.push(op);\n                }, new _quillDelta2.default());\n            }\n            exports1.default = Editor;\n        /***/ },\n        /* 15 */ /***/ function(module1, exports1, __nested_webpack_require_150086__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.default = exports1.Range = undefined;\n            var _slicedToArray = function() {\n                function sliceIterator(arr, i) {\n                    var _arr = [];\n                    var _n = true;\n                    var _d = false;\n                    var _e = undefined;\n                    try {\n                        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n                            _arr.push(_s.value);\n                            if (i && _arr.length === i) break;\n                        }\n                    } catch (err) {\n                        _d = true;\n                        _e = err;\n                    } finally{\n                        try {\n                            if (!_n && _i[\"return\"]) _i[\"return\"]();\n                        } finally{\n                            if (_d) throw _e;\n                        }\n                    }\n                    return _arr;\n                }\n                return function(arr, i) {\n                    if (Array.isArray(arr)) {\n                        return arr;\n                    } else if (Symbol.iterator in Object(arr)) {\n                        return sliceIterator(arr, i);\n                    } else {\n                        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n                    }\n                };\n            }();\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _parchment = __nested_webpack_require_150086__(0);\n            var _parchment2 = _interopRequireDefault(_parchment);\n            var _clone = __nested_webpack_require_150086__(21);\n            var _clone2 = _interopRequireDefault(_clone);\n            var _deepEqual = __nested_webpack_require_150086__(11);\n            var _deepEqual2 = _interopRequireDefault(_deepEqual);\n            var _emitter3 = __nested_webpack_require_150086__(8);\n            var _emitter4 = _interopRequireDefault(_emitter3);\n            var _logger = __nested_webpack_require_150086__(10);\n            var _logger2 = _interopRequireDefault(_logger);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _toConsumableArray(arr) {\n                if (Array.isArray(arr)) {\n                    for(var i = 0, arr2 = Array(arr.length); i < arr.length; i++){\n                        arr2[i] = arr[i];\n                    }\n                    return arr2;\n                } else {\n                    return Array.from(arr);\n                }\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            var debug = (0, _logger2.default)(\"quill:selection\");\n            var Range = function Range(index) {\n                var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n                _classCallCheck(this, Range);\n                this.index = index;\n                this.length = length;\n            };\n            var Selection = function() {\n                function Selection(scroll, emitter) {\n                    var _this = this;\n                    _classCallCheck(this, Selection);\n                    this.emitter = emitter;\n                    this.scroll = scroll;\n                    this.composing = false;\n                    this.mouseDown = false;\n                    this.root = this.scroll.domNode;\n                    this.cursor = _parchment2.default.create(\"cursor\", this);\n                    // savedRange is last non-null range\n                    this.lastRange = this.savedRange = new Range(0, 0);\n                    this.handleComposition();\n                    this.handleDragging();\n                    this.emitter.listenDOM(\"selectionchange\", document, function() {\n                        if (!_this.mouseDown) {\n                            setTimeout(_this.update.bind(_this, _emitter4.default.sources.USER), 1);\n                        }\n                    });\n                    this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function(type, delta) {\n                        if (type === _emitter4.default.events.TEXT_CHANGE && delta.length() > 0) {\n                            _this.update(_emitter4.default.sources.SILENT);\n                        }\n                    });\n                    this.emitter.on(_emitter4.default.events.SCROLL_BEFORE_UPDATE, function() {\n                        if (!_this.hasFocus()) return;\n                        var native = _this.getNativeRange();\n                        if (native == null) return;\n                        if (native.start.node === _this.cursor.textNode) return; // cursor.restore() will handle\n                        // TODO unclear if this has negative side effects\n                        _this.emitter.once(_emitter4.default.events.SCROLL_UPDATE, function() {\n                            try {\n                                _this.setNativeRange(native.start.node, native.start.offset, native.end.node, native.end.offset);\n                            } catch (ignored) {}\n                        });\n                    });\n                    this.emitter.on(_emitter4.default.events.SCROLL_OPTIMIZE, function(mutations, context) {\n                        if (context.range) {\n                            var _context$range = context.range, startNode = _context$range.startNode, startOffset = _context$range.startOffset, endNode = _context$range.endNode, endOffset = _context$range.endOffset;\n                            _this.setNativeRange(startNode, startOffset, endNode, endOffset);\n                        }\n                    });\n                    this.update(_emitter4.default.sources.SILENT);\n                }\n                _createClass(Selection, [\n                    {\n                        key: \"handleComposition\",\n                        value: function handleComposition() {\n                            var _this2 = this;\n                            this.root.addEventListener(\"compositionstart\", function() {\n                                _this2.composing = true;\n                            });\n                            this.root.addEventListener(\"compositionend\", function() {\n                                _this2.composing = false;\n                                if (_this2.cursor.parent) {\n                                    var range = _this2.cursor.restore();\n                                    if (!range) return;\n                                    setTimeout(function() {\n                                        _this2.setNativeRange(range.startNode, range.startOffset, range.endNode, range.endOffset);\n                                    }, 1);\n                                }\n                            });\n                        }\n                    },\n                    {\n                        key: \"handleDragging\",\n                        value: function handleDragging() {\n                            var _this3 = this;\n                            this.emitter.listenDOM(\"mousedown\", document.body, function() {\n                                _this3.mouseDown = true;\n                            });\n                            this.emitter.listenDOM(\"mouseup\", document.body, function() {\n                                _this3.mouseDown = false;\n                                _this3.update(_emitter4.default.sources.USER);\n                            });\n                        }\n                    },\n                    {\n                        key: \"focus\",\n                        value: function focus() {\n                            if (this.hasFocus()) return;\n                            this.root.focus();\n                            this.setRange(this.savedRange);\n                        }\n                    },\n                    {\n                        key: \"format\",\n                        value: function format(_format, value) {\n                            if (this.scroll.whitelist != null && !this.scroll.whitelist[_format]) return;\n                            this.scroll.update();\n                            var nativeRange = this.getNativeRange();\n                            if (nativeRange == null || !nativeRange.native.collapsed || _parchment2.default.query(_format, _parchment2.default.Scope.BLOCK)) return;\n                            if (nativeRange.start.node !== this.cursor.textNode) {\n                                var blot = _parchment2.default.find(nativeRange.start.node, false);\n                                if (blot == null) return;\n                                // TODO Give blot ability to not split\n                                if (blot instanceof _parchment2.default.Leaf) {\n                                    var after = blot.split(nativeRange.start.offset);\n                                    blot.parent.insertBefore(this.cursor, after);\n                                } else {\n                                    blot.insertBefore(this.cursor, nativeRange.start.node); // Should never happen\n                                }\n                                this.cursor.attach();\n                            }\n                            this.cursor.format(_format, value);\n                            this.scroll.optimize();\n                            this.setNativeRange(this.cursor.textNode, this.cursor.textNode.data.length);\n                            this.update();\n                        }\n                    },\n                    {\n                        key: \"getBounds\",\n                        value: function getBounds(index) {\n                            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n                            var scrollLength = this.scroll.length();\n                            index = Math.min(index, scrollLength - 1);\n                            length = Math.min(index + length, scrollLength - 1) - index;\n                            var node = void 0, _scroll$leaf = this.scroll.leaf(index), _scroll$leaf2 = _slicedToArray(_scroll$leaf, 2), leaf = _scroll$leaf2[0], offset = _scroll$leaf2[1];\n                            if (leaf == null) return null;\n                            var _leaf$position = leaf.position(offset, true);\n                            var _leaf$position2 = _slicedToArray(_leaf$position, 2);\n                            node = _leaf$position2[0];\n                            offset = _leaf$position2[1];\n                            var range = document.createRange();\n                            if (length > 0) {\n                                range.setStart(node, offset);\n                                var _scroll$leaf3 = this.scroll.leaf(index + length);\n                                var _scroll$leaf4 = _slicedToArray(_scroll$leaf3, 2);\n                                leaf = _scroll$leaf4[0];\n                                offset = _scroll$leaf4[1];\n                                if (leaf == null) return null;\n                                var _leaf$position3 = leaf.position(offset, true);\n                                var _leaf$position4 = _slicedToArray(_leaf$position3, 2);\n                                node = _leaf$position4[0];\n                                offset = _leaf$position4[1];\n                                range.setEnd(node, offset);\n                                return range.getBoundingClientRect();\n                            } else {\n                                var side = \"left\";\n                                var rect = void 0;\n                                if (node instanceof Text) {\n                                    if (offset < node.data.length) {\n                                        range.setStart(node, offset);\n                                        range.setEnd(node, offset + 1);\n                                    } else {\n                                        range.setStart(node, offset - 1);\n                                        range.setEnd(node, offset);\n                                        side = \"right\";\n                                    }\n                                    rect = range.getBoundingClientRect();\n                                } else {\n                                    rect = leaf.domNode.getBoundingClientRect();\n                                    if (offset > 0) side = \"right\";\n                                }\n                                return {\n                                    bottom: rect.top + rect.height,\n                                    height: rect.height,\n                                    left: rect[side],\n                                    right: rect[side],\n                                    top: rect.top,\n                                    width: 0\n                                };\n                            }\n                        }\n                    },\n                    {\n                        key: \"getNativeRange\",\n                        value: function getNativeRange() {\n                            var selection = document.getSelection();\n                            if (selection == null || selection.rangeCount <= 0) return null;\n                            var nativeRange = selection.getRangeAt(0);\n                            if (nativeRange == null) return null;\n                            var range = this.normalizeNative(nativeRange);\n                            debug.info(\"getNativeRange\", range);\n                            return range;\n                        }\n                    },\n                    {\n                        key: \"getRange\",\n                        value: function getRange() {\n                            var normalized = this.getNativeRange();\n                            if (normalized == null) return [\n                                null,\n                                null\n                            ];\n                            var range = this.normalizedToRange(normalized);\n                            return [\n                                range,\n                                normalized\n                            ];\n                        }\n                    },\n                    {\n                        key: \"hasFocus\",\n                        value: function hasFocus() {\n                            return document.activeElement === this.root;\n                        }\n                    },\n                    {\n                        key: \"normalizedToRange\",\n                        value: function normalizedToRange(range) {\n                            var _this4 = this;\n                            var positions = [\n                                [\n                                    range.start.node,\n                                    range.start.offset\n                                ]\n                            ];\n                            if (!range.native.collapsed) {\n                                positions.push([\n                                    range.end.node,\n                                    range.end.offset\n                                ]);\n                            }\n                            var indexes = positions.map(function(position) {\n                                var _position = _slicedToArray(position, 2), node = _position[0], offset = _position[1];\n                                var blot = _parchment2.default.find(node, true);\n                                var index = blot.offset(_this4.scroll);\n                                if (offset === 0) {\n                                    return index;\n                                } else if (blot instanceof _parchment2.default.Container) {\n                                    return index + blot.length();\n                                } else {\n                                    return index + blot.index(node, offset);\n                                }\n                            });\n                            var end = Math.min(Math.max.apply(Math, _toConsumableArray(indexes)), this.scroll.length() - 1);\n                            var start = Math.min.apply(Math, [\n                                end\n                            ].concat(_toConsumableArray(indexes)));\n                            return new Range(start, end - start);\n                        }\n                    },\n                    {\n                        key: \"normalizeNative\",\n                        value: function normalizeNative(nativeRange) {\n                            if (!contains(this.root, nativeRange.startContainer) || !nativeRange.collapsed && !contains(this.root, nativeRange.endContainer)) {\n                                return null;\n                            }\n                            var range = {\n                                start: {\n                                    node: nativeRange.startContainer,\n                                    offset: nativeRange.startOffset\n                                },\n                                end: {\n                                    node: nativeRange.endContainer,\n                                    offset: nativeRange.endOffset\n                                },\n                                native: nativeRange\n                            };\n                            [\n                                range.start,\n                                range.end\n                            ].forEach(function(position) {\n                                var node = position.node, offset = position.offset;\n                                while(!(node instanceof Text) && node.childNodes.length > 0){\n                                    if (node.childNodes.length > offset) {\n                                        node = node.childNodes[offset];\n                                        offset = 0;\n                                    } else if (node.childNodes.length === offset) {\n                                        node = node.lastChild;\n                                        offset = node instanceof Text ? node.data.length : node.childNodes.length + 1;\n                                    } else {\n                                        break;\n                                    }\n                                }\n                                position.node = node, position.offset = offset;\n                            });\n                            return range;\n                        }\n                    },\n                    {\n                        key: \"rangeToNative\",\n                        value: function rangeToNative(range) {\n                            var _this5 = this;\n                            var indexes = range.collapsed ? [\n                                range.index\n                            ] : [\n                                range.index,\n                                range.index + range.length\n                            ];\n                            var args = [];\n                            var scrollLength = this.scroll.length();\n                            indexes.forEach(function(index, i) {\n                                index = Math.min(scrollLength - 1, index);\n                                var node = void 0, _scroll$leaf5 = _this5.scroll.leaf(index), _scroll$leaf6 = _slicedToArray(_scroll$leaf5, 2), leaf = _scroll$leaf6[0], offset = _scroll$leaf6[1];\n                                var _leaf$position5 = leaf.position(offset, i !== 0);\n                                var _leaf$position6 = _slicedToArray(_leaf$position5, 2);\n                                node = _leaf$position6[0];\n                                offset = _leaf$position6[1];\n                                args.push(node, offset);\n                            });\n                            if (args.length < 2) {\n                                args = args.concat(args);\n                            }\n                            return args;\n                        }\n                    },\n                    {\n                        key: \"scrollIntoView\",\n                        value: function scrollIntoView(scrollingContainer) {\n                            var range = this.lastRange;\n                            if (range == null) return;\n                            var bounds = this.getBounds(range.index, range.length);\n                            if (bounds == null) return;\n                            var limit = this.scroll.length() - 1;\n                            var _scroll$line = this.scroll.line(Math.min(range.index, limit)), _scroll$line2 = _slicedToArray(_scroll$line, 1), first = _scroll$line2[0];\n                            var last = first;\n                            if (range.length > 0) {\n                                var _scroll$line3 = this.scroll.line(Math.min(range.index + range.length, limit));\n                                var _scroll$line4 = _slicedToArray(_scroll$line3, 1);\n                                last = _scroll$line4[0];\n                            }\n                            if (first == null || last == null) return;\n                            var scrollBounds = scrollingContainer.getBoundingClientRect();\n                            if (bounds.top < scrollBounds.top) {\n                                scrollingContainer.scrollTop -= scrollBounds.top - bounds.top;\n                            } else if (bounds.bottom > scrollBounds.bottom) {\n                                scrollingContainer.scrollTop += bounds.bottom - scrollBounds.bottom;\n                            }\n                        }\n                    },\n                    {\n                        key: \"setNativeRange\",\n                        value: function setNativeRange(startNode, startOffset) {\n                            var endNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : startNode;\n                            var endOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : startOffset;\n                            var force = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n                            debug.info(\"setNativeRange\", startNode, startOffset, endNode, endOffset);\n                            if (startNode != null && (this.root.parentNode == null || startNode.parentNode == null || endNode.parentNode == null)) {\n                                return;\n                            }\n                            var selection = document.getSelection();\n                            if (selection == null) return;\n                            if (startNode != null) {\n                                if (!this.hasFocus()) this.root.focus();\n                                var native = (this.getNativeRange() || {}).native;\n                                if (native == null || force || startNode !== native.startContainer || startOffset !== native.startOffset || endNode !== native.endContainer || endOffset !== native.endOffset) {\n                                    if (startNode.tagName == \"BR\") {\n                                        startOffset = [].indexOf.call(startNode.parentNode.childNodes, startNode);\n                                        startNode = startNode.parentNode;\n                                    }\n                                    if (endNode.tagName == \"BR\") {\n                                        endOffset = [].indexOf.call(endNode.parentNode.childNodes, endNode);\n                                        endNode = endNode.parentNode;\n                                    }\n                                    var range = document.createRange();\n                                    range.setStart(startNode, startOffset);\n                                    range.setEnd(endNode, endOffset);\n                                    selection.removeAllRanges();\n                                    selection.addRange(range);\n                                }\n                            } else {\n                                selection.removeAllRanges();\n                                this.root.blur();\n                                document.body.focus(); // root.blur() not enough on IE11+Travis+SauceLabs (but not local VMs)\n                            }\n                        }\n                    },\n                    {\n                        key: \"setRange\",\n                        value: function setRange(range) {\n                            var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                            var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;\n                            if (typeof force === \"string\") {\n                                source = force;\n                                force = false;\n                            }\n                            debug.info(\"setRange\", range);\n                            if (range != null) {\n                                var args = this.rangeToNative(range);\n                                this.setNativeRange.apply(this, _toConsumableArray(args).concat([\n                                    force\n                                ]));\n                            } else {\n                                this.setNativeRange(null);\n                            }\n                            this.update(source);\n                        }\n                    },\n                    {\n                        key: \"update\",\n                        value: function update() {\n                            var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;\n                            var oldRange = this.lastRange;\n                            var _getRange = this.getRange(), _getRange2 = _slicedToArray(_getRange, 2), lastRange = _getRange2[0], nativeRange = _getRange2[1];\n                            this.lastRange = lastRange;\n                            if (this.lastRange != null) {\n                                this.savedRange = this.lastRange;\n                            }\n                            if (!(0, _deepEqual2.default)(oldRange, this.lastRange)) {\n                                var _emitter;\n                                if (!this.composing && nativeRange != null && nativeRange.native.collapsed && nativeRange.start.node !== this.cursor.textNode) {\n                                    this.cursor.restore();\n                                }\n                                var args = [\n                                    _emitter4.default.events.SELECTION_CHANGE,\n                                    (0, _clone2.default)(this.lastRange),\n                                    (0, _clone2.default)(oldRange),\n                                    source\n                                ];\n                                (_emitter = this.emitter).emit.apply(_emitter, [\n                                    _emitter4.default.events.EDITOR_CHANGE\n                                ].concat(args));\n                                if (source !== _emitter4.default.sources.SILENT) {\n                                    var _emitter2;\n                                    (_emitter2 = this.emitter).emit.apply(_emitter2, args);\n                                }\n                            }\n                        }\n                    }\n                ]);\n                return Selection;\n            }();\n            function contains(parent, descendant) {\n                try {\n                    // Firefox inserts inaccessible nodes around video elements\n                    descendant.parentNode;\n                } catch (e) {\n                    return false;\n                }\n                // IE11 has bug with Text nodes\n                // https://connect.microsoft.com/IE/feedback/details/780874/node-contains-is-incorrect\n                if (descendant instanceof Text) {\n                    descendant = descendant.parentNode;\n                }\n                return parent.contains(descendant);\n            }\n            exports1.Range = Range;\n            exports1.default = Selection;\n        /***/ },\n        /* 16 */ /***/ function(module1, exports1, __nested_webpack_require_179379__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _get = function get(object, property, receiver) {\n                if (object === null) object = Function.prototype;\n                var desc = Object.getOwnPropertyDescriptor(object, property);\n                if (desc === undefined) {\n                    var parent = Object.getPrototypeOf(object);\n                    if (parent === null) {\n                        return undefined;\n                    } else {\n                        return get(parent, property, receiver);\n                    }\n                } else if (\"value\" in desc) {\n                    return desc.value;\n                } else {\n                    var getter = desc.get;\n                    if (getter === undefined) {\n                        return undefined;\n                    }\n                    return getter.call(receiver);\n                }\n            };\n            var _parchment = __nested_webpack_require_179379__(0);\n            var _parchment2 = _interopRequireDefault(_parchment);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var Break = function(_Parchment$Embed) {\n                _inherits(Break, _Parchment$Embed);\n                function Break() {\n                    _classCallCheck(this, Break);\n                    return _possibleConstructorReturn(this, (Break.__proto__ || Object.getPrototypeOf(Break)).apply(this, arguments));\n                }\n                _createClass(Break, [\n                    {\n                        key: \"insertInto\",\n                        value: function insertInto(parent, ref) {\n                            if (parent.children.length === 0) {\n                                _get(Break.prototype.__proto__ || Object.getPrototypeOf(Break.prototype), \"insertInto\", this).call(this, parent, ref);\n                            } else {\n                                this.remove();\n                            }\n                        }\n                    },\n                    {\n                        key: \"length\",\n                        value: function length() {\n                            return 0;\n                        }\n                    },\n                    {\n                        key: \"value\",\n                        value: function value() {\n                            return \"\";\n                        }\n                    }\n                ], [\n                    {\n                        key: \"value\",\n                        value: function value() {\n                            return undefined;\n                        }\n                    }\n                ]);\n                return Break;\n            }(_parchment2.default.Embed);\n            Break.blotName = \"break\";\n            Break.tagName = \"BR\";\n            exports1.default = Break;\n        /***/ },\n        /* 17 */ /***/ function(module1, exports1, __nested_webpack_require_184658__) {\n            \"use strict\";\n            var __extends = this && this.__extends || function() {\n                var extendStatics = Object.setPrototypeOf || ({\n                    __proto__: []\n                }) instanceof Array && function(d, b) {\n                    d.__proto__ = b;\n                } || function(d, b) {\n                    for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n                };\n                return function(d, b) {\n                    extendStatics(d, b);\n                    function __() {\n                        this.constructor = d;\n                    }\n                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n                };\n            }();\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var linked_list_1 = __nested_webpack_require_184658__(44);\n            var shadow_1 = __nested_webpack_require_184658__(30);\n            var Registry = __nested_webpack_require_184658__(1);\n            var ContainerBlot = /** @class */ function(_super) {\n                __extends(ContainerBlot, _super);\n                function ContainerBlot(domNode) {\n                    var _this = _super.call(this, domNode) || this;\n                    _this.build();\n                    return _this;\n                }\n                ContainerBlot.prototype.appendChild = function(other) {\n                    this.insertBefore(other);\n                };\n                ContainerBlot.prototype.attach = function() {\n                    _super.prototype.attach.call(this);\n                    this.children.forEach(function(child) {\n                        child.attach();\n                    });\n                };\n                ContainerBlot.prototype.build = function() {\n                    var _this = this;\n                    this.children = new linked_list_1.default();\n                    // Need to be reversed for if DOM nodes already in order\n                    [].slice.call(this.domNode.childNodes).reverse().forEach(function(node) {\n                        try {\n                            var child = makeBlot(node);\n                            _this.insertBefore(child, _this.children.head || undefined);\n                        } catch (err) {\n                            if (err instanceof Registry.ParchmentError) return;\n                            else throw err;\n                        }\n                    });\n                };\n                ContainerBlot.prototype.deleteAt = function(index, length) {\n                    if (index === 0 && length === this.length()) {\n                        return this.remove();\n                    }\n                    this.children.forEachAt(index, length, function(child, offset, length) {\n                        child.deleteAt(offset, length);\n                    });\n                };\n                ContainerBlot.prototype.descendant = function(criteria, index) {\n                    var _a = this.children.find(index), child = _a[0], offset = _a[1];\n                    if (criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria) {\n                        return [\n                            child,\n                            offset\n                        ];\n                    } else if (child instanceof ContainerBlot) {\n                        return child.descendant(criteria, offset);\n                    } else {\n                        return [\n                            null,\n                            -1\n                        ];\n                    }\n                };\n                ContainerBlot.prototype.descendants = function(criteria, index, length) {\n                    if (index === void 0) {\n                        index = 0;\n                    }\n                    if (length === void 0) {\n                        length = Number.MAX_VALUE;\n                    }\n                    var descendants = [];\n                    var lengthLeft = length;\n                    this.children.forEachAt(index, length, function(child, index, length) {\n                        if (criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria) {\n                            descendants.push(child);\n                        }\n                        if (child instanceof ContainerBlot) {\n                            descendants = descendants.concat(child.descendants(criteria, index, lengthLeft));\n                        }\n                        lengthLeft -= length;\n                    });\n                    return descendants;\n                };\n                ContainerBlot.prototype.detach = function() {\n                    this.children.forEach(function(child) {\n                        child.detach();\n                    });\n                    _super.prototype.detach.call(this);\n                };\n                ContainerBlot.prototype.formatAt = function(index, length, name, value) {\n                    this.children.forEachAt(index, length, function(child, offset, length) {\n                        child.formatAt(offset, length, name, value);\n                    });\n                };\n                ContainerBlot.prototype.insertAt = function(index, value, def) {\n                    var _a = this.children.find(index), child = _a[0], offset = _a[1];\n                    if (child) {\n                        child.insertAt(offset, value, def);\n                    } else {\n                        var blot = def == null ? Registry.create(\"text\", value) : Registry.create(value, def);\n                        this.appendChild(blot);\n                    }\n                };\n                ContainerBlot.prototype.insertBefore = function(childBlot, refBlot) {\n                    if (this.statics.allowedChildren != null && !this.statics.allowedChildren.some(function(child) {\n                        return childBlot instanceof child;\n                    })) {\n                        throw new Registry.ParchmentError(\"Cannot insert \" + childBlot.statics.blotName + \" into \" + this.statics.blotName);\n                    }\n                    childBlot.insertInto(this, refBlot);\n                };\n                ContainerBlot.prototype.length = function() {\n                    return this.children.reduce(function(memo, child) {\n                        return memo + child.length();\n                    }, 0);\n                };\n                ContainerBlot.prototype.moveChildren = function(targetParent, refNode) {\n                    this.children.forEach(function(child) {\n                        targetParent.insertBefore(child, refNode);\n                    });\n                };\n                ContainerBlot.prototype.optimize = function(context) {\n                    _super.prototype.optimize.call(this, context);\n                    if (this.children.length === 0) {\n                        if (this.statics.defaultChild != null) {\n                            var child = Registry.create(this.statics.defaultChild);\n                            this.appendChild(child);\n                            child.optimize(context);\n                        } else {\n                            this.remove();\n                        }\n                    }\n                };\n                ContainerBlot.prototype.path = function(index, inclusive) {\n                    if (inclusive === void 0) {\n                        inclusive = false;\n                    }\n                    var _a = this.children.find(index, inclusive), child = _a[0], offset = _a[1];\n                    var position = [\n                        [\n                            this,\n                            index\n                        ]\n                    ];\n                    if (child instanceof ContainerBlot) {\n                        return position.concat(child.path(offset, inclusive));\n                    } else if (child != null) {\n                        position.push([\n                            child,\n                            offset\n                        ]);\n                    }\n                    return position;\n                };\n                ContainerBlot.prototype.removeChild = function(child) {\n                    this.children.remove(child);\n                };\n                ContainerBlot.prototype.replace = function(target) {\n                    if (target instanceof ContainerBlot) {\n                        target.moveChildren(this);\n                    }\n                    _super.prototype.replace.call(this, target);\n                };\n                ContainerBlot.prototype.split = function(index, force) {\n                    if (force === void 0) {\n                        force = false;\n                    }\n                    if (!force) {\n                        if (index === 0) return this;\n                        if (index === this.length()) return this.next;\n                    }\n                    var after = this.clone();\n                    this.parent.insertBefore(after, this.next);\n                    this.children.forEachAt(index, this.length(), function(child, offset, length) {\n                        child = child.split(offset, force);\n                        after.appendChild(child);\n                    });\n                    return after;\n                };\n                ContainerBlot.prototype.unwrap = function() {\n                    this.moveChildren(this.parent, this.next);\n                    this.remove();\n                };\n                ContainerBlot.prototype.update = function(mutations, context) {\n                    var _this = this;\n                    var addedNodes = [];\n                    var removedNodes = [];\n                    mutations.forEach(function(mutation) {\n                        if (mutation.target === _this.domNode && mutation.type === \"childList\") {\n                            addedNodes.push.apply(addedNodes, mutation.addedNodes);\n                            removedNodes.push.apply(removedNodes, mutation.removedNodes);\n                        }\n                    });\n                    removedNodes.forEach(function(node) {\n                        // Check node has actually been removed\n                        // One exception is Chrome does not immediately remove IFRAMEs\n                        // from DOM but MutationRecord is correct in its reported removal\n                        if (node.parentNode != null && // @ts-ignore\n                        node.tagName !== \"IFRAME\" && document.body.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {\n                            return;\n                        }\n                        var blot = Registry.find(node);\n                        if (blot == null) return;\n                        if (blot.domNode.parentNode == null || blot.domNode.parentNode === _this.domNode) {\n                            blot.detach();\n                        }\n                    });\n                    addedNodes.filter(function(node) {\n                        return node.parentNode == _this.domNode;\n                    }).sort(function(a, b) {\n                        if (a === b) return 0;\n                        if (a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_FOLLOWING) {\n                            return 1;\n                        }\n                        return -1;\n                    }).forEach(function(node) {\n                        var refBlot = null;\n                        if (node.nextSibling != null) {\n                            refBlot = Registry.find(node.nextSibling);\n                        }\n                        var blot = makeBlot(node);\n                        if (blot.next != refBlot || blot.next == null) {\n                            if (blot.parent != null) {\n                                blot.parent.removeChild(_this);\n                            }\n                            _this.insertBefore(blot, refBlot || undefined);\n                        }\n                    });\n                };\n                return ContainerBlot;\n            }(shadow_1.default);\n            function makeBlot(node) {\n                var blot = Registry.find(node);\n                if (blot == null) {\n                    try {\n                        blot = Registry.create(node);\n                    } catch (e) {\n                        blot = Registry.create(Registry.Scope.INLINE);\n                        [].slice.call(node.childNodes).forEach(function(child) {\n                            // @ts-ignore\n                            blot.domNode.appendChild(child);\n                        });\n                        if (node.parentNode) {\n                            node.parentNode.replaceChild(blot.domNode, node);\n                        }\n                        blot.attach();\n                    }\n                }\n                return blot;\n            }\n            exports1.default = ContainerBlot;\n        /***/ },\n        /* 18 */ /***/ function(module1, exports1, __nested_webpack_require_197722__) {\n            \"use strict\";\n            var __extends = this && this.__extends || function() {\n                var extendStatics = Object.setPrototypeOf || ({\n                    __proto__: []\n                }) instanceof Array && function(d, b) {\n                    d.__proto__ = b;\n                } || function(d, b) {\n                    for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n                };\n                return function(d, b) {\n                    extendStatics(d, b);\n                    function __() {\n                        this.constructor = d;\n                    }\n                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n                };\n            }();\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var attributor_1 = __nested_webpack_require_197722__(12);\n            var store_1 = __nested_webpack_require_197722__(31);\n            var container_1 = __nested_webpack_require_197722__(17);\n            var Registry = __nested_webpack_require_197722__(1);\n            var FormatBlot = /** @class */ function(_super) {\n                __extends(FormatBlot, _super);\n                function FormatBlot(domNode) {\n                    var _this = _super.call(this, domNode) || this;\n                    _this.attributes = new store_1.default(_this.domNode);\n                    return _this;\n                }\n                FormatBlot.formats = function(domNode) {\n                    if (typeof this.tagName === \"string\") {\n                        return true;\n                    } else if (Array.isArray(this.tagName)) {\n                        return domNode.tagName.toLowerCase();\n                    }\n                    return undefined;\n                };\n                FormatBlot.prototype.format = function(name, value) {\n                    var format = Registry.query(name);\n                    if (format instanceof attributor_1.default) {\n                        this.attributes.attribute(format, value);\n                    } else if (value) {\n                        if (format != null && (name !== this.statics.blotName || this.formats()[name] !== value)) {\n                            this.replaceWith(name, value);\n                        }\n                    }\n                };\n                FormatBlot.prototype.formats = function() {\n                    var formats = this.attributes.values();\n                    var format = this.statics.formats(this.domNode);\n                    if (format != null) {\n                        formats[this.statics.blotName] = format;\n                    }\n                    return formats;\n                };\n                FormatBlot.prototype.replaceWith = function(name, value) {\n                    var replacement = _super.prototype.replaceWith.call(this, name, value);\n                    this.attributes.copy(replacement);\n                    return replacement;\n                };\n                FormatBlot.prototype.update = function(mutations, context) {\n                    var _this = this;\n                    _super.prototype.update.call(this, mutations, context);\n                    if (mutations.some(function(mutation) {\n                        return mutation.target === _this.domNode && mutation.type === \"attributes\";\n                    })) {\n                        this.attributes.build();\n                    }\n                };\n                FormatBlot.prototype.wrap = function(name, value) {\n                    var wrapper = _super.prototype.wrap.call(this, name, value);\n                    if (wrapper instanceof FormatBlot && wrapper.statics.scope === this.statics.scope) {\n                        this.attributes.move(wrapper);\n                    }\n                    return wrapper;\n                };\n                return FormatBlot;\n            }(container_1.default);\n            exports1.default = FormatBlot;\n        /***/ },\n        /* 19 */ /***/ function(module1, exports1, __nested_webpack_require_201739__) {\n            \"use strict\";\n            var __extends = this && this.__extends || function() {\n                var extendStatics = Object.setPrototypeOf || ({\n                    __proto__: []\n                }) instanceof Array && function(d, b) {\n                    d.__proto__ = b;\n                } || function(d, b) {\n                    for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n                };\n                return function(d, b) {\n                    extendStatics(d, b);\n                    function __() {\n                        this.constructor = d;\n                    }\n                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n                };\n            }();\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var shadow_1 = __nested_webpack_require_201739__(30);\n            var Registry = __nested_webpack_require_201739__(1);\n            var LeafBlot = /** @class */ function(_super) {\n                __extends(LeafBlot, _super);\n                function LeafBlot() {\n                    return _super !== null && _super.apply(this, arguments) || this;\n                }\n                LeafBlot.value = function(domNode) {\n                    return true;\n                };\n                LeafBlot.prototype.index = function(node, offset) {\n                    if (this.domNode === node || this.domNode.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {\n                        return Math.min(offset, 1);\n                    }\n                    return -1;\n                };\n                LeafBlot.prototype.position = function(index, inclusive) {\n                    var offset = [].indexOf.call(this.parent.domNode.childNodes, this.domNode);\n                    if (index > 0) offset += 1;\n                    return [\n                        this.parent.domNode,\n                        offset\n                    ];\n                };\n                LeafBlot.prototype.value = function() {\n                    var _a;\n                    return _a = {}, _a[this.statics.blotName] = this.statics.value(this.domNode) || true, _a;\n                };\n                LeafBlot.scope = Registry.Scope.INLINE_BLOT;\n                return LeafBlot;\n            }(shadow_1.default);\n            exports1.default = LeafBlot;\n        /***/ },\n        /* 20 */ /***/ function(module1, exports1, __nested_webpack_require_204201__) {\n            var equal = __nested_webpack_require_204201__(11);\n            var extend = __nested_webpack_require_204201__(3);\n            var lib = {\n                attributes: {\n                    compose: function(a, b, keepNull) {\n                        if (typeof a !== \"object\") a = {};\n                        if (typeof b !== \"object\") b = {};\n                        var attributes = extend(true, {}, b);\n                        if (!keepNull) {\n                            attributes = Object.keys(attributes).reduce(function(copy, key) {\n                                if (attributes[key] != null) {\n                                    copy[key] = attributes[key];\n                                }\n                                return copy;\n                            }, {});\n                        }\n                        for(var key in a){\n                            if (a[key] !== undefined && b[key] === undefined) {\n                                attributes[key] = a[key];\n                            }\n                        }\n                        return Object.keys(attributes).length > 0 ? attributes : undefined;\n                    },\n                    diff: function(a, b) {\n                        if (typeof a !== \"object\") a = {};\n                        if (typeof b !== \"object\") b = {};\n                        var attributes = Object.keys(a).concat(Object.keys(b)).reduce(function(attributes, key) {\n                            if (!equal(a[key], b[key])) {\n                                attributes[key] = b[key] === undefined ? null : b[key];\n                            }\n                            return attributes;\n                        }, {});\n                        return Object.keys(attributes).length > 0 ? attributes : undefined;\n                    },\n                    transform: function(a, b, priority) {\n                        if (typeof a !== \"object\") return b;\n                        if (typeof b !== \"object\") return undefined;\n                        if (!priority) return b; // b simply overwrites us without priority\n                        var attributes = Object.keys(b).reduce(function(attributes, key) {\n                            if (a[key] === undefined) attributes[key] = b[key]; // null is a valid value\n                            return attributes;\n                        }, {});\n                        return Object.keys(attributes).length > 0 ? attributes : undefined;\n                    }\n                },\n                iterator: function(ops) {\n                    return new Iterator(ops);\n                },\n                length: function(op) {\n                    if (typeof op[\"delete\"] === \"number\") {\n                        return op[\"delete\"];\n                    } else if (typeof op.retain === \"number\") {\n                        return op.retain;\n                    } else {\n                        return typeof op.insert === \"string\" ? op.insert.length : 1;\n                    }\n                }\n            };\n            function Iterator(ops) {\n                this.ops = ops;\n                this.index = 0;\n                this.offset = 0;\n            }\n            ;\n            Iterator.prototype.hasNext = function() {\n                return this.peekLength() < Infinity;\n            };\n            Iterator.prototype.next = function(length) {\n                if (!length) length = Infinity;\n                var nextOp = this.ops[this.index];\n                if (nextOp) {\n                    var offset = this.offset;\n                    var opLength = lib.length(nextOp);\n                    if (length >= opLength - offset) {\n                        length = opLength - offset;\n                        this.index += 1;\n                        this.offset = 0;\n                    } else {\n                        this.offset += length;\n                    }\n                    if (typeof nextOp[\"delete\"] === \"number\") {\n                        return {\n                            \"delete\": length\n                        };\n                    } else {\n                        var retOp = {};\n                        if (nextOp.attributes) {\n                            retOp.attributes = nextOp.attributes;\n                        }\n                        if (typeof nextOp.retain === \"number\") {\n                            retOp.retain = length;\n                        } else if (typeof nextOp.insert === \"string\") {\n                            retOp.insert = nextOp.insert.substr(offset, length);\n                        } else {\n                            // offset should === 0, length should === 1\n                            retOp.insert = nextOp.insert;\n                        }\n                        return retOp;\n                    }\n                } else {\n                    return {\n                        retain: Infinity\n                    };\n                }\n            };\n            Iterator.prototype.peek = function() {\n                return this.ops[this.index];\n            };\n            Iterator.prototype.peekLength = function() {\n                if (this.ops[this.index]) {\n                    // Should never return 0 if our index is being managed correctly\n                    return lib.length(this.ops[this.index]) - this.offset;\n                } else {\n                    return Infinity;\n                }\n            };\n            Iterator.prototype.peekType = function() {\n                if (this.ops[this.index]) {\n                    if (typeof this.ops[this.index][\"delete\"] === \"number\") {\n                        return \"delete\";\n                    } else if (typeof this.ops[this.index].retain === \"number\") {\n                        return \"retain\";\n                    } else {\n                        return \"insert\";\n                    }\n                }\n                return \"retain\";\n            };\n            Iterator.prototype.rest = function() {\n                if (!this.hasNext()) {\n                    return [];\n                } else if (this.offset === 0) {\n                    return this.ops.slice(this.index);\n                } else {\n                    var offset = this.offset;\n                    var index = this.index;\n                    var next = this.next();\n                    var rest = this.ops.slice(this.index);\n                    this.offset = offset;\n                    this.index = index;\n                    return [\n                        next\n                    ].concat(rest);\n                }\n            };\n            module1.exports = lib;\n        /***/ },\n        /* 21 */ /***/ function(module1, exports1) {\n            var clone = function() {\n                \"use strict\";\n                function _instanceof(obj, type) {\n                    return type != null && obj instanceof type;\n                }\n                var nativeMap;\n                try {\n                    nativeMap = Map;\n                } catch (_) {\n                    // maybe a reference error because no `Map`. Give it a dummy value that no\n                    // value will ever be an instanceof.\n                    nativeMap = function() {};\n                }\n                var nativeSet;\n                try {\n                    nativeSet = Set;\n                } catch (_) {\n                    nativeSet = function() {};\n                }\n                var nativePromise;\n                try {\n                    nativePromise = Promise;\n                } catch (_) {\n                    nativePromise = function() {};\n                }\n                /**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/ function clone(parent, circular, depth, prototype, includeNonEnumerable) {\n                    if (typeof circular === \"object\") {\n                        depth = circular.depth;\n                        prototype = circular.prototype;\n                        includeNonEnumerable = circular.includeNonEnumerable;\n                        circular = circular.circular;\n                    }\n                    // maintain two arrays for circular references, where corresponding parents\n                    // and children have the same index\n                    var allParents = [];\n                    var allChildren = [];\n                    var useBuffer = typeof Buffer != \"undefined\";\n                    if (typeof circular == \"undefined\") circular = true;\n                    if (typeof depth == \"undefined\") depth = Infinity;\n                    // recurse this function so we don't reset allParents and allChildren\n                    function _clone(parent, depth) {\n                        // cloning null always returns null\n                        if (parent === null) return null;\n                        if (depth === 0) return parent;\n                        var child;\n                        var proto;\n                        if (typeof parent != \"object\") {\n                            return parent;\n                        }\n                        if (_instanceof(parent, nativeMap)) {\n                            child = new nativeMap();\n                        } else if (_instanceof(parent, nativeSet)) {\n                            child = new nativeSet();\n                        } else if (_instanceof(parent, nativePromise)) {\n                            child = new nativePromise(function(resolve, reject) {\n                                parent.then(function(value) {\n                                    resolve(_clone(value, depth - 1));\n                                }, function(err) {\n                                    reject(_clone(err, depth - 1));\n                                });\n                            });\n                        } else if (clone.__isArray(parent)) {\n                            child = [];\n                        } else if (clone.__isRegExp(parent)) {\n                            child = new RegExp(parent.source, __getRegExpFlags(parent));\n                            if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n                        } else if (clone.__isDate(parent)) {\n                            child = new Date(parent.getTime());\n                        } else if (useBuffer && Buffer.isBuffer(parent)) {\n                            if (Buffer.allocUnsafe) {\n                                // Node.js >= 4.5.0\n                                child = Buffer.allocUnsafe(parent.length);\n                            } else {\n                                // Older Node.js versions\n                                child = new Buffer(parent.length);\n                            }\n                            parent.copy(child);\n                            return child;\n                        } else if (_instanceof(parent, Error)) {\n                            child = Object.create(parent);\n                        } else {\n                            if (typeof prototype == \"undefined\") {\n                                proto = Object.getPrototypeOf(parent);\n                                child = Object.create(proto);\n                            } else {\n                                child = Object.create(prototype);\n                                proto = prototype;\n                            }\n                        }\n                        if (circular) {\n                            var index = allParents.indexOf(parent);\n                            if (index != -1) {\n                                return allChildren[index];\n                            }\n                            allParents.push(parent);\n                            allChildren.push(child);\n                        }\n                        if (_instanceof(parent, nativeMap)) {\n                            parent.forEach(function(value, key) {\n                                var keyChild = _clone(key, depth - 1);\n                                var valueChild = _clone(value, depth - 1);\n                                child.set(keyChild, valueChild);\n                            });\n                        }\n                        if (_instanceof(parent, nativeSet)) {\n                            parent.forEach(function(value) {\n                                var entryChild = _clone(value, depth - 1);\n                                child.add(entryChild);\n                            });\n                        }\n                        for(var i in parent){\n                            var attrs;\n                            if (proto) {\n                                attrs = Object.getOwnPropertyDescriptor(proto, i);\n                            }\n                            if (attrs && attrs.set == null) {\n                                continue;\n                            }\n                            child[i] = _clone(parent[i], depth - 1);\n                        }\n                        if (Object.getOwnPropertySymbols) {\n                            var symbols = Object.getOwnPropertySymbols(parent);\n                            for(var i = 0; i < symbols.length; i++){\n                                // Don't need to worry about cloning a symbol because it is a primitive,\n                                // like a number or string.\n                                var symbol = symbols[i];\n                                var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n                                if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n                                    continue;\n                                }\n                                child[symbol] = _clone(parent[symbol], depth - 1);\n                                if (!descriptor.enumerable) {\n                                    Object.defineProperty(child, symbol, {\n                                        enumerable: false\n                                    });\n                                }\n                            }\n                        }\n                        if (includeNonEnumerable) {\n                            var allPropertyNames = Object.getOwnPropertyNames(parent);\n                            for(var i = 0; i < allPropertyNames.length; i++){\n                                var propertyName = allPropertyNames[i];\n                                var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n                                if (descriptor && descriptor.enumerable) {\n                                    continue;\n                                }\n                                child[propertyName] = _clone(parent[propertyName], depth - 1);\n                                Object.defineProperty(child, propertyName, {\n                                    enumerable: false\n                                });\n                            }\n                        }\n                        return child;\n                    }\n                    return _clone(parent, depth);\n                }\n                /**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */ clone.clonePrototype = function clonePrototype(parent) {\n                    if (parent === null) return null;\n                    var c = function() {};\n                    c.prototype = parent;\n                    return new c();\n                };\n                // private utility functions\n                function __objToStr(o) {\n                    return Object.prototype.toString.call(o);\n                }\n                clone.__objToStr = __objToStr;\n                function __isDate(o) {\n                    return typeof o === \"object\" && __objToStr(o) === \"[object Date]\";\n                }\n                clone.__isDate = __isDate;\n                function __isArray(o) {\n                    return typeof o === \"object\" && __objToStr(o) === \"[object Array]\";\n                }\n                clone.__isArray = __isArray;\n                function __isRegExp(o) {\n                    return typeof o === \"object\" && __objToStr(o) === \"[object RegExp]\";\n                }\n                clone.__isRegExp = __isRegExp;\n                function __getRegExpFlags(re) {\n                    var flags = \"\";\n                    if (re.global) flags += \"g\";\n                    if (re.ignoreCase) flags += \"i\";\n                    if (re.multiline) flags += \"m\";\n                    return flags;\n                }\n                clone.__getRegExpFlags = __getRegExpFlags;\n                return clone;\n            }();\n            if (typeof module1 === \"object\" && module1.exports) {\n                module1.exports = clone;\n            }\n        /***/ },\n        /* 22 */ /***/ function(module1, exports1, __nested_webpack_require_222007__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var _slicedToArray = function() {\n                function sliceIterator(arr, i) {\n                    var _arr = [];\n                    var _n = true;\n                    var _d = false;\n                    var _e = undefined;\n                    try {\n                        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n                            _arr.push(_s.value);\n                            if (i && _arr.length === i) break;\n                        }\n                    } catch (err) {\n                        _d = true;\n                        _e = err;\n                    } finally{\n                        try {\n                            if (!_n && _i[\"return\"]) _i[\"return\"]();\n                        } finally{\n                            if (_d) throw _e;\n                        }\n                    }\n                    return _arr;\n                }\n                return function(arr, i) {\n                    if (Array.isArray(arr)) {\n                        return arr;\n                    } else if (Symbol.iterator in Object(arr)) {\n                        return sliceIterator(arr, i);\n                    } else {\n                        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n                    }\n                };\n            }();\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _get = function get(object, property, receiver) {\n                if (object === null) object = Function.prototype;\n                var desc = Object.getOwnPropertyDescriptor(object, property);\n                if (desc === undefined) {\n                    var parent = Object.getPrototypeOf(object);\n                    if (parent === null) {\n                        return undefined;\n                    } else {\n                        return get(parent, property, receiver);\n                    }\n                } else if (\"value\" in desc) {\n                    return desc.value;\n                } else {\n                    var getter = desc.get;\n                    if (getter === undefined) {\n                        return undefined;\n                    }\n                    return getter.call(receiver);\n                }\n            };\n            var _parchment = __nested_webpack_require_222007__(0);\n            var _parchment2 = _interopRequireDefault(_parchment);\n            var _emitter = __nested_webpack_require_222007__(8);\n            var _emitter2 = _interopRequireDefault(_emitter);\n            var _block = __nested_webpack_require_222007__(4);\n            var _block2 = _interopRequireDefault(_block);\n            var _break = __nested_webpack_require_222007__(16);\n            var _break2 = _interopRequireDefault(_break);\n            var _code = __nested_webpack_require_222007__(13);\n            var _code2 = _interopRequireDefault(_code);\n            var _container = __nested_webpack_require_222007__(25);\n            var _container2 = _interopRequireDefault(_container);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            function isLine(blot) {\n                return blot instanceof _block2.default || blot instanceof _block.BlockEmbed;\n            }\n            var Scroll = function(_Parchment$Scroll) {\n                _inherits(Scroll, _Parchment$Scroll);\n                function Scroll(domNode, config) {\n                    _classCallCheck(this, Scroll);\n                    var _this = _possibleConstructorReturn(this, (Scroll.__proto__ || Object.getPrototypeOf(Scroll)).call(this, domNode));\n                    _this.emitter = config.emitter;\n                    if (Array.isArray(config.whitelist)) {\n                        _this.whitelist = config.whitelist.reduce(function(whitelist, format) {\n                            whitelist[format] = true;\n                            return whitelist;\n                        }, {});\n                    }\n                    // Some reason fixes composition issues with character languages in Windows/Chrome, Safari\n                    _this.domNode.addEventListener(\"DOMNodeInserted\", function() {});\n                    _this.optimize();\n                    _this.enable();\n                    return _this;\n                }\n                _createClass(Scroll, [\n                    {\n                        key: \"batchStart\",\n                        value: function batchStart() {\n                            this.batch = true;\n                        }\n                    },\n                    {\n                        key: \"batchEnd\",\n                        value: function batchEnd() {\n                            this.batch = false;\n                            this.optimize();\n                        }\n                    },\n                    {\n                        key: \"deleteAt\",\n                        value: function deleteAt(index, length) {\n                            var _line = this.line(index), _line2 = _slicedToArray(_line, 2), first = _line2[0], offset = _line2[1];\n                            var _line3 = this.line(index + length), _line4 = _slicedToArray(_line3, 1), last = _line4[0];\n                            _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), \"deleteAt\", this).call(this, index, length);\n                            if (last != null && first !== last && offset > 0) {\n                                if (first instanceof _block.BlockEmbed || last instanceof _block.BlockEmbed) {\n                                    this.optimize();\n                                    return;\n                                }\n                                if (first instanceof _code2.default) {\n                                    var newlineIndex = first.newlineIndex(first.length(), true);\n                                    if (newlineIndex > -1) {\n                                        first = first.split(newlineIndex + 1);\n                                        if (first === last) {\n                                            this.optimize();\n                                            return;\n                                        }\n                                    }\n                                } else if (last instanceof _code2.default) {\n                                    var _newlineIndex = last.newlineIndex(0);\n                                    if (_newlineIndex > -1) {\n                                        last.split(_newlineIndex + 1);\n                                    }\n                                }\n                                var ref = last.children.head instanceof _break2.default ? null : last.children.head;\n                                first.moveChildren(last, ref);\n                                first.remove();\n                            }\n                            this.optimize();\n                        }\n                    },\n                    {\n                        key: \"enable\",\n                        value: function enable() {\n                            var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n                            this.domNode.setAttribute(\"contenteditable\", enabled);\n                        }\n                    },\n                    {\n                        key: \"formatAt\",\n                        value: function formatAt(index, length, format, value) {\n                            if (this.whitelist != null && !this.whitelist[format]) return;\n                            _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), \"formatAt\", this).call(this, index, length, format, value);\n                            this.optimize();\n                        }\n                    },\n                    {\n                        key: \"insertAt\",\n                        value: function insertAt(index, value, def) {\n                            if (def != null && this.whitelist != null && !this.whitelist[value]) return;\n                            if (index >= this.length()) {\n                                if (def == null || _parchment2.default.query(value, _parchment2.default.Scope.BLOCK) == null) {\n                                    var blot = _parchment2.default.create(this.statics.defaultChild);\n                                    this.appendChild(blot);\n                                    if (def == null && value.endsWith(\"\\n\")) {\n                                        value = value.slice(0, -1);\n                                    }\n                                    blot.insertAt(0, value, def);\n                                } else {\n                                    var embed = _parchment2.default.create(value, def);\n                                    this.appendChild(embed);\n                                }\n                            } else {\n                                _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), \"insertAt\", this).call(this, index, value, def);\n                            }\n                            this.optimize();\n                        }\n                    },\n                    {\n                        key: \"insertBefore\",\n                        value: function insertBefore(blot, ref) {\n                            if (blot.statics.scope === _parchment2.default.Scope.INLINE_BLOT) {\n                                var wrapper = _parchment2.default.create(this.statics.defaultChild);\n                                wrapper.appendChild(blot);\n                                blot = wrapper;\n                            }\n                            _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), \"insertBefore\", this).call(this, blot, ref);\n                        }\n                    },\n                    {\n                        key: \"leaf\",\n                        value: function leaf(index) {\n                            return this.path(index).pop() || [\n                                null,\n                                -1\n                            ];\n                        }\n                    },\n                    {\n                        key: \"line\",\n                        value: function line(index) {\n                            if (index === this.length()) {\n                                return this.line(index - 1);\n                            }\n                            return this.descendant(isLine, index);\n                        }\n                    },\n                    {\n                        key: \"lines\",\n                        value: function lines() {\n                            var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n                            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;\n                            var getLines = function getLines(blot, index, length) {\n                                var lines = [], lengthLeft = length;\n                                blot.children.forEachAt(index, length, function(child, index, length) {\n                                    if (isLine(child)) {\n                                        lines.push(child);\n                                    } else if (child instanceof _parchment2.default.Container) {\n                                        lines = lines.concat(getLines(child, index, lengthLeft));\n                                    }\n                                    lengthLeft -= length;\n                                });\n                                return lines;\n                            };\n                            return getLines(this, index, length);\n                        }\n                    },\n                    {\n                        key: \"optimize\",\n                        value: function optimize() {\n                            var mutations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n                            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                            if (this.batch === true) return;\n                            _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), \"optimize\", this).call(this, mutations, context);\n                            if (mutations.length > 0) {\n                                this.emitter.emit(_emitter2.default.events.SCROLL_OPTIMIZE, mutations, context);\n                            }\n                        }\n                    },\n                    {\n                        key: \"path\",\n                        value: function path(index) {\n                            return _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), \"path\", this).call(this, index).slice(1); // Exclude self\n                        }\n                    },\n                    {\n                        key: \"update\",\n                        value: function update(mutations) {\n                            if (this.batch === true) return;\n                            var source = _emitter2.default.sources.USER;\n                            if (typeof mutations === \"string\") {\n                                source = mutations;\n                            }\n                            if (!Array.isArray(mutations)) {\n                                mutations = this.observer.takeRecords();\n                            }\n                            if (mutations.length > 0) {\n                                this.emitter.emit(_emitter2.default.events.SCROLL_BEFORE_UPDATE, source, mutations);\n                            }\n                            _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), \"update\", this).call(this, mutations.concat([])); // pass copy\n                            if (mutations.length > 0) {\n                                this.emitter.emit(_emitter2.default.events.SCROLL_UPDATE, source, mutations);\n                            }\n                        }\n                    }\n                ]);\n                return Scroll;\n            }(_parchment2.default.Scroll);\n            Scroll.blotName = \"scroll\";\n            Scroll.className = \"ql-editor\";\n            Scroll.tagName = \"DIV\";\n            Scroll.defaultChild = \"block\";\n            Scroll.allowedChildren = [\n                _block2.default,\n                _block.BlockEmbed,\n                _container2.default\n            ];\n            exports1.default = Scroll;\n        /***/ },\n        /* 23 */ /***/ function(module1, exports1, __nested_webpack_require_238923__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.SHORTKEY = exports1.default = undefined;\n            var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function(obj) {\n                return typeof obj;\n            } : function(obj) {\n                return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n            var _slicedToArray = function() {\n                function sliceIterator(arr, i) {\n                    var _arr = [];\n                    var _n = true;\n                    var _d = false;\n                    var _e = undefined;\n                    try {\n                        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n                            _arr.push(_s.value);\n                            if (i && _arr.length === i) break;\n                        }\n                    } catch (err) {\n                        _d = true;\n                        _e = err;\n                    } finally{\n                        try {\n                            if (!_n && _i[\"return\"]) _i[\"return\"]();\n                        } finally{\n                            if (_d) throw _e;\n                        }\n                    }\n                    return _arr;\n                }\n                return function(arr, i) {\n                    if (Array.isArray(arr)) {\n                        return arr;\n                    } else if (Symbol.iterator in Object(arr)) {\n                        return sliceIterator(arr, i);\n                    } else {\n                        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n                    }\n                };\n            }();\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _clone = __nested_webpack_require_238923__(21);\n            var _clone2 = _interopRequireDefault(_clone);\n            var _deepEqual = __nested_webpack_require_238923__(11);\n            var _deepEqual2 = _interopRequireDefault(_deepEqual);\n            var _extend = __nested_webpack_require_238923__(3);\n            var _extend2 = _interopRequireDefault(_extend);\n            var _quillDelta = __nested_webpack_require_238923__(2);\n            var _quillDelta2 = _interopRequireDefault(_quillDelta);\n            var _op = __nested_webpack_require_238923__(20);\n            var _op2 = _interopRequireDefault(_op);\n            var _parchment = __nested_webpack_require_238923__(0);\n            var _parchment2 = _interopRequireDefault(_parchment);\n            var _quill = __nested_webpack_require_238923__(5);\n            var _quill2 = _interopRequireDefault(_quill);\n            var _logger = __nested_webpack_require_238923__(10);\n            var _logger2 = _interopRequireDefault(_logger);\n            var _module = __nested_webpack_require_238923__(9);\n            var _module2 = _interopRequireDefault(_module);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _defineProperty(obj, key, value) {\n                if (key in obj) {\n                    Object.defineProperty(obj, key, {\n                        value: value,\n                        enumerable: true,\n                        configurable: true,\n                        writable: true\n                    });\n                } else {\n                    obj[key] = value;\n                }\n                return obj;\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var debug = (0, _logger2.default)(\"quill:keyboard\");\n            var SHORTKEY = /Mac/i.test(navigator.platform) ? \"metaKey\" : \"ctrlKey\";\n            var Keyboard = function(_Module) {\n                _inherits(Keyboard, _Module);\n                _createClass(Keyboard, null, [\n                    {\n                        key: \"match\",\n                        value: function match(evt, binding) {\n                            binding = normalize(binding);\n                            if ([\n                                \"altKey\",\n                                \"ctrlKey\",\n                                \"metaKey\",\n                                \"shiftKey\"\n                            ].some(function(key) {\n                                return !!binding[key] !== evt[key] && binding[key] !== null;\n                            })) {\n                                return false;\n                            }\n                            return binding.key === (evt.which || evt.keyCode);\n                        }\n                    }\n                ]);\n                function Keyboard(quill, options) {\n                    _classCallCheck(this, Keyboard);\n                    var _this = _possibleConstructorReturn(this, (Keyboard.__proto__ || Object.getPrototypeOf(Keyboard)).call(this, quill, options));\n                    _this.bindings = {};\n                    Object.keys(_this.options.bindings).forEach(function(name) {\n                        if (name === \"list autofill\" && quill.scroll.whitelist != null && !quill.scroll.whitelist[\"list\"]) {\n                            return;\n                        }\n                        if (_this.options.bindings[name]) {\n                            _this.addBinding(_this.options.bindings[name]);\n                        }\n                    });\n                    _this.addBinding({\n                        key: Keyboard.keys.ENTER,\n                        shiftKey: null\n                    }, handleEnter);\n                    _this.addBinding({\n                        key: Keyboard.keys.ENTER,\n                        metaKey: null,\n                        ctrlKey: null,\n                        altKey: null\n                    }, function() {});\n                    if (/Firefox/i.test(navigator.userAgent)) {\n                        // Need to handle delete and backspace for Firefox in the general case #1171\n                        _this.addBinding({\n                            key: Keyboard.keys.BACKSPACE\n                        }, {\n                            collapsed: true\n                        }, handleBackspace);\n                        _this.addBinding({\n                            key: Keyboard.keys.DELETE\n                        }, {\n                            collapsed: true\n                        }, handleDelete);\n                    } else {\n                        _this.addBinding({\n                            key: Keyboard.keys.BACKSPACE\n                        }, {\n                            collapsed: true,\n                            prefix: /^.?$/\n                        }, handleBackspace);\n                        _this.addBinding({\n                            key: Keyboard.keys.DELETE\n                        }, {\n                            collapsed: true,\n                            suffix: /^.?$/\n                        }, handleDelete);\n                    }\n                    _this.addBinding({\n                        key: Keyboard.keys.BACKSPACE\n                    }, {\n                        collapsed: false\n                    }, handleDeleteRange);\n                    _this.addBinding({\n                        key: Keyboard.keys.DELETE\n                    }, {\n                        collapsed: false\n                    }, handleDeleteRange);\n                    _this.addBinding({\n                        key: Keyboard.keys.BACKSPACE,\n                        altKey: null,\n                        ctrlKey: null,\n                        metaKey: null,\n                        shiftKey: null\n                    }, {\n                        collapsed: true,\n                        offset: 0\n                    }, handleBackspace);\n                    _this.listen();\n                    return _this;\n                }\n                _createClass(Keyboard, [\n                    {\n                        key: \"addBinding\",\n                        value: function addBinding(key) {\n                            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                            var handler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n                            var binding = normalize(key);\n                            if (binding == null || binding.key == null) {\n                                return debug.warn(\"Attempted to add invalid keyboard binding\", binding);\n                            }\n                            if (typeof context === \"function\") {\n                                context = {\n                                    handler: context\n                                };\n                            }\n                            if (typeof handler === \"function\") {\n                                handler = {\n                                    handler: handler\n                                };\n                            }\n                            binding = (0, _extend2.default)(binding, context, handler);\n                            this.bindings[binding.key] = this.bindings[binding.key] || [];\n                            this.bindings[binding.key].push(binding);\n                        }\n                    },\n                    {\n                        key: \"listen\",\n                        value: function listen() {\n                            var _this2 = this;\n                            this.quill.root.addEventListener(\"keydown\", function(evt) {\n                                if (evt.defaultPrevented) return;\n                                var which = evt.which || evt.keyCode;\n                                var bindings = (_this2.bindings[which] || []).filter(function(binding) {\n                                    return Keyboard.match(evt, binding);\n                                });\n                                if (bindings.length === 0) return;\n                                var range = _this2.quill.getSelection();\n                                if (range == null || !_this2.quill.hasFocus()) return;\n                                var _quill$getLine = _this2.quill.getLine(range.index), _quill$getLine2 = _slicedToArray(_quill$getLine, 2), line = _quill$getLine2[0], offset = _quill$getLine2[1];\n                                var _quill$getLeaf = _this2.quill.getLeaf(range.index), _quill$getLeaf2 = _slicedToArray(_quill$getLeaf, 2), leafStart = _quill$getLeaf2[0], offsetStart = _quill$getLeaf2[1];\n                                var _ref = range.length === 0 ? [\n                                    leafStart,\n                                    offsetStart\n                                ] : _this2.quill.getLeaf(range.index + range.length), _ref2 = _slicedToArray(_ref, 2), leafEnd = _ref2[0], offsetEnd = _ref2[1];\n                                var prefixText = leafStart instanceof _parchment2.default.Text ? leafStart.value().slice(0, offsetStart) : \"\";\n                                var suffixText = leafEnd instanceof _parchment2.default.Text ? leafEnd.value().slice(offsetEnd) : \"\";\n                                var curContext = {\n                                    collapsed: range.length === 0,\n                                    empty: range.length === 0 && line.length() <= 1,\n                                    format: _this2.quill.getFormat(range),\n                                    offset: offset,\n                                    prefix: prefixText,\n                                    suffix: suffixText\n                                };\n                                var prevented = bindings.some(function(binding) {\n                                    if (binding.collapsed != null && binding.collapsed !== curContext.collapsed) return false;\n                                    if (binding.empty != null && binding.empty !== curContext.empty) return false;\n                                    if (binding.offset != null && binding.offset !== curContext.offset) return false;\n                                    if (Array.isArray(binding.format)) {\n                                        // any format is present\n                                        if (binding.format.every(function(name) {\n                                            return curContext.format[name] == null;\n                                        })) {\n                                            return false;\n                                        }\n                                    } else if (_typeof(binding.format) === \"object\") {\n                                        // all formats must match\n                                        if (!Object.keys(binding.format).every(function(name) {\n                                            if (binding.format[name] === true) return curContext.format[name] != null;\n                                            if (binding.format[name] === false) return curContext.format[name] == null;\n                                            return (0, _deepEqual2.default)(binding.format[name], curContext.format[name]);\n                                        })) {\n                                            return false;\n                                        }\n                                    }\n                                    if (binding.prefix != null && !binding.prefix.test(curContext.prefix)) return false;\n                                    if (binding.suffix != null && !binding.suffix.test(curContext.suffix)) return false;\n                                    return binding.handler.call(_this2, range, curContext) !== true;\n                                });\n                                if (prevented) {\n                                    evt.preventDefault();\n                                }\n                            });\n                        }\n                    }\n                ]);\n                return Keyboard;\n            }(_module2.default);\n            Keyboard.keys = {\n                BACKSPACE: 8,\n                TAB: 9,\n                ENTER: 13,\n                ESCAPE: 27,\n                LEFT: 37,\n                UP: 38,\n                RIGHT: 39,\n                DOWN: 40,\n                DELETE: 46\n            };\n            Keyboard.DEFAULTS = {\n                bindings: {\n                    \"bold\": makeFormatHandler(\"bold\"),\n                    \"italic\": makeFormatHandler(\"italic\"),\n                    \"underline\": makeFormatHandler(\"underline\"),\n                    \"indent\": {\n                        // highlight tab or tab at beginning of list, indent or blockquote\n                        key: Keyboard.keys.TAB,\n                        format: [\n                            \"blockquote\",\n                            \"indent\",\n                            \"list\"\n                        ],\n                        handler: function handler(range, context) {\n                            if (context.collapsed && context.offset !== 0) return true;\n                            this.quill.format(\"indent\", \"+1\", _quill2.default.sources.USER);\n                        }\n                    },\n                    \"outdent\": {\n                        key: Keyboard.keys.TAB,\n                        shiftKey: true,\n                        format: [\n                            \"blockquote\",\n                            \"indent\",\n                            \"list\"\n                        ],\n                        // highlight tab or tab at beginning of list, indent or blockquote\n                        handler: function handler(range, context) {\n                            if (context.collapsed && context.offset !== 0) return true;\n                            this.quill.format(\"indent\", \"-1\", _quill2.default.sources.USER);\n                        }\n                    },\n                    \"outdent backspace\": {\n                        key: Keyboard.keys.BACKSPACE,\n                        collapsed: true,\n                        shiftKey: null,\n                        metaKey: null,\n                        ctrlKey: null,\n                        altKey: null,\n                        format: [\n                            \"indent\",\n                            \"list\"\n                        ],\n                        offset: 0,\n                        handler: function handler(range, context) {\n                            if (context.format.indent != null) {\n                                this.quill.format(\"indent\", \"-1\", _quill2.default.sources.USER);\n                            } else if (context.format.list != null) {\n                                this.quill.format(\"list\", false, _quill2.default.sources.USER);\n                            }\n                        }\n                    },\n                    \"indent code-block\": makeCodeBlockHandler(true),\n                    \"outdent code-block\": makeCodeBlockHandler(false),\n                    \"remove tab\": {\n                        key: Keyboard.keys.TAB,\n                        shiftKey: true,\n                        collapsed: true,\n                        prefix: /\\t$/,\n                        handler: function handler(range) {\n                            this.quill.deleteText(range.index - 1, 1, _quill2.default.sources.USER);\n                        }\n                    },\n                    \"tab\": {\n                        key: Keyboard.keys.TAB,\n                        handler: function handler(range) {\n                            this.quill.history.cutoff();\n                            var delta = new _quillDelta2.default().retain(range.index).delete(range.length).insert(\"\t\");\n                            this.quill.updateContents(delta, _quill2.default.sources.USER);\n                            this.quill.history.cutoff();\n                            this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);\n                        }\n                    },\n                    \"list empty enter\": {\n                        key: Keyboard.keys.ENTER,\n                        collapsed: true,\n                        format: [\n                            \"list\"\n                        ],\n                        empty: true,\n                        handler: function handler(range, context) {\n                            this.quill.format(\"list\", false, _quill2.default.sources.USER);\n                            if (context.format.indent) {\n                                this.quill.format(\"indent\", false, _quill2.default.sources.USER);\n                            }\n                        }\n                    },\n                    \"checklist enter\": {\n                        key: Keyboard.keys.ENTER,\n                        collapsed: true,\n                        format: {\n                            list: \"checked\"\n                        },\n                        handler: function handler(range) {\n                            var _quill$getLine3 = this.quill.getLine(range.index), _quill$getLine4 = _slicedToArray(_quill$getLine3, 2), line = _quill$getLine4[0], offset = _quill$getLine4[1];\n                            var formats = (0, _extend2.default)({}, line.formats(), {\n                                list: \"checked\"\n                            });\n                            var delta = new _quillDelta2.default().retain(range.index).insert(\"\\n\", formats).retain(line.length() - offset - 1).retain(1, {\n                                list: \"unchecked\"\n                            });\n                            this.quill.updateContents(delta, _quill2.default.sources.USER);\n                            this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);\n                            this.quill.scrollIntoView();\n                        }\n                    },\n                    \"header enter\": {\n                        key: Keyboard.keys.ENTER,\n                        collapsed: true,\n                        format: [\n                            \"header\"\n                        ],\n                        suffix: /^$/,\n                        handler: function handler(range, context) {\n                            var _quill$getLine5 = this.quill.getLine(range.index), _quill$getLine6 = _slicedToArray(_quill$getLine5, 2), line = _quill$getLine6[0], offset = _quill$getLine6[1];\n                            var delta = new _quillDelta2.default().retain(range.index).insert(\"\\n\", context.format).retain(line.length() - offset - 1).retain(1, {\n                                header: null\n                            });\n                            this.quill.updateContents(delta, _quill2.default.sources.USER);\n                            this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);\n                            this.quill.scrollIntoView();\n                        }\n                    },\n                    \"list autofill\": {\n                        key: \" \",\n                        collapsed: true,\n                        format: {\n                            list: false\n                        },\n                        prefix: /^\\s*?(\\d+\\.|-|\\*|\\[ ?\\]|\\[x\\])$/,\n                        handler: function handler(range, context) {\n                            var length = context.prefix.length;\n                            var _quill$getLine7 = this.quill.getLine(range.index), _quill$getLine8 = _slicedToArray(_quill$getLine7, 2), line = _quill$getLine8[0], offset = _quill$getLine8[1];\n                            if (offset > length) return true;\n                            var value = void 0;\n                            switch(context.prefix.trim()){\n                                case \"[]\":\n                                case \"[ ]\":\n                                    value = \"unchecked\";\n                                    break;\n                                case \"[x]\":\n                                    value = \"checked\";\n                                    break;\n                                case \"-\":\n                                case \"*\":\n                                    value = \"bullet\";\n                                    break;\n                                default:\n                                    value = \"ordered\";\n                            }\n                            this.quill.insertText(range.index, \" \", _quill2.default.sources.USER);\n                            this.quill.history.cutoff();\n                            var delta = new _quillDelta2.default().retain(range.index - offset).delete(length + 1).retain(line.length() - 2 - offset).retain(1, {\n                                list: value\n                            });\n                            this.quill.updateContents(delta, _quill2.default.sources.USER);\n                            this.quill.history.cutoff();\n                            this.quill.setSelection(range.index - length, _quill2.default.sources.SILENT);\n                        }\n                    },\n                    \"code exit\": {\n                        key: Keyboard.keys.ENTER,\n                        collapsed: true,\n                        format: [\n                            \"code-block\"\n                        ],\n                        prefix: /\\n\\n$/,\n                        suffix: /^\\s+$/,\n                        handler: function handler(range) {\n                            var _quill$getLine9 = this.quill.getLine(range.index), _quill$getLine10 = _slicedToArray(_quill$getLine9, 2), line = _quill$getLine10[0], offset = _quill$getLine10[1];\n                            var delta = new _quillDelta2.default().retain(range.index + line.length() - offset - 2).retain(1, {\n                                \"code-block\": null\n                            }).delete(1);\n                            this.quill.updateContents(delta, _quill2.default.sources.USER);\n                        }\n                    },\n                    \"embed left\": makeEmbedArrowHandler(Keyboard.keys.LEFT, false),\n                    \"embed left shift\": makeEmbedArrowHandler(Keyboard.keys.LEFT, true),\n                    \"embed right\": makeEmbedArrowHandler(Keyboard.keys.RIGHT, false),\n                    \"embed right shift\": makeEmbedArrowHandler(Keyboard.keys.RIGHT, true)\n                }\n            };\n            function makeEmbedArrowHandler(key, shiftKey) {\n                var _ref3;\n                var where = key === Keyboard.keys.LEFT ? \"prefix\" : \"suffix\";\n                return _ref3 = {\n                    key: key,\n                    shiftKey: shiftKey,\n                    altKey: null\n                }, _defineProperty(_ref3, where, /^$/), _defineProperty(_ref3, \"handler\", function handler(range) {\n                    var index = range.index;\n                    if (key === Keyboard.keys.RIGHT) {\n                        index += range.length + 1;\n                    }\n                    var _quill$getLeaf3 = this.quill.getLeaf(index), _quill$getLeaf4 = _slicedToArray(_quill$getLeaf3, 1), leaf = _quill$getLeaf4[0];\n                    if (!(leaf instanceof _parchment2.default.Embed)) return true;\n                    if (key === Keyboard.keys.LEFT) {\n                        if (shiftKey) {\n                            this.quill.setSelection(range.index - 1, range.length + 1, _quill2.default.sources.USER);\n                        } else {\n                            this.quill.setSelection(range.index - 1, _quill2.default.sources.USER);\n                        }\n                    } else {\n                        if (shiftKey) {\n                            this.quill.setSelection(range.index, range.length + 1, _quill2.default.sources.USER);\n                        } else {\n                            this.quill.setSelection(range.index + range.length + 1, _quill2.default.sources.USER);\n                        }\n                    }\n                    return false;\n                }), _ref3;\n            }\n            function handleBackspace(range, context) {\n                if (range.index === 0 || this.quill.getLength() <= 1) return;\n                var _quill$getLine11 = this.quill.getLine(range.index), _quill$getLine12 = _slicedToArray(_quill$getLine11, 1), line = _quill$getLine12[0];\n                var formats = {};\n                if (context.offset === 0) {\n                    var _quill$getLine13 = this.quill.getLine(range.index - 1), _quill$getLine14 = _slicedToArray(_quill$getLine13, 1), prev = _quill$getLine14[0];\n                    if (prev != null && prev.length() > 1) {\n                        var curFormats = line.formats();\n                        var prevFormats = this.quill.getFormat(range.index - 1, 1);\n                        formats = _op2.default.attributes.diff(curFormats, prevFormats) || {};\n                    }\n                }\n                // Check for astral symbols\n                var length = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]$/.test(context.prefix) ? 2 : 1;\n                this.quill.deleteText(range.index - length, length, _quill2.default.sources.USER);\n                if (Object.keys(formats).length > 0) {\n                    this.quill.formatLine(range.index - length, length, formats, _quill2.default.sources.USER);\n                }\n                this.quill.focus();\n            }\n            function handleDelete(range, context) {\n                // Check for astral symbols\n                var length = /^[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/.test(context.suffix) ? 2 : 1;\n                if (range.index >= this.quill.getLength() - length) return;\n                var formats = {}, nextLength = 0;\n                var _quill$getLine15 = this.quill.getLine(range.index), _quill$getLine16 = _slicedToArray(_quill$getLine15, 1), line = _quill$getLine16[0];\n                if (context.offset >= line.length() - 1) {\n                    var _quill$getLine17 = this.quill.getLine(range.index + 1), _quill$getLine18 = _slicedToArray(_quill$getLine17, 1), next = _quill$getLine18[0];\n                    if (next) {\n                        var curFormats = line.formats();\n                        var nextFormats = this.quill.getFormat(range.index, 1);\n                        formats = _op2.default.attributes.diff(curFormats, nextFormats) || {};\n                        nextLength = next.length();\n                    }\n                }\n                this.quill.deleteText(range.index, length, _quill2.default.sources.USER);\n                if (Object.keys(formats).length > 0) {\n                    this.quill.formatLine(range.index + nextLength - 1, length, formats, _quill2.default.sources.USER);\n                }\n            }\n            function handleDeleteRange(range) {\n                var lines = this.quill.getLines(range);\n                var formats = {};\n                if (lines.length > 1) {\n                    var firstFormats = lines[0].formats();\n                    var lastFormats = lines[lines.length - 1].formats();\n                    formats = _op2.default.attributes.diff(lastFormats, firstFormats) || {};\n                }\n                this.quill.deleteText(range, _quill2.default.sources.USER);\n                if (Object.keys(formats).length > 0) {\n                    this.quill.formatLine(range.index, 1, formats, _quill2.default.sources.USER);\n                }\n                this.quill.setSelection(range.index, _quill2.default.sources.SILENT);\n                this.quill.focus();\n            }\n            function handleEnter(range, context) {\n                var _this3 = this;\n                if (range.length > 0) {\n                    this.quill.scroll.deleteAt(range.index, range.length); // So we do not trigger text-change\n                }\n                var lineFormats = Object.keys(context.format).reduce(function(lineFormats, format) {\n                    if (_parchment2.default.query(format, _parchment2.default.Scope.BLOCK) && !Array.isArray(context.format[format])) {\n                        lineFormats[format] = context.format[format];\n                    }\n                    return lineFormats;\n                }, {});\n                this.quill.insertText(range.index, \"\\n\", lineFormats, _quill2.default.sources.USER);\n                // Earlier scroll.deleteAt might have messed up our selection,\n                // so insertText's built in selection preservation is not reliable\n                this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);\n                this.quill.focus();\n                Object.keys(context.format).forEach(function(name) {\n                    if (lineFormats[name] != null) return;\n                    if (Array.isArray(context.format[name])) return;\n                    if (name === \"link\") return;\n                    _this3.quill.format(name, context.format[name], _quill2.default.sources.USER);\n                });\n            }\n            function makeCodeBlockHandler(indent) {\n                return {\n                    key: Keyboard.keys.TAB,\n                    shiftKey: !indent,\n                    format: {\n                        \"code-block\": true\n                    },\n                    handler: function handler(range) {\n                        var CodeBlock = _parchment2.default.query(\"code-block\");\n                        var index = range.index, length = range.length;\n                        var _quill$scroll$descend = this.quill.scroll.descendant(CodeBlock, index), _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2), block = _quill$scroll$descend2[0], offset = _quill$scroll$descend2[1];\n                        if (block == null) return;\n                        var scrollIndex = this.quill.getIndex(block);\n                        var start = block.newlineIndex(offset, true) + 1;\n                        var end = block.newlineIndex(scrollIndex + offset + length);\n                        var lines = block.domNode.textContent.slice(start, end).split(\"\\n\");\n                        offset = 0;\n                        lines.forEach(function(line, i) {\n                            if (indent) {\n                                block.insertAt(start + offset, CodeBlock.TAB);\n                                offset += CodeBlock.TAB.length;\n                                if (i === 0) {\n                                    index += CodeBlock.TAB.length;\n                                } else {\n                                    length += CodeBlock.TAB.length;\n                                }\n                            } else if (line.startsWith(CodeBlock.TAB)) {\n                                block.deleteAt(start + offset, CodeBlock.TAB.length);\n                                offset -= CodeBlock.TAB.length;\n                                if (i === 0) {\n                                    index -= CodeBlock.TAB.length;\n                                } else {\n                                    length -= CodeBlock.TAB.length;\n                                }\n                            }\n                            offset += line.length + 1;\n                        });\n                        this.quill.update(_quill2.default.sources.USER);\n                        this.quill.setSelection(index, length, _quill2.default.sources.SILENT);\n                    }\n                };\n            }\n            function makeFormatHandler(format) {\n                return {\n                    key: format[0].toUpperCase(),\n                    shortKey: true,\n                    handler: function handler(range, context) {\n                        this.quill.format(format, !context.format[format], _quill2.default.sources.USER);\n                    }\n                };\n            }\n            function normalize(binding) {\n                if (typeof binding === \"string\" || typeof binding === \"number\") {\n                    return normalize({\n                        key: binding\n                    });\n                }\n                if ((typeof binding === \"undefined\" ? \"undefined\" : _typeof(binding)) === \"object\") {\n                    binding = (0, _clone2.default)(binding, false);\n                }\n                if (typeof binding.key === \"string\") {\n                    if (Keyboard.keys[binding.key.toUpperCase()] != null) {\n                        binding.key = Keyboard.keys[binding.key.toUpperCase()];\n                    } else if (binding.key.length === 1) {\n                        binding.key = binding.key.toUpperCase().charCodeAt(0);\n                    } else {\n                        return null;\n                    }\n                }\n                if (binding.shortKey) {\n                    binding[SHORTKEY] = binding.shortKey;\n                    delete binding.shortKey;\n                }\n                return binding;\n            }\n            exports1.default = Keyboard;\n            exports1.SHORTKEY = SHORTKEY;\n        /***/ },\n        /* 24 */ /***/ function(module1, exports1, __nested_webpack_require_275926__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var _slicedToArray = function() {\n                function sliceIterator(arr, i) {\n                    var _arr = [];\n                    var _n = true;\n                    var _d = false;\n                    var _e = undefined;\n                    try {\n                        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n                            _arr.push(_s.value);\n                            if (i && _arr.length === i) break;\n                        }\n                    } catch (err) {\n                        _d = true;\n                        _e = err;\n                    } finally{\n                        try {\n                            if (!_n && _i[\"return\"]) _i[\"return\"]();\n                        } finally{\n                            if (_d) throw _e;\n                        }\n                    }\n                    return _arr;\n                }\n                return function(arr, i) {\n                    if (Array.isArray(arr)) {\n                        return arr;\n                    } else if (Symbol.iterator in Object(arr)) {\n                        return sliceIterator(arr, i);\n                    } else {\n                        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n                    }\n                };\n            }();\n            var _get = function get(object, property, receiver) {\n                if (object === null) object = Function.prototype;\n                var desc = Object.getOwnPropertyDescriptor(object, property);\n                if (desc === undefined) {\n                    var parent = Object.getPrototypeOf(object);\n                    if (parent === null) {\n                        return undefined;\n                    } else {\n                        return get(parent, property, receiver);\n                    }\n                } else if (\"value\" in desc) {\n                    return desc.value;\n                } else {\n                    var getter = desc.get;\n                    if (getter === undefined) {\n                        return undefined;\n                    }\n                    return getter.call(receiver);\n                }\n            };\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _parchment = __nested_webpack_require_275926__(0);\n            var _parchment2 = _interopRequireDefault(_parchment);\n            var _text = __nested_webpack_require_275926__(7);\n            var _text2 = _interopRequireDefault(_text);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var Cursor = function(_Parchment$Embed) {\n                _inherits(Cursor, _Parchment$Embed);\n                _createClass(Cursor, null, [\n                    {\n                        key: \"value\",\n                        value: function value() {\n                            return undefined;\n                        }\n                    }\n                ]);\n                function Cursor(domNode, selection) {\n                    _classCallCheck(this, Cursor);\n                    var _this = _possibleConstructorReturn(this, (Cursor.__proto__ || Object.getPrototypeOf(Cursor)).call(this, domNode));\n                    _this.selection = selection;\n                    _this.textNode = document.createTextNode(Cursor.CONTENTS);\n                    _this.domNode.appendChild(_this.textNode);\n                    _this._length = 0;\n                    return _this;\n                }\n                _createClass(Cursor, [\n                    {\n                        key: \"detach\",\n                        value: function detach() {\n                            // super.detach() will also clear domNode.__blot\n                            if (this.parent != null) this.parent.removeChild(this);\n                        }\n                    },\n                    {\n                        key: \"format\",\n                        value: function format(name, value) {\n                            if (this._length !== 0) {\n                                return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), \"format\", this).call(this, name, value);\n                            }\n                            var target = this, index = 0;\n                            while(target != null && target.statics.scope !== _parchment2.default.Scope.BLOCK_BLOT){\n                                index += target.offset(target.parent);\n                                target = target.parent;\n                            }\n                            if (target != null) {\n                                this._length = Cursor.CONTENTS.length;\n                                target.optimize();\n                                target.formatAt(index, Cursor.CONTENTS.length, name, value);\n                                this._length = 0;\n                            }\n                        }\n                    },\n                    {\n                        key: \"index\",\n                        value: function index(node, offset) {\n                            if (node === this.textNode) return 0;\n                            return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), \"index\", this).call(this, node, offset);\n                        }\n                    },\n                    {\n                        key: \"length\",\n                        value: function length() {\n                            return this._length;\n                        }\n                    },\n                    {\n                        key: \"position\",\n                        value: function position() {\n                            return [\n                                this.textNode,\n                                this.textNode.data.length\n                            ];\n                        }\n                    },\n                    {\n                        key: \"remove\",\n                        value: function remove() {\n                            _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), \"remove\", this).call(this);\n                            this.parent = null;\n                        }\n                    },\n                    {\n                        key: \"restore\",\n                        value: function restore() {\n                            if (this.selection.composing || this.parent == null) return;\n                            var textNode = this.textNode;\n                            var range = this.selection.getNativeRange();\n                            var restoreText = void 0, start = void 0, end = void 0;\n                            if (range != null && range.start.node === textNode && range.end.node === textNode) {\n                                var _ref = [\n                                    textNode,\n                                    range.start.offset,\n                                    range.end.offset\n                                ];\n                                restoreText = _ref[0];\n                                start = _ref[1];\n                                end = _ref[2];\n                            }\n                            // Link format will insert text outside of anchor tag\n                            while(this.domNode.lastChild != null && this.domNode.lastChild !== this.textNode){\n                                this.domNode.parentNode.insertBefore(this.domNode.lastChild, this.domNode);\n                            }\n                            if (this.textNode.data !== Cursor.CONTENTS) {\n                                var text = this.textNode.data.split(Cursor.CONTENTS).join(\"\");\n                                if (this.next instanceof _text2.default) {\n                                    restoreText = this.next.domNode;\n                                    this.next.insertAt(0, text);\n                                    this.textNode.data = Cursor.CONTENTS;\n                                } else {\n                                    this.textNode.data = text;\n                                    this.parent.insertBefore(_parchment2.default.create(this.textNode), this);\n                                    this.textNode = document.createTextNode(Cursor.CONTENTS);\n                                    this.domNode.appendChild(this.textNode);\n                                }\n                            }\n                            this.remove();\n                            if (start != null) {\n                                var _map = [\n                                    start,\n                                    end\n                                ].map(function(offset) {\n                                    return Math.max(0, Math.min(restoreText.data.length, offset - 1));\n                                });\n                                var _map2 = _slicedToArray(_map, 2);\n                                start = _map2[0];\n                                end = _map2[1];\n                                return {\n                                    startNode: restoreText,\n                                    startOffset: start,\n                                    endNode: restoreText,\n                                    endOffset: end\n                                };\n                            }\n                        }\n                    },\n                    {\n                        key: \"update\",\n                        value: function update(mutations, context) {\n                            var _this2 = this;\n                            if (mutations.some(function(mutation) {\n                                return mutation.type === \"characterData\" && mutation.target === _this2.textNode;\n                            })) {\n                                var range = this.restore();\n                                if (range) context.range = range;\n                            }\n                        }\n                    },\n                    {\n                        key: \"value\",\n                        value: function value() {\n                            return \"\";\n                        }\n                    }\n                ]);\n                return Cursor;\n            }(_parchment2.default.Embed);\n            Cursor.blotName = \"cursor\";\n            Cursor.className = \"ql-cursor\";\n            Cursor.tagName = \"span\";\n            Cursor.CONTENTS = \"\\uFEFF\"; // Zero width no break space\n            exports1.default = Cursor;\n        /***/ },\n        /* 25 */ /***/ function(module1, exports1, __nested_webpack_require_288843__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var _parchment = __nested_webpack_require_288843__(0);\n            var _parchment2 = _interopRequireDefault(_parchment);\n            var _block = __nested_webpack_require_288843__(4);\n            var _block2 = _interopRequireDefault(_block);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var Container = function(_Parchment$Container) {\n                _inherits(Container, _Parchment$Container);\n                function Container() {\n                    _classCallCheck(this, Container);\n                    return _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).apply(this, arguments));\n                }\n                return Container;\n            }(_parchment2.default.Container);\n            Container.allowedChildren = [\n                _block2.default,\n                _block.BlockEmbed,\n                Container\n            ];\n            exports1.default = Container;\n        /***/ },\n        /* 26 */ /***/ function(module1, exports1, __nested_webpack_require_291431__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.ColorStyle = exports1.ColorClass = exports1.ColorAttributor = undefined;\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _get = function get(object, property, receiver) {\n                if (object === null) object = Function.prototype;\n                var desc = Object.getOwnPropertyDescriptor(object, property);\n                if (desc === undefined) {\n                    var parent = Object.getPrototypeOf(object);\n                    if (parent === null) {\n                        return undefined;\n                    } else {\n                        return get(parent, property, receiver);\n                    }\n                } else if (\"value\" in desc) {\n                    return desc.value;\n                } else {\n                    var getter = desc.get;\n                    if (getter === undefined) {\n                        return undefined;\n                    }\n                    return getter.call(receiver);\n                }\n            };\n            var _parchment = __nested_webpack_require_291431__(0);\n            var _parchment2 = _interopRequireDefault(_parchment);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var ColorAttributor = function(_Parchment$Attributor) {\n                _inherits(ColorAttributor, _Parchment$Attributor);\n                function ColorAttributor() {\n                    _classCallCheck(this, ColorAttributor);\n                    return _possibleConstructorReturn(this, (ColorAttributor.__proto__ || Object.getPrototypeOf(ColorAttributor)).apply(this, arguments));\n                }\n                _createClass(ColorAttributor, [\n                    {\n                        key: \"value\",\n                        value: function value(domNode) {\n                            var value = _get(ColorAttributor.prototype.__proto__ || Object.getPrototypeOf(ColorAttributor.prototype), \"value\", this).call(this, domNode);\n                            if (!value.startsWith(\"rgb(\")) return value;\n                            value = value.replace(/^[^\\d]+/, \"\").replace(/[^\\d]+$/, \"\");\n                            return \"#\" + value.split(\",\").map(function(component) {\n                                return (\"00\" + parseInt(component).toString(16)).slice(-2);\n                            }).join(\"\");\n                        }\n                    }\n                ]);\n                return ColorAttributor;\n            }(_parchment2.default.Attributor.Style);\n            var ColorClass = new _parchment2.default.Attributor.Class(\"color\", \"ql-color\", {\n                scope: _parchment2.default.Scope.INLINE\n            });\n            var ColorStyle = new ColorAttributor(\"color\", \"color\", {\n                scope: _parchment2.default.Scope.INLINE\n            });\n            exports1.ColorAttributor = ColorAttributor;\n            exports1.ColorClass = ColorClass;\n            exports1.ColorStyle = ColorStyle;\n        /***/ },\n        /* 27 */ /***/ function(module1, exports1, __nested_webpack_require_296833__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.sanitize = exports1.default = undefined;\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _get = function get(object, property, receiver) {\n                if (object === null) object = Function.prototype;\n                var desc = Object.getOwnPropertyDescriptor(object, property);\n                if (desc === undefined) {\n                    var parent = Object.getPrototypeOf(object);\n                    if (parent === null) {\n                        return undefined;\n                    } else {\n                        return get(parent, property, receiver);\n                    }\n                } else if (\"value\" in desc) {\n                    return desc.value;\n                } else {\n                    var getter = desc.get;\n                    if (getter === undefined) {\n                        return undefined;\n                    }\n                    return getter.call(receiver);\n                }\n            };\n            var _inline = __nested_webpack_require_296833__(6);\n            var _inline2 = _interopRequireDefault(_inline);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var Link = function(_Inline) {\n                _inherits(Link, _Inline);\n                function Link() {\n                    _classCallCheck(this, Link);\n                    return _possibleConstructorReturn(this, (Link.__proto__ || Object.getPrototypeOf(Link)).apply(this, arguments));\n                }\n                _createClass(Link, [\n                    {\n                        key: \"format\",\n                        value: function format(name, value) {\n                            if (name !== this.statics.blotName || !value) return _get(Link.prototype.__proto__ || Object.getPrototypeOf(Link.prototype), \"format\", this).call(this, name, value);\n                            value = this.constructor.sanitize(value);\n                            this.domNode.setAttribute(\"href\", value);\n                        }\n                    }\n                ], [\n                    {\n                        key: \"create\",\n                        value: function create(value) {\n                            var node = _get(Link.__proto__ || Object.getPrototypeOf(Link), \"create\", this).call(this, value);\n                            value = this.sanitize(value);\n                            node.setAttribute(\"href\", value);\n                            node.setAttribute(\"rel\", \"noopener noreferrer\");\n                            node.setAttribute(\"target\", \"_blank\");\n                            return node;\n                        }\n                    },\n                    {\n                        key: \"formats\",\n                        value: function formats(domNode) {\n                            return domNode.getAttribute(\"href\");\n                        }\n                    },\n                    {\n                        key: \"sanitize\",\n                        value: function sanitize(url) {\n                            return _sanitize(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;\n                        }\n                    }\n                ]);\n                return Link;\n            }(_inline2.default);\n            Link.blotName = \"link\";\n            Link.tagName = \"A\";\n            Link.SANITIZED_URL = \"about:blank\";\n            Link.PROTOCOL_WHITELIST = [\n                \"http\",\n                \"https\",\n                \"mailto\",\n                \"tel\"\n            ];\n            function _sanitize(url, protocols) {\n                var anchor = document.createElement(\"a\");\n                anchor.href = url;\n                var protocol = anchor.href.slice(0, anchor.href.indexOf(\":\"));\n                return protocols.indexOf(protocol) > -1;\n            }\n            exports1.default = Link;\n            exports1.sanitize = _sanitize;\n        /***/ },\n        /* 28 */ /***/ function(module1, exports1, __nested_webpack_require_303158__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function(obj) {\n                return typeof obj;\n            } : function(obj) {\n                return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _keyboard = __nested_webpack_require_303158__(23);\n            var _keyboard2 = _interopRequireDefault(_keyboard);\n            var _dropdown = __nested_webpack_require_303158__(107);\n            var _dropdown2 = _interopRequireDefault(_dropdown);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            var optionsCounter = 0;\n            function toggleAriaAttribute(element, attribute) {\n                element.setAttribute(attribute, !(element.getAttribute(attribute) === \"true\"));\n            }\n            var Picker = function() {\n                function Picker(select) {\n                    var _this = this;\n                    _classCallCheck(this, Picker);\n                    this.select = select;\n                    this.container = document.createElement(\"span\");\n                    this.buildPicker();\n                    this.select.style.display = \"none\";\n                    this.select.parentNode.insertBefore(this.container, this.select);\n                    this.label.addEventListener(\"mousedown\", function() {\n                        _this.togglePicker();\n                    });\n                    this.label.addEventListener(\"keydown\", function(event) {\n                        switch(event.keyCode){\n                            // Allows the \"Enter\" key to open the picker\n                            case _keyboard2.default.keys.ENTER:\n                                _this.togglePicker();\n                                break;\n                            // Allows the \"Escape\" key to close the picker\n                            case _keyboard2.default.keys.ESCAPE:\n                                _this.escape();\n                                event.preventDefault();\n                                break;\n                            default:\n                        }\n                    });\n                    this.select.addEventListener(\"change\", this.update.bind(this));\n                }\n                _createClass(Picker, [\n                    {\n                        key: \"togglePicker\",\n                        value: function togglePicker() {\n                            this.container.classList.toggle(\"ql-expanded\");\n                            // Toggle aria-expanded and aria-hidden to make the picker accessible\n                            toggleAriaAttribute(this.label, \"aria-expanded\");\n                            toggleAriaAttribute(this.options, \"aria-hidden\");\n                        }\n                    },\n                    {\n                        key: \"buildItem\",\n                        value: function buildItem(option) {\n                            var _this2 = this;\n                            var item = document.createElement(\"span\");\n                            item.tabIndex = \"0\";\n                            item.setAttribute(\"role\", \"button\");\n                            item.classList.add(\"ql-picker-item\");\n                            if (option.hasAttribute(\"value\")) {\n                                item.setAttribute(\"data-value\", option.getAttribute(\"value\"));\n                            }\n                            if (option.textContent) {\n                                item.setAttribute(\"data-label\", option.textContent);\n                            }\n                            item.addEventListener(\"click\", function() {\n                                _this2.selectItem(item, true);\n                            });\n                            item.addEventListener(\"keydown\", function(event) {\n                                switch(event.keyCode){\n                                    // Allows the \"Enter\" key to select an item\n                                    case _keyboard2.default.keys.ENTER:\n                                        _this2.selectItem(item, true);\n                                        event.preventDefault();\n                                        break;\n                                    // Allows the \"Escape\" key to close the picker\n                                    case _keyboard2.default.keys.ESCAPE:\n                                        _this2.escape();\n                                        event.preventDefault();\n                                        break;\n                                    default:\n                                }\n                            });\n                            return item;\n                        }\n                    },\n                    {\n                        key: \"buildLabel\",\n                        value: function buildLabel() {\n                            var label = document.createElement(\"span\");\n                            label.classList.add(\"ql-picker-label\");\n                            label.innerHTML = _dropdown2.default;\n                            label.tabIndex = \"0\";\n                            label.setAttribute(\"role\", \"button\");\n                            label.setAttribute(\"aria-expanded\", \"false\");\n                            this.container.appendChild(label);\n                            return label;\n                        }\n                    },\n                    {\n                        key: \"buildOptions\",\n                        value: function buildOptions() {\n                            var _this3 = this;\n                            var options = document.createElement(\"span\");\n                            options.classList.add(\"ql-picker-options\");\n                            // Don't want screen readers to read this until options are visible\n                            options.setAttribute(\"aria-hidden\", \"true\");\n                            options.tabIndex = \"-1\";\n                            // Need a unique id for aria-controls\n                            options.id = \"ql-picker-options-\" + optionsCounter;\n                            optionsCounter += 1;\n                            this.label.setAttribute(\"aria-controls\", options.id);\n                            this.options = options;\n                            [].slice.call(this.select.options).forEach(function(option) {\n                                var item = _this3.buildItem(option);\n                                options.appendChild(item);\n                                if (option.selected === true) {\n                                    _this3.selectItem(item);\n                                }\n                            });\n                            this.container.appendChild(options);\n                        }\n                    },\n                    {\n                        key: \"buildPicker\",\n                        value: function buildPicker() {\n                            var _this4 = this;\n                            [].slice.call(this.select.attributes).forEach(function(item) {\n                                _this4.container.setAttribute(item.name, item.value);\n                            });\n                            this.container.classList.add(\"ql-picker\");\n                            this.label = this.buildLabel();\n                            this.buildOptions();\n                        }\n                    },\n                    {\n                        key: \"escape\",\n                        value: function escape() {\n                            var _this5 = this;\n                            // Close menu and return focus to trigger label\n                            this.close();\n                            // Need setTimeout for accessibility to ensure that the browser executes\n                            // focus on the next process thread and after any DOM content changes\n                            setTimeout(function() {\n                                return _this5.label.focus();\n                            }, 1);\n                        }\n                    },\n                    {\n                        key: \"close\",\n                        value: function close() {\n                            this.container.classList.remove(\"ql-expanded\");\n                            this.label.setAttribute(\"aria-expanded\", \"false\");\n                            this.options.setAttribute(\"aria-hidden\", \"true\");\n                        }\n                    },\n                    {\n                        key: \"selectItem\",\n                        value: function selectItem(item) {\n                            var trigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                            var selected = this.container.querySelector(\".ql-selected\");\n                            if (item === selected) return;\n                            if (selected != null) {\n                                selected.classList.remove(\"ql-selected\");\n                            }\n                            if (item == null) return;\n                            item.classList.add(\"ql-selected\");\n                            this.select.selectedIndex = [].indexOf.call(item.parentNode.children, item);\n                            if (item.hasAttribute(\"data-value\")) {\n                                this.label.setAttribute(\"data-value\", item.getAttribute(\"data-value\"));\n                            } else {\n                                this.label.removeAttribute(\"data-value\");\n                            }\n                            if (item.hasAttribute(\"data-label\")) {\n                                this.label.setAttribute(\"data-label\", item.getAttribute(\"data-label\"));\n                            } else {\n                                this.label.removeAttribute(\"data-label\");\n                            }\n                            if (trigger) {\n                                if (typeof Event === \"function\") {\n                                    this.select.dispatchEvent(new Event(\"change\"));\n                                } else if ((typeof Event === \"undefined\" ? \"undefined\" : _typeof(Event)) === \"object\") {\n                                    // IE11\n                                    var event = document.createEvent(\"Event\");\n                                    event.initEvent(\"change\", true, true);\n                                    this.select.dispatchEvent(event);\n                                }\n                                this.close();\n                            }\n                        }\n                    },\n                    {\n                        key: \"update\",\n                        value: function update() {\n                            var option = void 0;\n                            if (this.select.selectedIndex > -1) {\n                                var item = this.container.querySelector(\".ql-picker-options\").children[this.select.selectedIndex];\n                                option = this.select.options[this.select.selectedIndex];\n                                this.selectItem(item);\n                            } else {\n                                this.selectItem(null);\n                            }\n                            var isActive = option != null && option !== this.select.querySelector(\"option[selected]\");\n                            this.label.classList.toggle(\"ql-active\", isActive);\n                        }\n                    }\n                ]);\n                return Picker;\n            }();\n            exports1.default = Picker;\n        /***/ },\n        /* 29 */ /***/ function(module1, exports1, __nested_webpack_require_316188__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var _parchment = __nested_webpack_require_316188__(0);\n            var _parchment2 = _interopRequireDefault(_parchment);\n            var _quill = __nested_webpack_require_316188__(5);\n            var _quill2 = _interopRequireDefault(_quill);\n            var _block = __nested_webpack_require_316188__(4);\n            var _block2 = _interopRequireDefault(_block);\n            var _break = __nested_webpack_require_316188__(16);\n            var _break2 = _interopRequireDefault(_break);\n            var _container = __nested_webpack_require_316188__(25);\n            var _container2 = _interopRequireDefault(_container);\n            var _cursor = __nested_webpack_require_316188__(24);\n            var _cursor2 = _interopRequireDefault(_cursor);\n            var _embed = __nested_webpack_require_316188__(35);\n            var _embed2 = _interopRequireDefault(_embed);\n            var _inline = __nested_webpack_require_316188__(6);\n            var _inline2 = _interopRequireDefault(_inline);\n            var _scroll = __nested_webpack_require_316188__(22);\n            var _scroll2 = _interopRequireDefault(_scroll);\n            var _text = __nested_webpack_require_316188__(7);\n            var _text2 = _interopRequireDefault(_text);\n            var _clipboard = __nested_webpack_require_316188__(55);\n            var _clipboard2 = _interopRequireDefault(_clipboard);\n            var _history = __nested_webpack_require_316188__(42);\n            var _history2 = _interopRequireDefault(_history);\n            var _keyboard = __nested_webpack_require_316188__(23);\n            var _keyboard2 = _interopRequireDefault(_keyboard);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            _quill2.default.register({\n                \"blots/block\": _block2.default,\n                \"blots/block/embed\": _block.BlockEmbed,\n                \"blots/break\": _break2.default,\n                \"blots/container\": _container2.default,\n                \"blots/cursor\": _cursor2.default,\n                \"blots/embed\": _embed2.default,\n                \"blots/inline\": _inline2.default,\n                \"blots/scroll\": _scroll2.default,\n                \"blots/text\": _text2.default,\n                \"modules/clipboard\": _clipboard2.default,\n                \"modules/history\": _history2.default,\n                \"modules/keyboard\": _keyboard2.default\n            });\n            _parchment2.default.register(_block2.default, _break2.default, _cursor2.default, _inline2.default, _scroll2.default, _text2.default);\n            exports1.default = _quill2.default;\n        /***/ },\n        /* 30 */ /***/ function(module1, exports1, __nested_webpack_require_318905__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var Registry = __nested_webpack_require_318905__(1);\n            var ShadowBlot = /** @class */ function() {\n                function ShadowBlot(domNode) {\n                    this.domNode = domNode;\n                    // @ts-ignore\n                    this.domNode[Registry.DATA_KEY] = {\n                        blot: this\n                    };\n                }\n                Object.defineProperty(ShadowBlot.prototype, \"statics\", {\n                    // Hack for accessing inherited static methods\n                    get: function() {\n                        return this.constructor;\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                ShadowBlot.create = function(value) {\n                    if (this.tagName == null) {\n                        throw new Registry.ParchmentError(\"Blot definition missing tagName\");\n                    }\n                    var node;\n                    if (Array.isArray(this.tagName)) {\n                        if (typeof value === \"string\") {\n                            value = value.toUpperCase();\n                            if (parseInt(value).toString() === value) {\n                                value = parseInt(value);\n                            }\n                        }\n                        if (typeof value === \"number\") {\n                            node = document.createElement(this.tagName[value - 1]);\n                        } else if (this.tagName.indexOf(value) > -1) {\n                            node = document.createElement(value);\n                        } else {\n                            node = document.createElement(this.tagName[0]);\n                        }\n                    } else {\n                        node = document.createElement(this.tagName);\n                    }\n                    if (this.className) {\n                        node.classList.add(this.className);\n                    }\n                    return node;\n                };\n                ShadowBlot.prototype.attach = function() {\n                    if (this.parent != null) {\n                        this.scroll = this.parent.scroll;\n                    }\n                };\n                ShadowBlot.prototype.clone = function() {\n                    var domNode = this.domNode.cloneNode(false);\n                    return Registry.create(domNode);\n                };\n                ShadowBlot.prototype.detach = function() {\n                    if (this.parent != null) this.parent.removeChild(this);\n                    // @ts-ignore\n                    delete this.domNode[Registry.DATA_KEY];\n                };\n                ShadowBlot.prototype.deleteAt = function(index, length) {\n                    var blot = this.isolate(index, length);\n                    blot.remove();\n                };\n                ShadowBlot.prototype.formatAt = function(index, length, name, value) {\n                    var blot = this.isolate(index, length);\n                    if (Registry.query(name, Registry.Scope.BLOT) != null && value) {\n                        blot.wrap(name, value);\n                    } else if (Registry.query(name, Registry.Scope.ATTRIBUTE) != null) {\n                        var parent = Registry.create(this.statics.scope);\n                        blot.wrap(parent);\n                        parent.format(name, value);\n                    }\n                };\n                ShadowBlot.prototype.insertAt = function(index, value, def) {\n                    var blot = def == null ? Registry.create(\"text\", value) : Registry.create(value, def);\n                    var ref = this.split(index);\n                    this.parent.insertBefore(blot, ref);\n                };\n                ShadowBlot.prototype.insertInto = function(parentBlot, refBlot) {\n                    if (refBlot === void 0) {\n                        refBlot = null;\n                    }\n                    if (this.parent != null) {\n                        this.parent.children.remove(this);\n                    }\n                    var refDomNode = null;\n                    parentBlot.children.insertBefore(this, refBlot);\n                    if (refBlot != null) {\n                        refDomNode = refBlot.domNode;\n                    }\n                    if (this.domNode.parentNode != parentBlot.domNode || this.domNode.nextSibling != refDomNode) {\n                        parentBlot.domNode.insertBefore(this.domNode, refDomNode);\n                    }\n                    this.parent = parentBlot;\n                    this.attach();\n                };\n                ShadowBlot.prototype.isolate = function(index, length) {\n                    var target = this.split(index);\n                    target.split(length);\n                    return target;\n                };\n                ShadowBlot.prototype.length = function() {\n                    return 1;\n                };\n                ShadowBlot.prototype.offset = function(root) {\n                    if (root === void 0) {\n                        root = this.parent;\n                    }\n                    if (this.parent == null || this == root) return 0;\n                    return this.parent.children.offset(this) + this.parent.offset(root);\n                };\n                ShadowBlot.prototype.optimize = function(context) {\n                    // TODO clean up once we use WeakMap\n                    // @ts-ignore\n                    if (this.domNode[Registry.DATA_KEY] != null) {\n                        // @ts-ignore\n                        delete this.domNode[Registry.DATA_KEY].mutations;\n                    }\n                };\n                ShadowBlot.prototype.remove = function() {\n                    if (this.domNode.parentNode != null) {\n                        this.domNode.parentNode.removeChild(this.domNode);\n                    }\n                    this.detach();\n                };\n                ShadowBlot.prototype.replace = function(target) {\n                    if (target.parent == null) return;\n                    target.parent.insertBefore(this, target.next);\n                    target.remove();\n                };\n                ShadowBlot.prototype.replaceWith = function(name, value) {\n                    var replacement = typeof name === \"string\" ? Registry.create(name, value) : name;\n                    replacement.replace(this);\n                    return replacement;\n                };\n                ShadowBlot.prototype.split = function(index, force) {\n                    return index === 0 ? this : this.next;\n                };\n                ShadowBlot.prototype.update = function(mutations, context) {\n                // Nothing to do by default\n                };\n                ShadowBlot.prototype.wrap = function(name, value) {\n                    var wrapper = typeof name === \"string\" ? Registry.create(name, value) : name;\n                    if (this.parent != null) {\n                        this.parent.insertBefore(wrapper, this.next);\n                    }\n                    wrapper.appendChild(this);\n                    return wrapper;\n                };\n                ShadowBlot.blotName = \"abstract\";\n                return ShadowBlot;\n            }();\n            exports1.default = ShadowBlot;\n        /***/ },\n        /* 31 */ /***/ function(module1, exports1, __nested_webpack_require_326438__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var attributor_1 = __nested_webpack_require_326438__(12);\n            var class_1 = __nested_webpack_require_326438__(32);\n            var style_1 = __nested_webpack_require_326438__(33);\n            var Registry = __nested_webpack_require_326438__(1);\n            var AttributorStore = /** @class */ function() {\n                function AttributorStore(domNode) {\n                    this.attributes = {};\n                    this.domNode = domNode;\n                    this.build();\n                }\n                AttributorStore.prototype.attribute = function(attribute, value) {\n                    // verb\n                    if (value) {\n                        if (attribute.add(this.domNode, value)) {\n                            if (attribute.value(this.domNode) != null) {\n                                this.attributes[attribute.attrName] = attribute;\n                            } else {\n                                delete this.attributes[attribute.attrName];\n                            }\n                        }\n                    } else {\n                        attribute.remove(this.domNode);\n                        delete this.attributes[attribute.attrName];\n                    }\n                };\n                AttributorStore.prototype.build = function() {\n                    var _this = this;\n                    this.attributes = {};\n                    var attributes = attributor_1.default.keys(this.domNode);\n                    var classes = class_1.default.keys(this.domNode);\n                    var styles = style_1.default.keys(this.domNode);\n                    attributes.concat(classes).concat(styles).forEach(function(name) {\n                        var attr = Registry.query(name, Registry.Scope.ATTRIBUTE);\n                        if (attr instanceof attributor_1.default) {\n                            _this.attributes[attr.attrName] = attr;\n                        }\n                    });\n                };\n                AttributorStore.prototype.copy = function(target) {\n                    var _this = this;\n                    Object.keys(this.attributes).forEach(function(key) {\n                        var value = _this.attributes[key].value(_this.domNode);\n                        target.format(key, value);\n                    });\n                };\n                AttributorStore.prototype.move = function(target) {\n                    var _this = this;\n                    this.copy(target);\n                    Object.keys(this.attributes).forEach(function(key) {\n                        _this.attributes[key].remove(_this.domNode);\n                    });\n                    this.attributes = {};\n                };\n                AttributorStore.prototype.values = function() {\n                    var _this = this;\n                    return Object.keys(this.attributes).reduce(function(attributes, name) {\n                        attributes[name] = _this.attributes[name].value(_this.domNode);\n                        return attributes;\n                    }, {});\n                };\n                return AttributorStore;\n            }();\n            exports1.default = AttributorStore;\n        /***/ },\n        /* 32 */ /***/ function(module1, exports1, __nested_webpack_require_329783__) {\n            \"use strict\";\n            var __extends = this && this.__extends || function() {\n                var extendStatics = Object.setPrototypeOf || ({\n                    __proto__: []\n                }) instanceof Array && function(d, b) {\n                    d.__proto__ = b;\n                } || function(d, b) {\n                    for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n                };\n                return function(d, b) {\n                    extendStatics(d, b);\n                    function __() {\n                        this.constructor = d;\n                    }\n                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n                };\n            }();\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var attributor_1 = __nested_webpack_require_329783__(12);\n            function match(node, prefix) {\n                var className = node.getAttribute(\"class\") || \"\";\n                return className.split(/\\s+/).filter(function(name) {\n                    return name.indexOf(prefix + \"-\") === 0;\n                });\n            }\n            var ClassAttributor = /** @class */ function(_super) {\n                __extends(ClassAttributor, _super);\n                function ClassAttributor() {\n                    return _super !== null && _super.apply(this, arguments) || this;\n                }\n                ClassAttributor.keys = function(node) {\n                    return (node.getAttribute(\"class\") || \"\").split(/\\s+/).map(function(name) {\n                        return name.split(\"-\").slice(0, -1).join(\"-\");\n                    });\n                };\n                ClassAttributor.prototype.add = function(node, value) {\n                    if (!this.canAdd(node, value)) return false;\n                    this.remove(node);\n                    node.classList.add(this.keyName + \"-\" + value);\n                    return true;\n                };\n                ClassAttributor.prototype.remove = function(node) {\n                    var matches = match(node, this.keyName);\n                    matches.forEach(function(name) {\n                        node.classList.remove(name);\n                    });\n                    if (node.classList.length === 0) {\n                        node.removeAttribute(\"class\");\n                    }\n                };\n                ClassAttributor.prototype.value = function(node) {\n                    var result = match(node, this.keyName)[0] || \"\";\n                    var value = result.slice(this.keyName.length + 1); // +1 for hyphen\n                    return this.canAdd(node, value) ? value : \"\";\n                };\n                return ClassAttributor;\n            }(attributor_1.default);\n            exports1.default = ClassAttributor;\n        /***/ },\n        /* 33 */ /***/ function(module1, exports1, __nested_webpack_require_332722__) {\n            \"use strict\";\n            var __extends = this && this.__extends || function() {\n                var extendStatics = Object.setPrototypeOf || ({\n                    __proto__: []\n                }) instanceof Array && function(d, b) {\n                    d.__proto__ = b;\n                } || function(d, b) {\n                    for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n                };\n                return function(d, b) {\n                    extendStatics(d, b);\n                    function __() {\n                        this.constructor = d;\n                    }\n                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n                };\n            }();\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var attributor_1 = __nested_webpack_require_332722__(12);\n            function camelize(name) {\n                var parts = name.split(\"-\");\n                var rest = parts.slice(1).map(function(part) {\n                    return part[0].toUpperCase() + part.slice(1);\n                }).join(\"\");\n                return parts[0] + rest;\n            }\n            var StyleAttributor = /** @class */ function(_super) {\n                __extends(StyleAttributor, _super);\n                function StyleAttributor() {\n                    return _super !== null && _super.apply(this, arguments) || this;\n                }\n                StyleAttributor.keys = function(node) {\n                    return (node.getAttribute(\"style\") || \"\").split(\";\").map(function(value) {\n                        var arr = value.split(\":\");\n                        return arr[0].trim();\n                    });\n                };\n                StyleAttributor.prototype.add = function(node, value) {\n                    if (!this.canAdd(node, value)) return false;\n                    // @ts-ignore\n                    node.style[camelize(this.keyName)] = value;\n                    return true;\n                };\n                StyleAttributor.prototype.remove = function(node) {\n                    // @ts-ignore\n                    node.style[camelize(this.keyName)] = \"\";\n                    if (!node.getAttribute(\"style\")) {\n                        node.removeAttribute(\"style\");\n                    }\n                };\n                StyleAttributor.prototype.value = function(node) {\n                    // @ts-ignore\n                    var value = node.style[camelize(this.keyName)];\n                    return this.canAdd(node, value) ? value : \"\";\n                };\n                return StyleAttributor;\n            }(attributor_1.default);\n            exports1.default = StyleAttributor;\n        /***/ },\n        /* 34 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            var Theme = function() {\n                function Theme(quill, options) {\n                    _classCallCheck(this, Theme);\n                    this.quill = quill;\n                    this.options = options;\n                    this.modules = {};\n                }\n                _createClass(Theme, [\n                    {\n                        key: \"init\",\n                        value: function init() {\n                            var _this = this;\n                            Object.keys(this.options.modules).forEach(function(name) {\n                                if (_this.modules[name] == null) {\n                                    _this.addModule(name);\n                                }\n                            });\n                        }\n                    },\n                    {\n                        key: \"addModule\",\n                        value: function addModule(name) {\n                            var moduleClass = this.quill.constructor.import(\"modules/\" + name);\n                            this.modules[name] = new moduleClass(this.quill, this.options.modules[name] || {});\n                            return this.modules[name];\n                        }\n                    }\n                ]);\n                return Theme;\n            }();\n            Theme.DEFAULTS = {\n                modules: {}\n            };\n            Theme.themes = {\n                \"default\": Theme\n            };\n            exports1.default = Theme;\n        /***/ },\n        /* 35 */ /***/ function(module1, exports1, __nested_webpack_require_338354__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _get = function get(object, property, receiver) {\n                if (object === null) object = Function.prototype;\n                var desc = Object.getOwnPropertyDescriptor(object, property);\n                if (desc === undefined) {\n                    var parent = Object.getPrototypeOf(object);\n                    if (parent === null) {\n                        return undefined;\n                    } else {\n                        return get(parent, property, receiver);\n                    }\n                } else if (\"value\" in desc) {\n                    return desc.value;\n                } else {\n                    var getter = desc.get;\n                    if (getter === undefined) {\n                        return undefined;\n                    }\n                    return getter.call(receiver);\n                }\n            };\n            var _parchment = __nested_webpack_require_338354__(0);\n            var _parchment2 = _interopRequireDefault(_parchment);\n            var _text = __nested_webpack_require_338354__(7);\n            var _text2 = _interopRequireDefault(_text);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var GUARD_TEXT = \"\\uFEFF\";\n            var Embed = function(_Parchment$Embed) {\n                _inherits(Embed, _Parchment$Embed);\n                function Embed(node) {\n                    _classCallCheck(this, Embed);\n                    var _this = _possibleConstructorReturn(this, (Embed.__proto__ || Object.getPrototypeOf(Embed)).call(this, node));\n                    _this.contentNode = document.createElement(\"span\");\n                    _this.contentNode.setAttribute(\"contenteditable\", false);\n                    [].slice.call(_this.domNode.childNodes).forEach(function(childNode) {\n                        _this.contentNode.appendChild(childNode);\n                    });\n                    _this.leftGuard = document.createTextNode(GUARD_TEXT);\n                    _this.rightGuard = document.createTextNode(GUARD_TEXT);\n                    _this.domNode.appendChild(_this.leftGuard);\n                    _this.domNode.appendChild(_this.contentNode);\n                    _this.domNode.appendChild(_this.rightGuard);\n                    return _this;\n                }\n                _createClass(Embed, [\n                    {\n                        key: \"index\",\n                        value: function index(node, offset) {\n                            if (node === this.leftGuard) return 0;\n                            if (node === this.rightGuard) return 1;\n                            return _get(Embed.prototype.__proto__ || Object.getPrototypeOf(Embed.prototype), \"index\", this).call(this, node, offset);\n                        }\n                    },\n                    {\n                        key: \"restore\",\n                        value: function restore(node) {\n                            var range = void 0, textNode = void 0;\n                            var text = node.data.split(GUARD_TEXT).join(\"\");\n                            if (node === this.leftGuard) {\n                                if (this.prev instanceof _text2.default) {\n                                    var prevLength = this.prev.length();\n                                    this.prev.insertAt(prevLength, text);\n                                    range = {\n                                        startNode: this.prev.domNode,\n                                        startOffset: prevLength + text.length\n                                    };\n                                } else {\n                                    textNode = document.createTextNode(text);\n                                    this.parent.insertBefore(_parchment2.default.create(textNode), this);\n                                    range = {\n                                        startNode: textNode,\n                                        startOffset: text.length\n                                    };\n                                }\n                            } else if (node === this.rightGuard) {\n                                if (this.next instanceof _text2.default) {\n                                    this.next.insertAt(0, text);\n                                    range = {\n                                        startNode: this.next.domNode,\n                                        startOffset: text.length\n                                    };\n                                } else {\n                                    textNode = document.createTextNode(text);\n                                    this.parent.insertBefore(_parchment2.default.create(textNode), this.next);\n                                    range = {\n                                        startNode: textNode,\n                                        startOffset: text.length\n                                    };\n                                }\n                            }\n                            node.data = GUARD_TEXT;\n                            return range;\n                        }\n                    },\n                    {\n                        key: \"update\",\n                        value: function update(mutations, context) {\n                            var _this2 = this;\n                            mutations.forEach(function(mutation) {\n                                if (mutation.type === \"characterData\" && (mutation.target === _this2.leftGuard || mutation.target === _this2.rightGuard)) {\n                                    var range = _this2.restore(mutation.target);\n                                    if (range) context.range = range;\n                                }\n                            });\n                        }\n                    }\n                ]);\n                return Embed;\n            }(_parchment2.default.Embed);\n            exports1.default = Embed;\n        /***/ },\n        /* 36 */ /***/ function(module1, exports1, __nested_webpack_require_346729__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.AlignStyle = exports1.AlignClass = exports1.AlignAttribute = undefined;\n            var _parchment = __nested_webpack_require_346729__(0);\n            var _parchment2 = _interopRequireDefault(_parchment);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            var config = {\n                scope: _parchment2.default.Scope.BLOCK,\n                whitelist: [\n                    \"right\",\n                    \"center\",\n                    \"justify\"\n                ]\n            };\n            var AlignAttribute = new _parchment2.default.Attributor.Attribute(\"align\", \"align\", config);\n            var AlignClass = new _parchment2.default.Attributor.Class(\"align\", \"ql-align\", config);\n            var AlignStyle = new _parchment2.default.Attributor.Style(\"align\", \"text-align\", config);\n            exports1.AlignAttribute = AlignAttribute;\n            exports1.AlignClass = AlignClass;\n            exports1.AlignStyle = AlignStyle;\n        /***/ },\n        /* 37 */ /***/ function(module1, exports1, __nested_webpack_require_348021__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.BackgroundStyle = exports1.BackgroundClass = undefined;\n            var _parchment = __nested_webpack_require_348021__(0);\n            var _parchment2 = _interopRequireDefault(_parchment);\n            var _color = __nested_webpack_require_348021__(26);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            var BackgroundClass = new _parchment2.default.Attributor.Class(\"background\", \"ql-bg\", {\n                scope: _parchment2.default.Scope.INLINE\n            });\n            var BackgroundStyle = new _color.ColorAttributor(\"background\", \"background-color\", {\n                scope: _parchment2.default.Scope.INLINE\n            });\n            exports1.BackgroundClass = BackgroundClass;\n            exports1.BackgroundStyle = BackgroundStyle;\n        /***/ },\n        /* 38 */ /***/ function(module1, exports1, __nested_webpack_require_349113__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.DirectionStyle = exports1.DirectionClass = exports1.DirectionAttribute = undefined;\n            var _parchment = __nested_webpack_require_349113__(0);\n            var _parchment2 = _interopRequireDefault(_parchment);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            var config = {\n                scope: _parchment2.default.Scope.BLOCK,\n                whitelist: [\n                    \"rtl\"\n                ]\n            };\n            var DirectionAttribute = new _parchment2.default.Attributor.Attribute(\"direction\", \"dir\", config);\n            var DirectionClass = new _parchment2.default.Attributor.Class(\"direction\", \"ql-direction\", config);\n            var DirectionStyle = new _parchment2.default.Attributor.Style(\"direction\", \"direction\", config);\n            exports1.DirectionAttribute = DirectionAttribute;\n            exports1.DirectionClass = DirectionClass;\n            exports1.DirectionStyle = DirectionStyle;\n        /***/ },\n        /* 39 */ /***/ function(module1, exports1, __nested_webpack_require_350403__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.FontClass = exports1.FontStyle = undefined;\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _get = function get(object, property, receiver) {\n                if (object === null) object = Function.prototype;\n                var desc = Object.getOwnPropertyDescriptor(object, property);\n                if (desc === undefined) {\n                    var parent = Object.getPrototypeOf(object);\n                    if (parent === null) {\n                        return undefined;\n                    } else {\n                        return get(parent, property, receiver);\n                    }\n                } else if (\"value\" in desc) {\n                    return desc.value;\n                } else {\n                    var getter = desc.get;\n                    if (getter === undefined) {\n                        return undefined;\n                    }\n                    return getter.call(receiver);\n                }\n            };\n            var _parchment = __nested_webpack_require_350403__(0);\n            var _parchment2 = _interopRequireDefault(_parchment);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var config = {\n                scope: _parchment2.default.Scope.INLINE,\n                whitelist: [\n                    \"serif\",\n                    \"monospace\"\n                ]\n            };\n            var FontClass = new _parchment2.default.Attributor.Class(\"font\", \"ql-font\", config);\n            var FontStyleAttributor = function(_Parchment$Attributor) {\n                _inherits(FontStyleAttributor, _Parchment$Attributor);\n                function FontStyleAttributor() {\n                    _classCallCheck(this, FontStyleAttributor);\n                    return _possibleConstructorReturn(this, (FontStyleAttributor.__proto__ || Object.getPrototypeOf(FontStyleAttributor)).apply(this, arguments));\n                }\n                _createClass(FontStyleAttributor, [\n                    {\n                        key: \"value\",\n                        value: function value(node) {\n                            return _get(FontStyleAttributor.prototype.__proto__ || Object.getPrototypeOf(FontStyleAttributor.prototype), \"value\", this).call(this, node).replace(/[\"']/g, \"\");\n                        }\n                    }\n                ]);\n                return FontStyleAttributor;\n            }(_parchment2.default.Attributor.Style);\n            var FontStyle = new FontStyleAttributor(\"font\", \"font-family\", config);\n            exports1.FontStyle = FontStyle;\n            exports1.FontClass = FontClass;\n        /***/ },\n        /* 40 */ /***/ function(module1, exports1, __nested_webpack_require_355469__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.SizeStyle = exports1.SizeClass = undefined;\n            var _parchment = __nested_webpack_require_355469__(0);\n            var _parchment2 = _interopRequireDefault(_parchment);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            var SizeClass = new _parchment2.default.Attributor.Class(\"size\", \"ql-size\", {\n                scope: _parchment2.default.Scope.INLINE,\n                whitelist: [\n                    \"small\",\n                    \"large\",\n                    \"huge\"\n                ]\n            });\n            var SizeStyle = new _parchment2.default.Attributor.Style(\"size\", \"font-size\", {\n                scope: _parchment2.default.Scope.INLINE,\n                whitelist: [\n                    \"10px\",\n                    \"18px\",\n                    \"32px\"\n                ]\n            });\n            exports1.SizeClass = SizeClass;\n            exports1.SizeStyle = SizeStyle;\n        /***/ },\n        /* 41 */ /***/ function(module1, exports1, __nested_webpack_require_356724__) {\n            \"use strict\";\n            module1.exports = {\n                \"align\": {\n                    \"\": __nested_webpack_require_356724__(76),\n                    \"center\": __nested_webpack_require_356724__(77),\n                    \"right\": __nested_webpack_require_356724__(78),\n                    \"justify\": __nested_webpack_require_356724__(79)\n                },\n                \"background\": __nested_webpack_require_356724__(80),\n                \"blockquote\": __nested_webpack_require_356724__(81),\n                \"bold\": __nested_webpack_require_356724__(82),\n                \"clean\": __nested_webpack_require_356724__(83),\n                \"code\": __nested_webpack_require_356724__(58),\n                \"code-block\": __nested_webpack_require_356724__(58),\n                \"color\": __nested_webpack_require_356724__(84),\n                \"direction\": {\n                    \"\": __nested_webpack_require_356724__(85),\n                    \"rtl\": __nested_webpack_require_356724__(86)\n                },\n                \"float\": {\n                    \"center\": __nested_webpack_require_356724__(87),\n                    \"full\": __nested_webpack_require_356724__(88),\n                    \"left\": __nested_webpack_require_356724__(89),\n                    \"right\": __nested_webpack_require_356724__(90)\n                },\n                \"formula\": __nested_webpack_require_356724__(91),\n                \"header\": {\n                    \"1\": __nested_webpack_require_356724__(92),\n                    \"2\": __nested_webpack_require_356724__(93)\n                },\n                \"italic\": __nested_webpack_require_356724__(94),\n                \"image\": __nested_webpack_require_356724__(95),\n                \"indent\": {\n                    \"+1\": __nested_webpack_require_356724__(96),\n                    \"-1\": __nested_webpack_require_356724__(97)\n                },\n                \"link\": __nested_webpack_require_356724__(98),\n                \"list\": {\n                    \"ordered\": __nested_webpack_require_356724__(99),\n                    \"bullet\": __nested_webpack_require_356724__(100),\n                    \"check\": __nested_webpack_require_356724__(101)\n                },\n                \"script\": {\n                    \"sub\": __nested_webpack_require_356724__(102),\n                    \"super\": __nested_webpack_require_356724__(103)\n                },\n                \"strike\": __nested_webpack_require_356724__(104),\n                \"underline\": __nested_webpack_require_356724__(105),\n                \"video\": __nested_webpack_require_356724__(106)\n            };\n        /***/ },\n        /* 42 */ /***/ function(module1, exports1, __nested_webpack_require_358938__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.getLastChangeIndex = exports1.default = undefined;\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _parchment = __nested_webpack_require_358938__(0);\n            var _parchment2 = _interopRequireDefault(_parchment);\n            var _quill = __nested_webpack_require_358938__(5);\n            var _quill2 = _interopRequireDefault(_quill);\n            var _module = __nested_webpack_require_358938__(9);\n            var _module2 = _interopRequireDefault(_module);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var History = function(_Module) {\n                _inherits(History, _Module);\n                function History(quill, options) {\n                    _classCallCheck(this, History);\n                    var _this = _possibleConstructorReturn(this, (History.__proto__ || Object.getPrototypeOf(History)).call(this, quill, options));\n                    _this.lastRecorded = 0;\n                    _this.ignoreChange = false;\n                    _this.clear();\n                    _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function(eventName, delta, oldDelta, source) {\n                        if (eventName !== _quill2.default.events.TEXT_CHANGE || _this.ignoreChange) return;\n                        if (!_this.options.userOnly || source === _quill2.default.sources.USER) {\n                            _this.record(delta, oldDelta);\n                        } else {\n                            _this.transform(delta);\n                        }\n                    });\n                    _this.quill.keyboard.addBinding({\n                        key: \"Z\",\n                        shortKey: true\n                    }, _this.undo.bind(_this));\n                    _this.quill.keyboard.addBinding({\n                        key: \"Z\",\n                        shortKey: true,\n                        shiftKey: true\n                    }, _this.redo.bind(_this));\n                    if (/Win/i.test(navigator.platform)) {\n                        _this.quill.keyboard.addBinding({\n                            key: \"Y\",\n                            shortKey: true\n                        }, _this.redo.bind(_this));\n                    }\n                    return _this;\n                }\n                _createClass(History, [\n                    {\n                        key: \"change\",\n                        value: function change(source, dest) {\n                            if (this.stack[source].length === 0) return;\n                            var delta = this.stack[source].pop();\n                            this.stack[dest].push(delta);\n                            this.lastRecorded = 0;\n                            this.ignoreChange = true;\n                            this.quill.updateContents(delta[source], _quill2.default.sources.USER);\n                            this.ignoreChange = false;\n                            var index = getLastChangeIndex(delta[source]);\n                            this.quill.setSelection(index);\n                        }\n                    },\n                    {\n                        key: \"clear\",\n                        value: function clear() {\n                            this.stack = {\n                                undo: [],\n                                redo: []\n                            };\n                        }\n                    },\n                    {\n                        key: \"cutoff\",\n                        value: function cutoff() {\n                            this.lastRecorded = 0;\n                        }\n                    },\n                    {\n                        key: \"record\",\n                        value: function record(changeDelta, oldDelta) {\n                            if (changeDelta.ops.length === 0) return;\n                            this.stack.redo = [];\n                            var undoDelta = this.quill.getContents().diff(oldDelta);\n                            var timestamp = Date.now();\n                            if (this.lastRecorded + this.options.delay > timestamp && this.stack.undo.length > 0) {\n                                var delta = this.stack.undo.pop();\n                                undoDelta = undoDelta.compose(delta.undo);\n                                changeDelta = delta.redo.compose(changeDelta);\n                            } else {\n                                this.lastRecorded = timestamp;\n                            }\n                            this.stack.undo.push({\n                                redo: changeDelta,\n                                undo: undoDelta\n                            });\n                            if (this.stack.undo.length > this.options.maxStack) {\n                                this.stack.undo.shift();\n                            }\n                        }\n                    },\n                    {\n                        key: \"redo\",\n                        value: function redo() {\n                            this.change(\"redo\", \"undo\");\n                        }\n                    },\n                    {\n                        key: \"transform\",\n                        value: function transform(delta) {\n                            this.stack.undo.forEach(function(change) {\n                                change.undo = delta.transform(change.undo, true);\n                                change.redo = delta.transform(change.redo, true);\n                            });\n                            this.stack.redo.forEach(function(change) {\n                                change.undo = delta.transform(change.undo, true);\n                                change.redo = delta.transform(change.redo, true);\n                            });\n                        }\n                    },\n                    {\n                        key: \"undo\",\n                        value: function undo() {\n                            this.change(\"undo\", \"redo\");\n                        }\n                    }\n                ]);\n                return History;\n            }(_module2.default);\n            History.DEFAULTS = {\n                delay: 1000,\n                maxStack: 100,\n                userOnly: false\n            };\n            function endsWithNewlineChange(delta) {\n                var lastOp = delta.ops[delta.ops.length - 1];\n                if (lastOp == null) return false;\n                if (lastOp.insert != null) {\n                    return typeof lastOp.insert === \"string\" && lastOp.insert.endsWith(\"\\n\");\n                }\n                if (lastOp.attributes != null) {\n                    return Object.keys(lastOp.attributes).some(function(attr) {\n                        return _parchment2.default.query(attr, _parchment2.default.Scope.BLOCK) != null;\n                    });\n                }\n                return false;\n            }\n            function getLastChangeIndex(delta) {\n                var deleteLength = delta.reduce(function(length, op) {\n                    length += op.delete || 0;\n                    return length;\n                }, 0);\n                var changeIndex = delta.length() - deleteLength;\n                if (endsWithNewlineChange(delta)) {\n                    changeIndex -= 1;\n                }\n                return changeIndex;\n            }\n            exports1.default = History;\n            exports1.getLastChangeIndex = getLastChangeIndex;\n        /***/ },\n        /* 43 */ /***/ function(module1, exports1, __nested_webpack_require_368774__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.default = exports1.BaseTooltip = undefined;\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _get = function get(object, property, receiver) {\n                if (object === null) object = Function.prototype;\n                var desc = Object.getOwnPropertyDescriptor(object, property);\n                if (desc === undefined) {\n                    var parent = Object.getPrototypeOf(object);\n                    if (parent === null) {\n                        return undefined;\n                    } else {\n                        return get(parent, property, receiver);\n                    }\n                } else if (\"value\" in desc) {\n                    return desc.value;\n                } else {\n                    var getter = desc.get;\n                    if (getter === undefined) {\n                        return undefined;\n                    }\n                    return getter.call(receiver);\n                }\n            };\n            var _extend = __nested_webpack_require_368774__(3);\n            var _extend2 = _interopRequireDefault(_extend);\n            var _quillDelta = __nested_webpack_require_368774__(2);\n            var _quillDelta2 = _interopRequireDefault(_quillDelta);\n            var _emitter = __nested_webpack_require_368774__(8);\n            var _emitter2 = _interopRequireDefault(_emitter);\n            var _keyboard = __nested_webpack_require_368774__(23);\n            var _keyboard2 = _interopRequireDefault(_keyboard);\n            var _theme = __nested_webpack_require_368774__(34);\n            var _theme2 = _interopRequireDefault(_theme);\n            var _colorPicker = __nested_webpack_require_368774__(59);\n            var _colorPicker2 = _interopRequireDefault(_colorPicker);\n            var _iconPicker = __nested_webpack_require_368774__(60);\n            var _iconPicker2 = _interopRequireDefault(_iconPicker);\n            var _picker = __nested_webpack_require_368774__(28);\n            var _picker2 = _interopRequireDefault(_picker);\n            var _tooltip = __nested_webpack_require_368774__(61);\n            var _tooltip2 = _interopRequireDefault(_tooltip);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var ALIGNS = [\n                false,\n                \"center\",\n                \"right\",\n                \"justify\"\n            ];\n            var COLORS = [\n                \"#000000\",\n                \"#e60000\",\n                \"#ff9900\",\n                \"#ffff00\",\n                \"#008a00\",\n                \"#0066cc\",\n                \"#9933ff\",\n                \"#ffffff\",\n                \"#facccc\",\n                \"#ffebcc\",\n                \"#ffffcc\",\n                \"#cce8cc\",\n                \"#cce0f5\",\n                \"#ebd6ff\",\n                \"#bbbbbb\",\n                \"#f06666\",\n                \"#ffc266\",\n                \"#ffff66\",\n                \"#66b966\",\n                \"#66a3e0\",\n                \"#c285ff\",\n                \"#888888\",\n                \"#a10000\",\n                \"#b26b00\",\n                \"#b2b200\",\n                \"#006100\",\n                \"#0047b2\",\n                \"#6b24b2\",\n                \"#444444\",\n                \"#5c0000\",\n                \"#663d00\",\n                \"#666600\",\n                \"#003700\",\n                \"#002966\",\n                \"#3d1466\"\n            ];\n            var FONTS = [\n                false,\n                \"serif\",\n                \"monospace\"\n            ];\n            var HEADERS = [\n                \"1\",\n                \"2\",\n                \"3\",\n                false\n            ];\n            var SIZES = [\n                \"small\",\n                false,\n                \"large\",\n                \"huge\"\n            ];\n            var BaseTheme = function(_Theme) {\n                _inherits(BaseTheme, _Theme);\n                function BaseTheme(quill, options) {\n                    _classCallCheck(this, BaseTheme);\n                    var _this = _possibleConstructorReturn(this, (BaseTheme.__proto__ || Object.getPrototypeOf(BaseTheme)).call(this, quill, options));\n                    var listener = function listener(e) {\n                        if (!document.body.contains(quill.root)) {\n                            return document.body.removeEventListener(\"click\", listener);\n                        }\n                        if (_this.tooltip != null && !_this.tooltip.root.contains(e.target) && document.activeElement !== _this.tooltip.textbox && !_this.quill.hasFocus()) {\n                            _this.tooltip.hide();\n                        }\n                        if (_this.pickers != null) {\n                            _this.pickers.forEach(function(picker) {\n                                if (!picker.container.contains(e.target)) {\n                                    picker.close();\n                                }\n                            });\n                        }\n                    };\n                    quill.emitter.listenDOM(\"click\", document.body, listener);\n                    return _this;\n                }\n                _createClass(BaseTheme, [\n                    {\n                        key: \"addModule\",\n                        value: function addModule(name) {\n                            var module1 = _get(BaseTheme.prototype.__proto__ || Object.getPrototypeOf(BaseTheme.prototype), \"addModule\", this).call(this, name);\n                            if (name === \"toolbar\") {\n                                this.extendToolbar(module1);\n                            }\n                            return module1;\n                        }\n                    },\n                    {\n                        key: \"buildButtons\",\n                        value: function buildButtons(buttons, icons) {\n                            buttons.forEach(function(button) {\n                                var className = button.getAttribute(\"class\") || \"\";\n                                className.split(/\\s+/).forEach(function(name) {\n                                    if (!name.startsWith(\"ql-\")) return;\n                                    name = name.slice(\"ql-\".length);\n                                    if (icons[name] == null) return;\n                                    if (name === \"direction\") {\n                                        button.innerHTML = icons[name][\"\"] + icons[name][\"rtl\"];\n                                    } else if (typeof icons[name] === \"string\") {\n                                        button.innerHTML = icons[name];\n                                    } else {\n                                        var value = button.value || \"\";\n                                        if (value != null && icons[name][value]) {\n                                            button.innerHTML = icons[name][value];\n                                        }\n                                    }\n                                });\n                            });\n                        }\n                    },\n                    {\n                        key: \"buildPickers\",\n                        value: function buildPickers(selects, icons) {\n                            var _this2 = this;\n                            this.pickers = selects.map(function(select) {\n                                if (select.classList.contains(\"ql-align\")) {\n                                    if (select.querySelector(\"option\") == null) {\n                                        fillSelect(select, ALIGNS);\n                                    }\n                                    return new _iconPicker2.default(select, icons.align);\n                                } else if (select.classList.contains(\"ql-background\") || select.classList.contains(\"ql-color\")) {\n                                    var format = select.classList.contains(\"ql-background\") ? \"background\" : \"color\";\n                                    if (select.querySelector(\"option\") == null) {\n                                        fillSelect(select, COLORS, format === \"background\" ? \"#ffffff\" : \"#000000\");\n                                    }\n                                    return new _colorPicker2.default(select, icons[format]);\n                                } else {\n                                    if (select.querySelector(\"option\") == null) {\n                                        if (select.classList.contains(\"ql-font\")) {\n                                            fillSelect(select, FONTS);\n                                        } else if (select.classList.contains(\"ql-header\")) {\n                                            fillSelect(select, HEADERS);\n                                        } else if (select.classList.contains(\"ql-size\")) {\n                                            fillSelect(select, SIZES);\n                                        }\n                                    }\n                                    return new _picker2.default(select);\n                                }\n                            });\n                            var update = function update() {\n                                _this2.pickers.forEach(function(picker) {\n                                    picker.update();\n                                });\n                            };\n                            this.quill.on(_emitter2.default.events.EDITOR_CHANGE, update);\n                        }\n                    }\n                ]);\n                return BaseTheme;\n            }(_theme2.default);\n            BaseTheme.DEFAULTS = (0, _extend2.default)(true, {}, _theme2.default.DEFAULTS, {\n                modules: {\n                    toolbar: {\n                        handlers: {\n                            formula: function formula() {\n                                this.quill.theme.tooltip.edit(\"formula\");\n                            },\n                            image: function image() {\n                                var _this3 = this;\n                                var fileInput = this.container.querySelector(\"input.ql-image[type=file]\");\n                                if (fileInput == null) {\n                                    fileInput = document.createElement(\"input\");\n                                    fileInput.setAttribute(\"type\", \"file\");\n                                    fileInput.setAttribute(\"accept\", \"image/png, image/gif, image/jpeg, image/bmp, image/x-icon\");\n                                    fileInput.classList.add(\"ql-image\");\n                                    fileInput.addEventListener(\"change\", function() {\n                                        if (fileInput.files != null && fileInput.files[0] != null) {\n                                            var reader = new FileReader();\n                                            reader.onload = function(e) {\n                                                var range = _this3.quill.getSelection(true);\n                                                _this3.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert({\n                                                    image: e.target.result\n                                                }), _emitter2.default.sources.USER);\n                                                _this3.quill.setSelection(range.index + 1, _emitter2.default.sources.SILENT);\n                                                fileInput.value = \"\";\n                                            };\n                                            reader.readAsDataURL(fileInput.files[0]);\n                                        }\n                                    });\n                                    this.container.appendChild(fileInput);\n                                }\n                                fileInput.click();\n                            },\n                            video: function video() {\n                                this.quill.theme.tooltip.edit(\"video\");\n                            }\n                        }\n                    }\n                }\n            });\n            var BaseTooltip = function(_Tooltip) {\n                _inherits(BaseTooltip, _Tooltip);\n                function BaseTooltip(quill, boundsContainer) {\n                    _classCallCheck(this, BaseTooltip);\n                    var _this4 = _possibleConstructorReturn(this, (BaseTooltip.__proto__ || Object.getPrototypeOf(BaseTooltip)).call(this, quill, boundsContainer));\n                    _this4.textbox = _this4.root.querySelector('input[type=\"text\"]');\n                    _this4.listen();\n                    return _this4;\n                }\n                _createClass(BaseTooltip, [\n                    {\n                        key: \"listen\",\n                        value: function listen() {\n                            var _this5 = this;\n                            this.textbox.addEventListener(\"keydown\", function(event) {\n                                if (_keyboard2.default.match(event, \"enter\")) {\n                                    _this5.save();\n                                    event.preventDefault();\n                                } else if (_keyboard2.default.match(event, \"escape\")) {\n                                    _this5.cancel();\n                                    event.preventDefault();\n                                }\n                            });\n                        }\n                    },\n                    {\n                        key: \"cancel\",\n                        value: function cancel() {\n                            this.hide();\n                        }\n                    },\n                    {\n                        key: \"edit\",\n                        value: function edit() {\n                            var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"link\";\n                            var preview = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n                            this.root.classList.remove(\"ql-hidden\");\n                            this.root.classList.add(\"ql-editing\");\n                            if (preview != null) {\n                                this.textbox.value = preview;\n                            } else if (mode !== this.root.getAttribute(\"data-mode\")) {\n                                this.textbox.value = \"\";\n                            }\n                            this.position(this.quill.getBounds(this.quill.selection.savedRange));\n                            this.textbox.select();\n                            this.textbox.setAttribute(\"placeholder\", this.textbox.getAttribute(\"data-\" + mode) || \"\");\n                            this.root.setAttribute(\"data-mode\", mode);\n                        }\n                    },\n                    {\n                        key: \"restoreFocus\",\n                        value: function restoreFocus() {\n                            var scrollTop = this.quill.scrollingContainer.scrollTop;\n                            this.quill.focus();\n                            this.quill.scrollingContainer.scrollTop = scrollTop;\n                        }\n                    },\n                    {\n                        key: \"save\",\n                        value: function save() {\n                            var value = this.textbox.value;\n                            switch(this.root.getAttribute(\"data-mode\")){\n                                case \"link\":\n                                    {\n                                        var scrollTop = this.quill.root.scrollTop;\n                                        if (this.linkRange) {\n                                            this.quill.formatText(this.linkRange, \"link\", value, _emitter2.default.sources.USER);\n                                            delete this.linkRange;\n                                        } else {\n                                            this.restoreFocus();\n                                            this.quill.format(\"link\", value, _emitter2.default.sources.USER);\n                                        }\n                                        this.quill.root.scrollTop = scrollTop;\n                                        break;\n                                    }\n                                case \"video\":\n                                    {\n                                        value = extractVideoUrl(value);\n                                    }\n                                case \"formula\":\n                                    {\n                                        if (!value) break;\n                                        var range = this.quill.getSelection(true);\n                                        if (range != null) {\n                                            var index = range.index + range.length;\n                                            this.quill.insertEmbed(index, this.root.getAttribute(\"data-mode\"), value, _emitter2.default.sources.USER);\n                                            if (this.root.getAttribute(\"data-mode\") === \"formula\") {\n                                                this.quill.insertText(index + 1, \" \", _emitter2.default.sources.USER);\n                                            }\n                                            this.quill.setSelection(index + 2, _emitter2.default.sources.USER);\n                                        }\n                                        break;\n                                    }\n                                default:\n                            }\n                            this.textbox.value = \"\";\n                            this.hide();\n                        }\n                    }\n                ]);\n                return BaseTooltip;\n            }(_tooltip2.default);\n            function extractVideoUrl(url) {\n                var match = url.match(/^(?:(https?):\\/\\/)?(?:(?:www|m)\\.)?youtube\\.com\\/watch.*v=([a-zA-Z0-9_-]+)/) || url.match(/^(?:(https?):\\/\\/)?(?:(?:www|m)\\.)?youtu\\.be\\/([a-zA-Z0-9_-]+)/);\n                if (match) {\n                    return (match[1] || \"https\") + \"://www.youtube.com/embed/\" + match[2] + \"?showinfo=0\";\n                }\n                if (match = url.match(/^(?:(https?):\\/\\/)?(?:www\\.)?vimeo\\.com\\/(\\d+)/)) {\n                    // eslint-disable-line no-cond-assign\n                    return (match[1] || \"https\") + \"://player.vimeo.com/video/\" + match[2] + \"/\";\n                }\n                return url;\n            }\n            function fillSelect(select, values) {\n                var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n                values.forEach(function(value) {\n                    var option = document.createElement(\"option\");\n                    if (value === defaultValue) {\n                        option.setAttribute(\"selected\", \"selected\");\n                    } else {\n                        option.setAttribute(\"value\", value);\n                    }\n                    select.appendChild(option);\n                });\n            }\n            exports1.BaseTooltip = BaseTooltip;\n            exports1.default = BaseTheme;\n        /***/ },\n        /* 44 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var LinkedList = /** @class */ function() {\n                function LinkedList() {\n                    this.head = this.tail = null;\n                    this.length = 0;\n                }\n                LinkedList.prototype.append = function() {\n                    var nodes = [];\n                    for(var _i = 0; _i < arguments.length; _i++){\n                        nodes[_i] = arguments[_i];\n                    }\n                    this.insertBefore(nodes[0], null);\n                    if (nodes.length > 1) {\n                        this.append.apply(this, nodes.slice(1));\n                    }\n                };\n                LinkedList.prototype.contains = function(node) {\n                    var cur, next = this.iterator();\n                    while(cur = next()){\n                        if (cur === node) return true;\n                    }\n                    return false;\n                };\n                LinkedList.prototype.insertBefore = function(node, refNode) {\n                    if (!node) return;\n                    node.next = refNode;\n                    if (refNode != null) {\n                        node.prev = refNode.prev;\n                        if (refNode.prev != null) {\n                            refNode.prev.next = node;\n                        }\n                        refNode.prev = node;\n                        if (refNode === this.head) {\n                            this.head = node;\n                        }\n                    } else if (this.tail != null) {\n                        this.tail.next = node;\n                        node.prev = this.tail;\n                        this.tail = node;\n                    } else {\n                        node.prev = null;\n                        this.head = this.tail = node;\n                    }\n                    this.length += 1;\n                };\n                LinkedList.prototype.offset = function(target) {\n                    var index = 0, cur = this.head;\n                    while(cur != null){\n                        if (cur === target) return index;\n                        index += cur.length();\n                        cur = cur.next;\n                    }\n                    return -1;\n                };\n                LinkedList.prototype.remove = function(node) {\n                    if (!this.contains(node)) return;\n                    if (node.prev != null) node.prev.next = node.next;\n                    if (node.next != null) node.next.prev = node.prev;\n                    if (node === this.head) this.head = node.next;\n                    if (node === this.tail) this.tail = node.prev;\n                    this.length -= 1;\n                };\n                LinkedList.prototype.iterator = function(curNode) {\n                    if (curNode === void 0) {\n                        curNode = this.head;\n                    }\n                    // TODO use yield when we can\n                    return function() {\n                        var ret = curNode;\n                        if (curNode != null) curNode = curNode.next;\n                        return ret;\n                    };\n                };\n                LinkedList.prototype.find = function(index, inclusive) {\n                    if (inclusive === void 0) {\n                        inclusive = false;\n                    }\n                    var cur, next = this.iterator();\n                    while(cur = next()){\n                        var length = cur.length();\n                        if (index < length || inclusive && index === length && (cur.next == null || cur.next.length() !== 0)) {\n                            return [\n                                cur,\n                                index\n                            ];\n                        }\n                        index -= length;\n                    }\n                    return [\n                        null,\n                        0\n                    ];\n                };\n                LinkedList.prototype.forEach = function(callback) {\n                    var cur, next = this.iterator();\n                    while(cur = next()){\n                        callback(cur);\n                    }\n                };\n                LinkedList.prototype.forEachAt = function(index, length, callback) {\n                    if (length <= 0) return;\n                    var _a = this.find(index), startNode = _a[0], offset = _a[1];\n                    var cur, curIndex = index - offset, next = this.iterator(startNode);\n                    while((cur = next()) && curIndex < index + length){\n                        var curLength = cur.length();\n                        if (index > curIndex) {\n                            callback(cur, index - curIndex, Math.min(length, curIndex + curLength - index));\n                        } else {\n                            callback(cur, 0, Math.min(curLength, index + length - curIndex));\n                        }\n                        curIndex += curLength;\n                    }\n                };\n                LinkedList.prototype.map = function(callback) {\n                    return this.reduce(function(memo, cur) {\n                        memo.push(callback(cur));\n                        return memo;\n                    }, []);\n                };\n                LinkedList.prototype.reduce = function(callback, memo) {\n                    var cur, next = this.iterator();\n                    while(cur = next()){\n                        memo = callback(memo, cur);\n                    }\n                    return memo;\n                };\n                return LinkedList;\n            }();\n            exports1.default = LinkedList;\n        /***/ },\n        /* 45 */ /***/ function(module1, exports1, __nested_webpack_require_396182__) {\n            \"use strict\";\n            var __extends = this && this.__extends || function() {\n                var extendStatics = Object.setPrototypeOf || ({\n                    __proto__: []\n                }) instanceof Array && function(d, b) {\n                    d.__proto__ = b;\n                } || function(d, b) {\n                    for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n                };\n                return function(d, b) {\n                    extendStatics(d, b);\n                    function __() {\n                        this.constructor = d;\n                    }\n                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n                };\n            }();\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var container_1 = __nested_webpack_require_396182__(17);\n            var Registry = __nested_webpack_require_396182__(1);\n            var OBSERVER_CONFIG = {\n                attributes: true,\n                characterData: true,\n                characterDataOldValue: true,\n                childList: true,\n                subtree: true\n            };\n            var MAX_OPTIMIZE_ITERATIONS = 100;\n            var ScrollBlot = /** @class */ function(_super) {\n                __extends(ScrollBlot, _super);\n                function ScrollBlot(node) {\n                    var _this = _super.call(this, node) || this;\n                    _this.scroll = _this;\n                    _this.observer = new MutationObserver(function(mutations) {\n                        _this.update(mutations);\n                    });\n                    _this.observer.observe(_this.domNode, OBSERVER_CONFIG);\n                    _this.attach();\n                    return _this;\n                }\n                ScrollBlot.prototype.detach = function() {\n                    _super.prototype.detach.call(this);\n                    this.observer.disconnect();\n                };\n                ScrollBlot.prototype.deleteAt = function(index, length) {\n                    this.update();\n                    if (index === 0 && length === this.length()) {\n                        this.children.forEach(function(child) {\n                            child.remove();\n                        });\n                    } else {\n                        _super.prototype.deleteAt.call(this, index, length);\n                    }\n                };\n                ScrollBlot.prototype.formatAt = function(index, length, name, value) {\n                    this.update();\n                    _super.prototype.formatAt.call(this, index, length, name, value);\n                };\n                ScrollBlot.prototype.insertAt = function(index, value, def) {\n                    this.update();\n                    _super.prototype.insertAt.call(this, index, value, def);\n                };\n                ScrollBlot.prototype.optimize = function(mutations, context) {\n                    var _this = this;\n                    if (mutations === void 0) {\n                        mutations = [];\n                    }\n                    if (context === void 0) {\n                        context = {};\n                    }\n                    _super.prototype.optimize.call(this, context);\n                    // We must modify mutations directly, cannot make copy and then modify\n                    var records = [].slice.call(this.observer.takeRecords());\n                    // Array.push currently seems to be implemented by a non-tail recursive function\n                    // so we cannot just mutations.push.apply(mutations, this.observer.takeRecords());\n                    while(records.length > 0)mutations.push(records.pop());\n                    // TODO use WeakMap\n                    var mark = function(blot, markParent) {\n                        if (markParent === void 0) {\n                            markParent = true;\n                        }\n                        if (blot == null || blot === _this) return;\n                        if (blot.domNode.parentNode == null) return;\n                        // @ts-ignore\n                        if (blot.domNode[Registry.DATA_KEY].mutations == null) {\n                            // @ts-ignore\n                            blot.domNode[Registry.DATA_KEY].mutations = [];\n                        }\n                        if (markParent) mark(blot.parent);\n                    };\n                    var optimize = function(blot) {\n                        // Post-order traversal\n                        if (// @ts-ignore\n                        blot.domNode[Registry.DATA_KEY] == null || // @ts-ignore\n                        blot.domNode[Registry.DATA_KEY].mutations == null) {\n                            return;\n                        }\n                        if (blot instanceof container_1.default) {\n                            blot.children.forEach(optimize);\n                        }\n                        blot.optimize(context);\n                    };\n                    var remaining = mutations;\n                    for(var i = 0; remaining.length > 0; i += 1){\n                        if (i >= MAX_OPTIMIZE_ITERATIONS) {\n                            throw new Error(\"[Parchment] Maximum optimize iterations reached\");\n                        }\n                        remaining.forEach(function(mutation) {\n                            var blot = Registry.find(mutation.target, true);\n                            if (blot == null) return;\n                            if (blot.domNode === mutation.target) {\n                                if (mutation.type === \"childList\") {\n                                    mark(Registry.find(mutation.previousSibling, false));\n                                    [].forEach.call(mutation.addedNodes, function(node) {\n                                        var child = Registry.find(node, false);\n                                        mark(child, false);\n                                        if (child instanceof container_1.default) {\n                                            child.children.forEach(function(grandChild) {\n                                                mark(grandChild, false);\n                                            });\n                                        }\n                                    });\n                                } else if (mutation.type === \"attributes\") {\n                                    mark(blot.prev);\n                                }\n                            }\n                            mark(blot);\n                        });\n                        this.children.forEach(optimize);\n                        remaining = [].slice.call(this.observer.takeRecords());\n                        records = remaining.slice();\n                        while(records.length > 0)mutations.push(records.pop());\n                    }\n                };\n                ScrollBlot.prototype.update = function(mutations, context) {\n                    var _this = this;\n                    if (context === void 0) {\n                        context = {};\n                    }\n                    mutations = mutations || this.observer.takeRecords();\n                    // TODO use WeakMap\n                    mutations.map(function(mutation) {\n                        var blot = Registry.find(mutation.target, true);\n                        if (blot == null) return null;\n                        // @ts-ignore\n                        if (blot.domNode[Registry.DATA_KEY].mutations == null) {\n                            // @ts-ignore\n                            blot.domNode[Registry.DATA_KEY].mutations = [\n                                mutation\n                            ];\n                            return blot;\n                        } else {\n                            // @ts-ignore\n                            blot.domNode[Registry.DATA_KEY].mutations.push(mutation);\n                            return null;\n                        }\n                    }).forEach(function(blot) {\n                        if (blot == null || blot === _this || //@ts-ignore\n                        blot.domNode[Registry.DATA_KEY] == null) return;\n                        // @ts-ignore\n                        blot.update(blot.domNode[Registry.DATA_KEY].mutations || [], context);\n                    });\n                    // @ts-ignore\n                    if (this.domNode[Registry.DATA_KEY].mutations != null) {\n                        // @ts-ignore\n                        _super.prototype.update.call(this, this.domNode[Registry.DATA_KEY].mutations, context);\n                    }\n                    this.optimize(mutations, context);\n                };\n                ScrollBlot.blotName = \"scroll\";\n                ScrollBlot.defaultChild = \"block\";\n                ScrollBlot.scope = Registry.Scope.BLOCK_BLOT;\n                ScrollBlot.tagName = \"DIV\";\n                return ScrollBlot;\n            }(container_1.default);\n            exports1.default = ScrollBlot;\n        /***/ },\n        /* 46 */ /***/ function(module1, exports1, __nested_webpack_require_405318__) {\n            \"use strict\";\n            var __extends = this && this.__extends || function() {\n                var extendStatics = Object.setPrototypeOf || ({\n                    __proto__: []\n                }) instanceof Array && function(d, b) {\n                    d.__proto__ = b;\n                } || function(d, b) {\n                    for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n                };\n                return function(d, b) {\n                    extendStatics(d, b);\n                    function __() {\n                        this.constructor = d;\n                    }\n                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n                };\n            }();\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var format_1 = __nested_webpack_require_405318__(18);\n            var Registry = __nested_webpack_require_405318__(1);\n            // Shallow object comparison\n            function isEqual(obj1, obj2) {\n                if (Object.keys(obj1).length !== Object.keys(obj2).length) return false;\n                // @ts-ignore\n                for(var prop in obj1){\n                    // @ts-ignore\n                    if (obj1[prop] !== obj2[prop]) return false;\n                }\n                return true;\n            }\n            var InlineBlot = /** @class */ function(_super) {\n                __extends(InlineBlot, _super);\n                function InlineBlot() {\n                    return _super !== null && _super.apply(this, arguments) || this;\n                }\n                InlineBlot.formats = function(domNode) {\n                    if (domNode.tagName === InlineBlot.tagName) return undefined;\n                    return _super.formats.call(this, domNode);\n                };\n                InlineBlot.prototype.format = function(name, value) {\n                    var _this = this;\n                    if (name === this.statics.blotName && !value) {\n                        this.children.forEach(function(child) {\n                            if (!(child instanceof format_1.default)) {\n                                child = child.wrap(InlineBlot.blotName, true);\n                            }\n                            _this.attributes.copy(child);\n                        });\n                        this.unwrap();\n                    } else {\n                        _super.prototype.format.call(this, name, value);\n                    }\n                };\n                InlineBlot.prototype.formatAt = function(index, length, name, value) {\n                    if (this.formats()[name] != null || Registry.query(name, Registry.Scope.ATTRIBUTE)) {\n                        var blot = this.isolate(index, length);\n                        blot.format(name, value);\n                    } else {\n                        _super.prototype.formatAt.call(this, index, length, name, value);\n                    }\n                };\n                InlineBlot.prototype.optimize = function(context) {\n                    _super.prototype.optimize.call(this, context);\n                    var formats = this.formats();\n                    if (Object.keys(formats).length === 0) {\n                        return this.unwrap(); // unformatted span\n                    }\n                    var next = this.next;\n                    if (next instanceof InlineBlot && next.prev === this && isEqual(formats, next.formats())) {\n                        next.moveChildren(this);\n                        next.remove();\n                    }\n                };\n                InlineBlot.blotName = \"inline\";\n                InlineBlot.scope = Registry.Scope.INLINE_BLOT;\n                InlineBlot.tagName = \"SPAN\";\n                return InlineBlot;\n            }(format_1.default);\n            exports1.default = InlineBlot;\n        /***/ },\n        /* 47 */ /***/ function(module1, exports1, __nested_webpack_require_409272__) {\n            \"use strict\";\n            var __extends = this && this.__extends || function() {\n                var extendStatics = Object.setPrototypeOf || ({\n                    __proto__: []\n                }) instanceof Array && function(d, b) {\n                    d.__proto__ = b;\n                } || function(d, b) {\n                    for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n                };\n                return function(d, b) {\n                    extendStatics(d, b);\n                    function __() {\n                        this.constructor = d;\n                    }\n                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n                };\n            }();\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var format_1 = __nested_webpack_require_409272__(18);\n            var Registry = __nested_webpack_require_409272__(1);\n            var BlockBlot = /** @class */ function(_super) {\n                __extends(BlockBlot, _super);\n                function BlockBlot() {\n                    return _super !== null && _super.apply(this, arguments) || this;\n                }\n                BlockBlot.formats = function(domNode) {\n                    var tagName = Registry.query(BlockBlot.blotName).tagName;\n                    if (domNode.tagName === tagName) return undefined;\n                    return _super.formats.call(this, domNode);\n                };\n                BlockBlot.prototype.format = function(name, value) {\n                    if (Registry.query(name, Registry.Scope.BLOCK) == null) {\n                        return;\n                    } else if (name === this.statics.blotName && !value) {\n                        this.replaceWith(BlockBlot.blotName);\n                    } else {\n                        _super.prototype.format.call(this, name, value);\n                    }\n                };\n                BlockBlot.prototype.formatAt = function(index, length, name, value) {\n                    if (Registry.query(name, Registry.Scope.BLOCK) != null) {\n                        this.format(name, value);\n                    } else {\n                        _super.prototype.formatAt.call(this, index, length, name, value);\n                    }\n                };\n                BlockBlot.prototype.insertAt = function(index, value, def) {\n                    if (def == null || Registry.query(value, Registry.Scope.INLINE) != null) {\n                        // Insert text or inline\n                        _super.prototype.insertAt.call(this, index, value, def);\n                    } else {\n                        var after = this.split(index);\n                        var blot = Registry.create(value, def);\n                        after.parent.insertBefore(blot, after);\n                    }\n                };\n                BlockBlot.prototype.update = function(mutations, context) {\n                    if (navigator.userAgent.match(/Trident/)) {\n                        this.build();\n                    } else {\n                        _super.prototype.update.call(this, mutations, context);\n                    }\n                };\n                BlockBlot.blotName = \"block\";\n                BlockBlot.scope = Registry.Scope.BLOCK_BLOT;\n                BlockBlot.tagName = \"P\";\n                return BlockBlot;\n            }(format_1.default);\n            exports1.default = BlockBlot;\n        /***/ },\n        /* 48 */ /***/ function(module1, exports1, __nested_webpack_require_412820__) {\n            \"use strict\";\n            var __extends = this && this.__extends || function() {\n                var extendStatics = Object.setPrototypeOf || ({\n                    __proto__: []\n                }) instanceof Array && function(d, b) {\n                    d.__proto__ = b;\n                } || function(d, b) {\n                    for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n                };\n                return function(d, b) {\n                    extendStatics(d, b);\n                    function __() {\n                        this.constructor = d;\n                    }\n                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n                };\n            }();\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var leaf_1 = __nested_webpack_require_412820__(19);\n            var EmbedBlot = /** @class */ function(_super) {\n                __extends(EmbedBlot, _super);\n                function EmbedBlot() {\n                    return _super !== null && _super.apply(this, arguments) || this;\n                }\n                EmbedBlot.formats = function(domNode) {\n                    return undefined;\n                };\n                EmbedBlot.prototype.format = function(name, value) {\n                    // super.formatAt wraps, which is what we want in general,\n                    // but this allows subclasses to overwrite for formats\n                    // that just apply to particular embeds\n                    _super.prototype.formatAt.call(this, 0, this.length(), name, value);\n                };\n                EmbedBlot.prototype.formatAt = function(index, length, name, value) {\n                    if (index === 0 && length === this.length()) {\n                        this.format(name, value);\n                    } else {\n                        _super.prototype.formatAt.call(this, index, length, name, value);\n                    }\n                };\n                EmbedBlot.prototype.formats = function() {\n                    return this.statics.formats(this.domNode);\n                };\n                return EmbedBlot;\n            }(leaf_1.default);\n            exports1.default = EmbedBlot;\n        /***/ },\n        /* 49 */ /***/ function(module1, exports1, __nested_webpack_require_415170__) {\n            \"use strict\";\n            var __extends = this && this.__extends || function() {\n                var extendStatics = Object.setPrototypeOf || ({\n                    __proto__: []\n                }) instanceof Array && function(d, b) {\n                    d.__proto__ = b;\n                } || function(d, b) {\n                    for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n                };\n                return function(d, b) {\n                    extendStatics(d, b);\n                    function __() {\n                        this.constructor = d;\n                    }\n                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n                };\n            }();\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var leaf_1 = __nested_webpack_require_415170__(19);\n            var Registry = __nested_webpack_require_415170__(1);\n            var TextBlot = /** @class */ function(_super) {\n                __extends(TextBlot, _super);\n                function TextBlot(node) {\n                    var _this = _super.call(this, node) || this;\n                    _this.text = _this.statics.value(_this.domNode);\n                    return _this;\n                }\n                TextBlot.create = function(value) {\n                    return document.createTextNode(value);\n                };\n                TextBlot.value = function(domNode) {\n                    var text = domNode.data;\n                    // @ts-ignore\n                    if (text[\"normalize\"]) text = text[\"normalize\"]();\n                    return text;\n                };\n                TextBlot.prototype.deleteAt = function(index, length) {\n                    this.domNode.data = this.text = this.text.slice(0, index) + this.text.slice(index + length);\n                };\n                TextBlot.prototype.index = function(node, offset) {\n                    if (this.domNode === node) {\n                        return offset;\n                    }\n                    return -1;\n                };\n                TextBlot.prototype.insertAt = function(index, value, def) {\n                    if (def == null) {\n                        this.text = this.text.slice(0, index) + value + this.text.slice(index);\n                        this.domNode.data = this.text;\n                    } else {\n                        _super.prototype.insertAt.call(this, index, value, def);\n                    }\n                };\n                TextBlot.prototype.length = function() {\n                    return this.text.length;\n                };\n                TextBlot.prototype.optimize = function(context) {\n                    _super.prototype.optimize.call(this, context);\n                    this.text = this.statics.value(this.domNode);\n                    if (this.text.length === 0) {\n                        this.remove();\n                    } else if (this.next instanceof TextBlot && this.next.prev === this) {\n                        this.insertAt(this.length(), this.next.value());\n                        this.next.remove();\n                    }\n                };\n                TextBlot.prototype.position = function(index, inclusive) {\n                    if (inclusive === void 0) {\n                        inclusive = false;\n                    }\n                    return [\n                        this.domNode,\n                        index\n                    ];\n                };\n                TextBlot.prototype.split = function(index, force) {\n                    if (force === void 0) {\n                        force = false;\n                    }\n                    if (!force) {\n                        if (index === 0) return this;\n                        if (index === this.length()) return this.next;\n                    }\n                    var after = Registry.create(this.domNode.splitText(index));\n                    this.parent.insertBefore(after, this.next);\n                    this.text = this.statics.value(this.domNode);\n                    return after;\n                };\n                TextBlot.prototype.update = function(mutations, context) {\n                    var _this = this;\n                    if (mutations.some(function(mutation) {\n                        return mutation.type === \"characterData\" && mutation.target === _this.domNode;\n                    })) {\n                        this.text = this.statics.value(this.domNode);\n                    }\n                };\n                TextBlot.prototype.value = function() {\n                    return this.text;\n                };\n                TextBlot.blotName = \"text\";\n                TextBlot.scope = Registry.Scope.INLINE_BLOT;\n                return TextBlot;\n            }(leaf_1.default);\n            exports1.default = TextBlot;\n        /***/ },\n        /* 50 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            var elem = document.createElement(\"div\");\n            elem.classList.toggle(\"test-class\", false);\n            if (elem.classList.contains(\"test-class\")) {\n                var _toggle = DOMTokenList.prototype.toggle;\n                DOMTokenList.prototype.toggle = function(token, force) {\n                    if (arguments.length > 1 && !this.contains(token) === !force) {\n                        return force;\n                    } else {\n                        return _toggle.call(this, token);\n                    }\n                };\n            }\n            if (!String.prototype.startsWith) {\n                String.prototype.startsWith = function(searchString, position) {\n                    position = position || 0;\n                    return this.substr(position, searchString.length) === searchString;\n                };\n            }\n            if (!String.prototype.endsWith) {\n                String.prototype.endsWith = function(searchString, position) {\n                    var subjectString = this.toString();\n                    if (typeof position !== \"number\" || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {\n                        position = subjectString.length;\n                    }\n                    position -= searchString.length;\n                    var lastIndex = subjectString.indexOf(searchString, position);\n                    return lastIndex !== -1 && lastIndex === position;\n                };\n            }\n            if (!Array.prototype.find) {\n                Object.defineProperty(Array.prototype, \"find\", {\n                    value: function value(predicate) {\n                        if (this === null) {\n                            throw new TypeError(\"Array.prototype.find called on null or undefined\");\n                        }\n                        if (typeof predicate !== \"function\") {\n                            throw new TypeError(\"predicate must be a function\");\n                        }\n                        var list = Object(this);\n                        var length = list.length >>> 0;\n                        var thisArg = arguments[1];\n                        var value;\n                        for(var i = 0; i < length; i++){\n                            value = list[i];\n                            if (predicate.call(thisArg, value, i, list)) {\n                                return value;\n                            }\n                        }\n                        return undefined;\n                    }\n                });\n            }\n            document.addEventListener(\"DOMContentLoaded\", function() {\n                // Disable resizing in Firefox\n                document.execCommand(\"enableObjectResizing\", false, false);\n                // Disable automatic linkifying in IE11\n                document.execCommand(\"autoUrlDetect\", false, false);\n            });\n        /***/ },\n        /* 51 */ /***/ function(module1, exports1) {\n            /**\n * This library modifies the diff-patch-match library by Neil Fraser\n * by removing the patch and match functionality and certain advanced\n * options in the diff function. The original license is as follows:\n *\n * ===\n *\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */ var DIFF_DELETE = -1;\n            var DIFF_INSERT = 1;\n            var DIFF_EQUAL = 0;\n            /**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {Int} cursor_pos Expected edit position in text1 (optional)\n * @return {Array} Array of diff tuples.\n */ function diff_main(text1, text2, cursor_pos) {\n                // Check for equality (speedup).\n                if (text1 == text2) {\n                    if (text1) {\n                        return [\n                            [\n                                DIFF_EQUAL,\n                                text1\n                            ]\n                        ];\n                    }\n                    return [];\n                }\n                // Check cursor_pos within bounds\n                if (cursor_pos < 0 || text1.length < cursor_pos) {\n                    cursor_pos = null;\n                }\n                // Trim off common prefix (speedup).\n                var commonlength = diff_commonPrefix(text1, text2);\n                var commonprefix = text1.substring(0, commonlength);\n                text1 = text1.substring(commonlength);\n                text2 = text2.substring(commonlength);\n                // Trim off common suffix (speedup).\n                commonlength = diff_commonSuffix(text1, text2);\n                var commonsuffix = text1.substring(text1.length - commonlength);\n                text1 = text1.substring(0, text1.length - commonlength);\n                text2 = text2.substring(0, text2.length - commonlength);\n                // Compute the diff on the middle block.\n                var diffs = diff_compute_(text1, text2);\n                // Restore the prefix and suffix.\n                if (commonprefix) {\n                    diffs.unshift([\n                        DIFF_EQUAL,\n                        commonprefix\n                    ]);\n                }\n                if (commonsuffix) {\n                    diffs.push([\n                        DIFF_EQUAL,\n                        commonsuffix\n                    ]);\n                }\n                diff_cleanupMerge(diffs);\n                if (cursor_pos != null) {\n                    diffs = fix_cursor(diffs, cursor_pos);\n                }\n                diffs = fix_emoji(diffs);\n                return diffs;\n            }\n            ;\n            /**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n */ function diff_compute_(text1, text2) {\n                var diffs;\n                if (!text1) {\n                    // Just add some text (speedup).\n                    return [\n                        [\n                            DIFF_INSERT,\n                            text2\n                        ]\n                    ];\n                }\n                if (!text2) {\n                    // Just delete some text (speedup).\n                    return [\n                        [\n                            DIFF_DELETE,\n                            text1\n                        ]\n                    ];\n                }\n                var longtext = text1.length > text2.length ? text1 : text2;\n                var shorttext = text1.length > text2.length ? text2 : text1;\n                var i = longtext.indexOf(shorttext);\n                if (i != -1) {\n                    // Shorter text is inside the longer text (speedup).\n                    diffs = [\n                        [\n                            DIFF_INSERT,\n                            longtext.substring(0, i)\n                        ],\n                        [\n                            DIFF_EQUAL,\n                            shorttext\n                        ],\n                        [\n                            DIFF_INSERT,\n                            longtext.substring(i + shorttext.length)\n                        ]\n                    ];\n                    // Swap insertions for deletions if diff is reversed.\n                    if (text1.length > text2.length) {\n                        diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n                    }\n                    return diffs;\n                }\n                if (shorttext.length == 1) {\n                    // Single character string.\n                    // After the previous speedup, the character can't be an equality.\n                    return [\n                        [\n                            DIFF_DELETE,\n                            text1\n                        ],\n                        [\n                            DIFF_INSERT,\n                            text2\n                        ]\n                    ];\n                }\n                // Check to see if the problem can be split in two.\n                var hm = diff_halfMatch_(text1, text2);\n                if (hm) {\n                    // A half-match was found, sort out the return data.\n                    var text1_a = hm[0];\n                    var text1_b = hm[1];\n                    var text2_a = hm[2];\n                    var text2_b = hm[3];\n                    var mid_common = hm[4];\n                    // Send both pairs off for separate processing.\n                    var diffs_a = diff_main(text1_a, text2_a);\n                    var diffs_b = diff_main(text1_b, text2_b);\n                    // Merge the results.\n                    return diffs_a.concat([\n                        [\n                            DIFF_EQUAL,\n                            mid_common\n                        ]\n                    ], diffs_b);\n                }\n                return diff_bisect_(text1, text2);\n            }\n            ;\n            /**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n * @private\n */ function diff_bisect_(text1, text2) {\n                // Cache the text lengths to prevent multiple calls.\n                var text1_length = text1.length;\n                var text2_length = text2.length;\n                var max_d = Math.ceil((text1_length + text2_length) / 2);\n                var v_offset = max_d;\n                var v_length = 2 * max_d;\n                var v1 = new Array(v_length);\n                var v2 = new Array(v_length);\n                // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n                // integers and undefined.\n                for(var x = 0; x < v_length; x++){\n                    v1[x] = -1;\n                    v2[x] = -1;\n                }\n                v1[v_offset + 1] = 0;\n                v2[v_offset + 1] = 0;\n                var delta = text1_length - text2_length;\n                // If the total number of characters is odd, then the front path will collide\n                // with the reverse path.\n                var front = delta % 2 != 0;\n                // Offsets for start and end of k loop.\n                // Prevents mapping of space beyond the grid.\n                var k1start = 0;\n                var k1end = 0;\n                var k2start = 0;\n                var k2end = 0;\n                for(var d = 0; d < max_d; d++){\n                    // Walk the front path one step.\n                    for(var k1 = -d + k1start; k1 <= d - k1end; k1 += 2){\n                        var k1_offset = v_offset + k1;\n                        var x1;\n                        if (k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1]) {\n                            x1 = v1[k1_offset + 1];\n                        } else {\n                            x1 = v1[k1_offset - 1] + 1;\n                        }\n                        var y1 = x1 - k1;\n                        while(x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1)){\n                            x1++;\n                            y1++;\n                        }\n                        v1[k1_offset] = x1;\n                        if (x1 > text1_length) {\n                            // Ran off the right of the graph.\n                            k1end += 2;\n                        } else if (y1 > text2_length) {\n                            // Ran off the bottom of the graph.\n                            k1start += 2;\n                        } else if (front) {\n                            var k2_offset = v_offset + delta - k1;\n                            if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n                                // Mirror x2 onto top-left coordinate system.\n                                var x2 = text1_length - v2[k2_offset];\n                                if (x1 >= x2) {\n                                    // Overlap detected.\n                                    return diff_bisectSplit_(text1, text2, x1, y1);\n                                }\n                            }\n                        }\n                    }\n                    // Walk the reverse path one step.\n                    for(var k2 = -d + k2start; k2 <= d - k2end; k2 += 2){\n                        var k2_offset = v_offset + k2;\n                        var x2;\n                        if (k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1]) {\n                            x2 = v2[k2_offset + 1];\n                        } else {\n                            x2 = v2[k2_offset - 1] + 1;\n                        }\n                        var y2 = x2 - k2;\n                        while(x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) == text2.charAt(text2_length - y2 - 1)){\n                            x2++;\n                            y2++;\n                        }\n                        v2[k2_offset] = x2;\n                        if (x2 > text1_length) {\n                            // Ran off the left of the graph.\n                            k2end += 2;\n                        } else if (y2 > text2_length) {\n                            // Ran off the top of the graph.\n                            k2start += 2;\n                        } else if (!front) {\n                            var k1_offset = v_offset + delta - k2;\n                            if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n                                var x1 = v1[k1_offset];\n                                var y1 = v_offset + x1 - k1_offset;\n                                // Mirror x2 onto top-left coordinate system.\n                                x2 = text1_length - x2;\n                                if (x1 >= x2) {\n                                    // Overlap detected.\n                                    return diff_bisectSplit_(text1, text2, x1, y1);\n                                }\n                            }\n                        }\n                    }\n                }\n                // Diff took too long and hit the deadline or\n                // number of diffs equals number of characters, no commonality at all.\n                return [\n                    [\n                        DIFF_DELETE,\n                        text1\n                    ],\n                    [\n                        DIFF_INSERT,\n                        text2\n                    ]\n                ];\n            }\n            ;\n            /**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @return {Array} Array of diff tuples.\n */ function diff_bisectSplit_(text1, text2, x, y) {\n                var text1a = text1.substring(0, x);\n                var text2a = text2.substring(0, y);\n                var text1b = text1.substring(x);\n                var text2b = text2.substring(y);\n                // Compute both diffs serially.\n                var diffs = diff_main(text1a, text2a);\n                var diffsb = diff_main(text1b, text2b);\n                return diffs.concat(diffsb);\n            }\n            ;\n            /**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */ function diff_commonPrefix(text1, text2) {\n                // Quick check for common null cases.\n                if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n                    return 0;\n                }\n                // Binary search.\n                // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n                var pointermin = 0;\n                var pointermax = Math.min(text1.length, text2.length);\n                var pointermid = pointermax;\n                var pointerstart = 0;\n                while(pointermin < pointermid){\n                    if (text1.substring(pointerstart, pointermid) == text2.substring(pointerstart, pointermid)) {\n                        pointermin = pointermid;\n                        pointerstart = pointermin;\n                    } else {\n                        pointermax = pointermid;\n                    }\n                    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n                }\n                return pointermid;\n            }\n            ;\n            /**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */ function diff_commonSuffix(text1, text2) {\n                // Quick check for common null cases.\n                if (!text1 || !text2 || text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n                    return 0;\n                }\n                // Binary search.\n                // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n                var pointermin = 0;\n                var pointermax = Math.min(text1.length, text2.length);\n                var pointermid = pointermax;\n                var pointerend = 0;\n                while(pointermin < pointermid){\n                    if (text1.substring(text1.length - pointermid, text1.length - pointerend) == text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n                        pointermin = pointermid;\n                        pointerend = pointermin;\n                    } else {\n                        pointermax = pointermid;\n                    }\n                    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n                }\n                return pointermid;\n            }\n            ;\n            /**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n */ function diff_halfMatch_(text1, text2) {\n                var longtext = text1.length > text2.length ? text1 : text2;\n                var shorttext = text1.length > text2.length ? text2 : text1;\n                if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n                    return null; // Pointless.\n                }\n                /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */ function diff_halfMatchI_(longtext, shorttext, i) {\n                    // Start with a 1/4 length substring at position i as a seed.\n                    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n                    var j = -1;\n                    var best_common = \"\";\n                    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n                    while((j = shorttext.indexOf(seed, j + 1)) != -1){\n                        var prefixLength = diff_commonPrefix(longtext.substring(i), shorttext.substring(j));\n                        var suffixLength = diff_commonSuffix(longtext.substring(0, i), shorttext.substring(0, j));\n                        if (best_common.length < suffixLength + prefixLength) {\n                            best_common = shorttext.substring(j - suffixLength, j) + shorttext.substring(j, j + prefixLength);\n                            best_longtext_a = longtext.substring(0, i - suffixLength);\n                            best_longtext_b = longtext.substring(i + prefixLength);\n                            best_shorttext_a = shorttext.substring(0, j - suffixLength);\n                            best_shorttext_b = shorttext.substring(j + prefixLength);\n                        }\n                    }\n                    if (best_common.length * 2 >= longtext.length) {\n                        return [\n                            best_longtext_a,\n                            best_longtext_b,\n                            best_shorttext_a,\n                            best_shorttext_b,\n                            best_common\n                        ];\n                    } else {\n                        return null;\n                    }\n                }\n                // First check if the second quarter is the seed for a half-match.\n                var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4));\n                // Check again based on the third quarter.\n                var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));\n                var hm;\n                if (!hm1 && !hm2) {\n                    return null;\n                } else if (!hm2) {\n                    hm = hm1;\n                } else if (!hm1) {\n                    hm = hm2;\n                } else {\n                    // Both matched.  Select the longest.\n                    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n                }\n                // A half-match was found, sort out the return data.\n                var text1_a, text1_b, text2_a, text2_b;\n                if (text1.length > text2.length) {\n                    text1_a = hm[0];\n                    text1_b = hm[1];\n                    text2_a = hm[2];\n                    text2_b = hm[3];\n                } else {\n                    text2_a = hm[0];\n                    text2_b = hm[1];\n                    text1_a = hm[2];\n                    text1_b = hm[3];\n                }\n                var mid_common = hm[4];\n                return [\n                    text1_a,\n                    text1_b,\n                    text2_a,\n                    text2_b,\n                    mid_common\n                ];\n            }\n            ;\n            /**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {Array} diffs Array of diff tuples.\n */ function diff_cleanupMerge(diffs) {\n                diffs.push([\n                    DIFF_EQUAL,\n                    \"\"\n                ]); // Add a dummy entry at the end.\n                var pointer = 0;\n                var count_delete = 0;\n                var count_insert = 0;\n                var text_delete = \"\";\n                var text_insert = \"\";\n                var commonlength;\n                while(pointer < diffs.length){\n                    switch(diffs[pointer][0]){\n                        case DIFF_INSERT:\n                            count_insert++;\n                            text_insert += diffs[pointer][1];\n                            pointer++;\n                            break;\n                        case DIFF_DELETE:\n                            count_delete++;\n                            text_delete += diffs[pointer][1];\n                            pointer++;\n                            break;\n                        case DIFF_EQUAL:\n                            // Upon reaching an equality, check for prior redundancies.\n                            if (count_delete + count_insert > 1) {\n                                if (count_delete !== 0 && count_insert !== 0) {\n                                    // Factor out any common prefixies.\n                                    commonlength = diff_commonPrefix(text_insert, text_delete);\n                                    if (commonlength !== 0) {\n                                        if (pointer - count_delete - count_insert > 0 && diffs[pointer - count_delete - count_insert - 1][0] == DIFF_EQUAL) {\n                                            diffs[pointer - count_delete - count_insert - 1][1] += text_insert.substring(0, commonlength);\n                                        } else {\n                                            diffs.splice(0, 0, [\n                                                DIFF_EQUAL,\n                                                text_insert.substring(0, commonlength)\n                                            ]);\n                                            pointer++;\n                                        }\n                                        text_insert = text_insert.substring(commonlength);\n                                        text_delete = text_delete.substring(commonlength);\n                                    }\n                                    // Factor out any common suffixies.\n                                    commonlength = diff_commonSuffix(text_insert, text_delete);\n                                    if (commonlength !== 0) {\n                                        diffs[pointer][1] = text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];\n                                        text_insert = text_insert.substring(0, text_insert.length - commonlength);\n                                        text_delete = text_delete.substring(0, text_delete.length - commonlength);\n                                    }\n                                }\n                                // Delete the offending records and add the merged ones.\n                                if (count_delete === 0) {\n                                    diffs.splice(pointer - count_insert, count_delete + count_insert, [\n                                        DIFF_INSERT,\n                                        text_insert\n                                    ]);\n                                } else if (count_insert === 0) {\n                                    diffs.splice(pointer - count_delete, count_delete + count_insert, [\n                                        DIFF_DELETE,\n                                        text_delete\n                                    ]);\n                                } else {\n                                    diffs.splice(pointer - count_delete - count_insert, count_delete + count_insert, [\n                                        DIFF_DELETE,\n                                        text_delete\n                                    ], [\n                                        DIFF_INSERT,\n                                        text_insert\n                                    ]);\n                                }\n                                pointer = pointer - count_delete - count_insert + (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\n                            } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n                                // Merge this equality with the previous one.\n                                diffs[pointer - 1][1] += diffs[pointer][1];\n                                diffs.splice(pointer, 1);\n                            } else {\n                                pointer++;\n                            }\n                            count_insert = 0;\n                            count_delete = 0;\n                            text_delete = \"\";\n                            text_insert = \"\";\n                            break;\n                    }\n                }\n                if (diffs[diffs.length - 1][1] === \"\") {\n                    diffs.pop(); // Remove the dummy entry at the end.\n                }\n                // Second pass: look for single edits surrounded on both sides by equalities\n                // which can be shifted sideways to eliminate an equality.\n                // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n                var changes = false;\n                pointer = 1;\n                // Intentionally ignore the first and last element (don't need checking).\n                while(pointer < diffs.length - 1){\n                    if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {\n                        // This is a single edit surrounded by equalities.\n                        if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n                            // Shift the edit over the previous equality.\n                            diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);\n                            diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n                            diffs.splice(pointer - 1, 1);\n                            changes = true;\n                        } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) == diffs[pointer + 1][1]) {\n                            // Shift the edit over the next equality.\n                            diffs[pointer - 1][1] += diffs[pointer + 1][1];\n                            diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];\n                            diffs.splice(pointer + 1, 1);\n                            changes = true;\n                        }\n                    }\n                    pointer++;\n                }\n                // If shifts were made, the diff needs reordering and another shift sweep.\n                if (changes) {\n                    diff_cleanupMerge(diffs);\n                }\n            }\n            ;\n            var diff = diff_main;\n            diff.INSERT = DIFF_INSERT;\n            diff.DELETE = DIFF_DELETE;\n            diff.EQUAL = DIFF_EQUAL;\n            module1.exports = diff;\n            /*\n * Modify a diff such that the cursor position points to the start of a change:\n * E.g.\n *   cursor_normalize_diff([[DIFF_EQUAL, 'abc']], 1)\n *     => [1, [[DIFF_EQUAL, 'a'], [DIFF_EQUAL, 'bc']]]\n *   cursor_normalize_diff([[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xyz']], 2)\n *     => [2, [[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xy'], [DIFF_DELETE, 'z']]]\n *\n * @param {Array} diffs Array of diff tuples\n * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!\n * @return {Array} A tuple [cursor location in the modified diff, modified diff]\n */ function cursor_normalize_diff(diffs, cursor_pos) {\n                if (cursor_pos === 0) {\n                    return [\n                        DIFF_EQUAL,\n                        diffs\n                    ];\n                }\n                for(var current_pos = 0, i = 0; i < diffs.length; i++){\n                    var d = diffs[i];\n                    if (d[0] === DIFF_DELETE || d[0] === DIFF_EQUAL) {\n                        var next_pos = current_pos + d[1].length;\n                        if (cursor_pos === next_pos) {\n                            return [\n                                i + 1,\n                                diffs\n                            ];\n                        } else if (cursor_pos < next_pos) {\n                            // copy to prevent side effects\n                            diffs = diffs.slice();\n                            // split d into two diff changes\n                            var split_pos = cursor_pos - current_pos;\n                            var d_left = [\n                                d[0],\n                                d[1].slice(0, split_pos)\n                            ];\n                            var d_right = [\n                                d[0],\n                                d[1].slice(split_pos)\n                            ];\n                            diffs.splice(i, 1, d_left, d_right);\n                            return [\n                                i + 1,\n                                diffs\n                            ];\n                        } else {\n                            current_pos = next_pos;\n                        }\n                    }\n                }\n                throw new Error(\"cursor_pos is out of bounds!\");\n            }\n            /*\n * Modify a diff such that the edit position is \"shifted\" to the proposed edit location (cursor_position).\n *\n * Case 1)\n *   Check if a naive shift is possible:\n *     [0, X], [ 1, Y] -> [ 1, Y], [0, X]    (if X + Y === Y + X)\n *     [0, X], [-1, Y] -> [-1, Y], [0, X]    (if X + Y === Y + X) - holds same result\n * Case 2)\n *   Check if the following shifts are possible:\n *     [0, 'pre'], [ 1, 'prefix'] -> [ 1, 'pre'], [0, 'pre'], [ 1, 'fix']\n *     [0, 'pre'], [-1, 'prefix'] -> [-1, 'pre'], [0, 'pre'], [-1, 'fix']\n *         ^            ^\n *         d          d_next\n *\n * @param {Array} diffs Array of diff tuples\n * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!\n * @return {Array} Array of diff tuples\n */ function fix_cursor(diffs, cursor_pos) {\n                var norm = cursor_normalize_diff(diffs, cursor_pos);\n                var ndiffs = norm[1];\n                var cursor_pointer = norm[0];\n                var d = ndiffs[cursor_pointer];\n                var d_next = ndiffs[cursor_pointer + 1];\n                if (d == null) {\n                    // Text was deleted from end of original string,\n                    // cursor is now out of bounds in new string\n                    return diffs;\n                } else if (d[0] !== DIFF_EQUAL) {\n                    // A modification happened at the cursor location.\n                    // This is the expected outcome, so we can return the original diff.\n                    return diffs;\n                } else {\n                    if (d_next != null && d[1] + d_next[1] === d_next[1] + d[1]) {\n                        // Case 1)\n                        // It is possible to perform a naive shift\n                        ndiffs.splice(cursor_pointer, 2, d_next, d);\n                        return merge_tuples(ndiffs, cursor_pointer, 2);\n                    } else if (d_next != null && d_next[1].indexOf(d[1]) === 0) {\n                        // Case 2)\n                        // d[1] is a prefix of d_next[1]\n                        // We can assume that d_next[0] !== 0, since d[0] === 0\n                        // Shift edit locations..\n                        ndiffs.splice(cursor_pointer, 2, [\n                            d_next[0],\n                            d[1]\n                        ], [\n                            0,\n                            d[1]\n                        ]);\n                        var suffix = d_next[1].slice(d[1].length);\n                        if (suffix.length > 0) {\n                            ndiffs.splice(cursor_pointer + 2, 0, [\n                                d_next[0],\n                                suffix\n                            ]);\n                        }\n                        return merge_tuples(ndiffs, cursor_pointer, 3);\n                    } else {\n                        // Not possible to perform any modification\n                        return diffs;\n                    }\n                }\n            }\n            /*\n * Check diff did not split surrogate pairs.\n * Ex. [0, '\\uD83D'], [-1, '\\uDC36'], [1, '\\uDC2F'] -> [-1, '\\uD83D\\uDC36'], [1, '\\uD83D\\uDC2F']\n *     '\\uD83D\\uDC36' === '🐶', '\\uD83D\\uDC2F' === '🐯'\n *\n * @param {Array} diffs Array of diff tuples\n * @return {Array} Array of diff tuples\n */ function fix_emoji(diffs) {\n                var compact = false;\n                var starts_with_pair_end = function(str) {\n                    return str.charCodeAt(0) >= 0xDC00 && str.charCodeAt(0) <= 0xDFFF;\n                };\n                var ends_with_pair_start = function(str) {\n                    return str.charCodeAt(str.length - 1) >= 0xD800 && str.charCodeAt(str.length - 1) <= 0xDBFF;\n                };\n                for(var i = 2; i < diffs.length; i += 1){\n                    if (diffs[i - 2][0] === DIFF_EQUAL && ends_with_pair_start(diffs[i - 2][1]) && diffs[i - 1][0] === DIFF_DELETE && starts_with_pair_end(diffs[i - 1][1]) && diffs[i][0] === DIFF_INSERT && starts_with_pair_end(diffs[i][1])) {\n                        compact = true;\n                        diffs[i - 1][1] = diffs[i - 2][1].slice(-1) + diffs[i - 1][1];\n                        diffs[i][1] = diffs[i - 2][1].slice(-1) + diffs[i][1];\n                        diffs[i - 2][1] = diffs[i - 2][1].slice(0, -1);\n                    }\n                }\n                if (!compact) {\n                    return diffs;\n                }\n                var fixed_diffs = [];\n                for(var i = 0; i < diffs.length; i += 1){\n                    if (diffs[i][1].length > 0) {\n                        fixed_diffs.push(diffs[i]);\n                    }\n                }\n                return fixed_diffs;\n            }\n            /*\n * Try to merge tuples with their neigbors in a given range.\n * E.g. [0, 'a'], [0, 'b'] -> [0, 'ab']\n *\n * @param {Array} diffs Array of diff tuples.\n * @param {Int} start Position of the first element to merge (diffs[start] is also merged with diffs[start - 1]).\n * @param {Int} length Number of consecutive elements to check.\n * @return {Array} Array of merged diff tuples.\n */ function merge_tuples(diffs, start, length) {\n                // Check from (start-1) to (start+length).\n                for(var i = start + length - 1; i >= 0 && i >= start - 1; i--){\n                    if (i + 1 < diffs.length) {\n                        var left_d = diffs[i];\n                        var right_d = diffs[i + 1];\n                        if (left_d[0] === right_d[1]) {\n                            diffs.splice(i, 2, [\n                                left_d[0],\n                                left_d[1] + right_d[1]\n                            ]);\n                        }\n                    }\n                }\n                return diffs;\n            }\n        /***/ },\n        /* 52 */ /***/ function(module1, exports1) {\n            exports1 = module1.exports = typeof Object.keys === \"function\" ? Object.keys : shim;\n            exports1.shim = shim;\n            function shim(obj) {\n                var keys = [];\n                for(var key in obj)keys.push(key);\n                return keys;\n            }\n        /***/ },\n        /* 53 */ /***/ function(module1, exports1) {\n            var supportsArgumentsClass = function() {\n                return Object.prototype.toString.call(arguments);\n            }() == \"[object Arguments]\";\n            exports1 = module1.exports = supportsArgumentsClass ? supported : unsupported;\n            exports1.supported = supported;\n            function supported(object) {\n                return Object.prototype.toString.call(object) == \"[object Arguments]\";\n            }\n            ;\n            exports1.unsupported = unsupported;\n            function unsupported(object) {\n                return object && typeof object == \"object\" && typeof object.length == \"number\" && Object.prototype.hasOwnProperty.call(object, \"callee\") && !Object.prototype.propertyIsEnumerable.call(object, \"callee\") || false;\n            }\n            ;\n        /***/ },\n        /* 54 */ /***/ function(module1, exports1) {\n            \"use strict\";\n            var has = Object.prototype.hasOwnProperty, prefix = \"~\";\n            /**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @api private\n */ function Events() {}\n            //\n            // We try to not inherit from `Object.prototype`. In some engines creating an\n            // instance in this way is faster than calling `Object.create(null)` directly.\n            // If `Object.create(null)` is not supported we prefix the event names with a\n            // character to make sure that the built-in object properties are not\n            // overridden or used as an attack vector.\n            //\n            if (Object.create) {\n                Events.prototype = Object.create(null);\n                //\n                // This hack is needed because the `__proto__` property is still inherited in\n                // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n                //\n                if (!new Events().__proto__) prefix = false;\n            }\n            /**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {Mixed} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @api private\n */ function EE(fn, context, once) {\n                this.fn = fn;\n                this.context = context;\n                this.once = once || false;\n            }\n            /**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @api public\n */ function EventEmitter() {\n                this._events = new Events();\n                this._eventsCount = 0;\n            }\n            /**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @api public\n */ EventEmitter.prototype.eventNames = function eventNames() {\n                var names = [], events, name;\n                if (this._eventsCount === 0) return names;\n                for(name in events = this._events){\n                    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n                }\n                if (Object.getOwnPropertySymbols) {\n                    return names.concat(Object.getOwnPropertySymbols(events));\n                }\n                return names;\n            };\n            /**\n * Return the listeners registered for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Boolean} exists Only check if there are listeners.\n * @returns {Array|Boolean}\n * @api public\n */ EventEmitter.prototype.listeners = function listeners(event, exists) {\n                var evt = prefix ? prefix + event : event, available = this._events[evt];\n                if (exists) return !!available;\n                if (!available) return [];\n                if (available.fn) return [\n                    available.fn\n                ];\n                for(var i = 0, l = available.length, ee = new Array(l); i < l; i++){\n                    ee[i] = available[i].fn;\n                }\n                return ee;\n            };\n            /**\n * Calls each of the listeners registered for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @api public\n */ EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n                var evt = prefix ? prefix + event : event;\n                if (!this._events[evt]) return false;\n                var listeners = this._events[evt], len = arguments.length, args, i;\n                if (listeners.fn) {\n                    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n                    switch(len){\n                        case 1:\n                            return listeners.fn.call(listeners.context), true;\n                        case 2:\n                            return listeners.fn.call(listeners.context, a1), true;\n                        case 3:\n                            return listeners.fn.call(listeners.context, a1, a2), true;\n                        case 4:\n                            return listeners.fn.call(listeners.context, a1, a2, a3), true;\n                        case 5:\n                            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n                        case 6:\n                            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n                    }\n                    for(i = 1, args = new Array(len - 1); i < len; i++){\n                        args[i - 1] = arguments[i];\n                    }\n                    listeners.fn.apply(listeners.context, args);\n                } else {\n                    var length = listeners.length, j;\n                    for(i = 0; i < length; i++){\n                        if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n                        switch(len){\n                            case 1:\n                                listeners[i].fn.call(listeners[i].context);\n                                break;\n                            case 2:\n                                listeners[i].fn.call(listeners[i].context, a1);\n                                break;\n                            case 3:\n                                listeners[i].fn.call(listeners[i].context, a1, a2);\n                                break;\n                            case 4:\n                                listeners[i].fn.call(listeners[i].context, a1, a2, a3);\n                                break;\n                            default:\n                                if (!args) for(j = 1, args = new Array(len - 1); j < len; j++){\n                                    args[j - 1] = arguments[j];\n                                }\n                                listeners[i].fn.apply(listeners[i].context, args);\n                        }\n                    }\n                }\n                return true;\n            };\n            /**\n * Add a listener for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Function} fn The listener function.\n * @param {Mixed} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @api public\n */ EventEmitter.prototype.on = function on(event, fn, context) {\n                var listener = new EE(fn, context || this), evt = prefix ? prefix + event : event;\n                if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;\n                else if (!this._events[evt].fn) this._events[evt].push(listener);\n                else this._events[evt] = [\n                    this._events[evt],\n                    listener\n                ];\n                return this;\n            };\n            /**\n * Add a one-time listener for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Function} fn The listener function.\n * @param {Mixed} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @api public\n */ EventEmitter.prototype.once = function once(event, fn, context) {\n                var listener = new EE(fn, context || this, true), evt = prefix ? prefix + event : event;\n                if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;\n                else if (!this._events[evt].fn) this._events[evt].push(listener);\n                else this._events[evt] = [\n                    this._events[evt],\n                    listener\n                ];\n                return this;\n            };\n            /**\n * Remove the listeners of a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {Mixed} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @api public\n */ EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n                var evt = prefix ? prefix + event : event;\n                if (!this._events[evt]) return this;\n                if (!fn) {\n                    if (--this._eventsCount === 0) this._events = new Events();\n                    else delete this._events[evt];\n                    return this;\n                }\n                var listeners = this._events[evt];\n                if (listeners.fn) {\n                    if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {\n                        if (--this._eventsCount === 0) this._events = new Events();\n                        else delete this._events[evt];\n                    }\n                } else {\n                    for(var i = 0, events = [], length = listeners.length; i < length; i++){\n                        if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {\n                            events.push(listeners[i]);\n                        }\n                    }\n                    //\n                    // Reset the array, or remove it completely if we have no more listeners.\n                    //\n                    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n                    else if (--this._eventsCount === 0) this._events = new Events();\n                    else delete this._events[evt];\n                }\n                return this;\n            };\n            /**\n * Remove all listeners, or those of the specified event.\n *\n * @param {String|Symbol} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @api public\n */ EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n                var evt;\n                if (event) {\n                    evt = prefix ? prefix + event : event;\n                    if (this._events[evt]) {\n                        if (--this._eventsCount === 0) this._events = new Events();\n                        else delete this._events[evt];\n                    }\n                } else {\n                    this._events = new Events();\n                    this._eventsCount = 0;\n                }\n                return this;\n            };\n            //\n            // Alias methods names because people roll like that.\n            //\n            EventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n            EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n            //\n            // This function doesn't apply anymore.\n            //\n            EventEmitter.prototype.setMaxListeners = function setMaxListeners() {\n                return this;\n            };\n            //\n            // Expose the prefix.\n            //\n            EventEmitter.prefixed = prefix;\n            //\n            // Allow `EventEmitter` to be imported as module namespace.\n            //\n            EventEmitter.EventEmitter = EventEmitter;\n            //\n            // Expose the module.\n            //\n            if (\"undefined\" !== typeof module1) {\n                module1.exports = EventEmitter;\n            }\n        /***/ },\n        /* 55 */ /***/ function(module1, exports1, __nested_webpack_require_472657__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.matchText = exports1.matchSpacing = exports1.matchNewline = exports1.matchBlot = exports1.matchAttributor = exports1.default = undefined;\n            var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function(obj) {\n                return typeof obj;\n            } : function(obj) {\n                return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n            var _slicedToArray = function() {\n                function sliceIterator(arr, i) {\n                    var _arr = [];\n                    var _n = true;\n                    var _d = false;\n                    var _e = undefined;\n                    try {\n                        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n                            _arr.push(_s.value);\n                            if (i && _arr.length === i) break;\n                        }\n                    } catch (err) {\n                        _d = true;\n                        _e = err;\n                    } finally{\n                        try {\n                            if (!_n && _i[\"return\"]) _i[\"return\"]();\n                        } finally{\n                            if (_d) throw _e;\n                        }\n                    }\n                    return _arr;\n                }\n                return function(arr, i) {\n                    if (Array.isArray(arr)) {\n                        return arr;\n                    } else if (Symbol.iterator in Object(arr)) {\n                        return sliceIterator(arr, i);\n                    } else {\n                        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n                    }\n                };\n            }();\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _extend2 = __nested_webpack_require_472657__(3);\n            var _extend3 = _interopRequireDefault(_extend2);\n            var _quillDelta = __nested_webpack_require_472657__(2);\n            var _quillDelta2 = _interopRequireDefault(_quillDelta);\n            var _parchment = __nested_webpack_require_472657__(0);\n            var _parchment2 = _interopRequireDefault(_parchment);\n            var _quill = __nested_webpack_require_472657__(5);\n            var _quill2 = _interopRequireDefault(_quill);\n            var _logger = __nested_webpack_require_472657__(10);\n            var _logger2 = _interopRequireDefault(_logger);\n            var _module = __nested_webpack_require_472657__(9);\n            var _module2 = _interopRequireDefault(_module);\n            var _align = __nested_webpack_require_472657__(36);\n            var _background = __nested_webpack_require_472657__(37);\n            var _code = __nested_webpack_require_472657__(13);\n            var _code2 = _interopRequireDefault(_code);\n            var _color = __nested_webpack_require_472657__(26);\n            var _direction = __nested_webpack_require_472657__(38);\n            var _font = __nested_webpack_require_472657__(39);\n            var _size = __nested_webpack_require_472657__(40);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _defineProperty(obj, key, value) {\n                if (key in obj) {\n                    Object.defineProperty(obj, key, {\n                        value: value,\n                        enumerable: true,\n                        configurable: true,\n                        writable: true\n                    });\n                } else {\n                    obj[key] = value;\n                }\n                return obj;\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var debug = (0, _logger2.default)(\"quill:clipboard\");\n            var DOM_KEY = \"__ql-matcher\";\n            var CLIPBOARD_CONFIG = [\n                [\n                    Node.TEXT_NODE,\n                    matchText\n                ],\n                [\n                    Node.TEXT_NODE,\n                    matchNewline\n                ],\n                [\n                    \"br\",\n                    matchBreak\n                ],\n                [\n                    Node.ELEMENT_NODE,\n                    matchNewline\n                ],\n                [\n                    Node.ELEMENT_NODE,\n                    matchBlot\n                ],\n                [\n                    Node.ELEMENT_NODE,\n                    matchSpacing\n                ],\n                [\n                    Node.ELEMENT_NODE,\n                    matchAttributor\n                ],\n                [\n                    Node.ELEMENT_NODE,\n                    matchStyles\n                ],\n                [\n                    \"li\",\n                    matchIndent\n                ],\n                [\n                    \"b\",\n                    matchAlias.bind(matchAlias, \"bold\")\n                ],\n                [\n                    \"i\",\n                    matchAlias.bind(matchAlias, \"italic\")\n                ],\n                [\n                    \"style\",\n                    matchIgnore\n                ]\n            ];\n            var ATTRIBUTE_ATTRIBUTORS = [\n                _align.AlignAttribute,\n                _direction.DirectionAttribute\n            ].reduce(function(memo, attr) {\n                memo[attr.keyName] = attr;\n                return memo;\n            }, {});\n            var STYLE_ATTRIBUTORS = [\n                _align.AlignStyle,\n                _background.BackgroundStyle,\n                _color.ColorStyle,\n                _direction.DirectionStyle,\n                _font.FontStyle,\n                _size.SizeStyle\n            ].reduce(function(memo, attr) {\n                memo[attr.keyName] = attr;\n                return memo;\n            }, {});\n            var Clipboard = function(_Module) {\n                _inherits(Clipboard, _Module);\n                function Clipboard(quill, options) {\n                    _classCallCheck(this, Clipboard);\n                    var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this, quill, options));\n                    _this.quill.root.addEventListener(\"paste\", _this.onPaste.bind(_this));\n                    _this.container = _this.quill.addContainer(\"ql-clipboard\");\n                    _this.container.setAttribute(\"contenteditable\", true);\n                    _this.container.setAttribute(\"tabindex\", -1);\n                    _this.matchers = [];\n                    CLIPBOARD_CONFIG.concat(_this.options.matchers).forEach(function(_ref) {\n                        var _ref2 = _slicedToArray(_ref, 2), selector = _ref2[0], matcher = _ref2[1];\n                        if (!options.matchVisual && matcher === matchSpacing) return;\n                        _this.addMatcher(selector, matcher);\n                    });\n                    return _this;\n                }\n                _createClass(Clipboard, [\n                    {\n                        key: \"addMatcher\",\n                        value: function addMatcher(selector, matcher) {\n                            this.matchers.push([\n                                selector,\n                                matcher\n                            ]);\n                        }\n                    },\n                    {\n                        key: \"convert\",\n                        value: function convert(html) {\n                            if (typeof html === \"string\") {\n                                this.container.innerHTML = html.replace(/\\>\\r?\\n +\\</g, \"><\"); // Remove spaces between tags\n                                return this.convert();\n                            }\n                            var formats = this.quill.getFormat(this.quill.selection.savedRange.index);\n                            if (formats[_code2.default.blotName]) {\n                                var text = this.container.innerText;\n                                this.container.innerHTML = \"\";\n                                return new _quillDelta2.default().insert(text, _defineProperty({}, _code2.default.blotName, formats[_code2.default.blotName]));\n                            }\n                            var _prepareMatching = this.prepareMatching(), _prepareMatching2 = _slicedToArray(_prepareMatching, 2), elementMatchers = _prepareMatching2[0], textMatchers = _prepareMatching2[1];\n                            var delta = traverse(this.container, elementMatchers, textMatchers);\n                            // Remove trailing newline\n                            if (deltaEndsWith(delta, \"\\n\") && delta.ops[delta.ops.length - 1].attributes == null) {\n                                delta = delta.compose(new _quillDelta2.default().retain(delta.length() - 1).delete(1));\n                            }\n                            debug.log(\"convert\", this.container.innerHTML, delta);\n                            this.container.innerHTML = \"\";\n                            return delta;\n                        }\n                    },\n                    {\n                        key: \"dangerouslyPasteHTML\",\n                        value: function dangerouslyPasteHTML(index, html) {\n                            var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _quill2.default.sources.API;\n                            if (typeof index === \"string\") {\n                                this.quill.setContents(this.convert(index), html);\n                                this.quill.setSelection(0, _quill2.default.sources.SILENT);\n                            } else {\n                                var paste = this.convert(html);\n                                this.quill.updateContents(new _quillDelta2.default().retain(index).concat(paste), source);\n                                this.quill.setSelection(index + paste.length(), _quill2.default.sources.SILENT);\n                            }\n                        }\n                    },\n                    {\n                        key: \"onPaste\",\n                        value: function onPaste(e) {\n                            var _this2 = this;\n                            if (e.defaultPrevented || !this.quill.isEnabled()) return;\n                            var range = this.quill.getSelection();\n                            var delta = new _quillDelta2.default().retain(range.index);\n                            var scrollTop = this.quill.scrollingContainer.scrollTop;\n                            this.container.focus();\n                            this.quill.selection.update(_quill2.default.sources.SILENT);\n                            setTimeout(function() {\n                                delta = delta.concat(_this2.convert()).delete(range.length);\n                                _this2.quill.updateContents(delta, _quill2.default.sources.USER);\n                                // range.length contributes to delta.length()\n                                _this2.quill.setSelection(delta.length() - range.length, _quill2.default.sources.SILENT);\n                                _this2.quill.scrollingContainer.scrollTop = scrollTop;\n                                _this2.quill.focus();\n                            }, 1);\n                        }\n                    },\n                    {\n                        key: \"prepareMatching\",\n                        value: function prepareMatching() {\n                            var _this3 = this;\n                            var elementMatchers = [], textMatchers = [];\n                            this.matchers.forEach(function(pair) {\n                                var _pair = _slicedToArray(pair, 2), selector = _pair[0], matcher = _pair[1];\n                                switch(selector){\n                                    case Node.TEXT_NODE:\n                                        textMatchers.push(matcher);\n                                        break;\n                                    case Node.ELEMENT_NODE:\n                                        elementMatchers.push(matcher);\n                                        break;\n                                    default:\n                                        [].forEach.call(_this3.container.querySelectorAll(selector), function(node) {\n                                            // TODO use weakmap\n                                            node[DOM_KEY] = node[DOM_KEY] || [];\n                                            node[DOM_KEY].push(matcher);\n                                        });\n                                        break;\n                                }\n                            });\n                            return [\n                                elementMatchers,\n                                textMatchers\n                            ];\n                        }\n                    }\n                ]);\n                return Clipboard;\n            }(_module2.default);\n            Clipboard.DEFAULTS = {\n                matchers: [],\n                matchVisual: true\n            };\n            function applyFormat(delta, format, value) {\n                if ((typeof format === \"undefined\" ? \"undefined\" : _typeof(format)) === \"object\") {\n                    return Object.keys(format).reduce(function(delta, key) {\n                        return applyFormat(delta, key, format[key]);\n                    }, delta);\n                } else {\n                    return delta.reduce(function(delta, op) {\n                        if (op.attributes && op.attributes[format]) {\n                            return delta.push(op);\n                        } else {\n                            return delta.insert(op.insert, (0, _extend3.default)({}, _defineProperty({}, format, value), op.attributes));\n                        }\n                    }, new _quillDelta2.default());\n                }\n            }\n            function computeStyle(node) {\n                if (node.nodeType !== Node.ELEMENT_NODE) return {};\n                var DOM_KEY = \"__ql-computed-style\";\n                return node[DOM_KEY] || (node[DOM_KEY] = window.getComputedStyle(node));\n            }\n            function deltaEndsWith(delta, text) {\n                var endText = \"\";\n                for(var i = delta.ops.length - 1; i >= 0 && endText.length < text.length; --i){\n                    var op = delta.ops[i];\n                    if (typeof op.insert !== \"string\") break;\n                    endText = op.insert + endText;\n                }\n                return endText.slice(-1 * text.length) === text;\n            }\n            function isLine(node) {\n                if (node.childNodes.length === 0) return false; // Exclude embed blocks\n                var style = computeStyle(node);\n                return [\n                    \"block\",\n                    \"list-item\"\n                ].indexOf(style.display) > -1;\n            }\n            function traverse(node, elementMatchers, textMatchers) {\n                // Post-order\n                if (node.nodeType === node.TEXT_NODE) {\n                    return textMatchers.reduce(function(delta, matcher) {\n                        return matcher(node, delta);\n                    }, new _quillDelta2.default());\n                } else if (node.nodeType === node.ELEMENT_NODE) {\n                    return [].reduce.call(node.childNodes || [], function(delta, childNode) {\n                        var childrenDelta = traverse(childNode, elementMatchers, textMatchers);\n                        if (childNode.nodeType === node.ELEMENT_NODE) {\n                            childrenDelta = elementMatchers.reduce(function(childrenDelta, matcher) {\n                                return matcher(childNode, childrenDelta);\n                            }, childrenDelta);\n                            childrenDelta = (childNode[DOM_KEY] || []).reduce(function(childrenDelta, matcher) {\n                                return matcher(childNode, childrenDelta);\n                            }, childrenDelta);\n                        }\n                        return delta.concat(childrenDelta);\n                    }, new _quillDelta2.default());\n                } else {\n                    return new _quillDelta2.default();\n                }\n            }\n            function matchAlias(format, node, delta) {\n                return applyFormat(delta, format, true);\n            }\n            function matchAttributor(node, delta) {\n                var attributes = _parchment2.default.Attributor.Attribute.keys(node);\n                var classes = _parchment2.default.Attributor.Class.keys(node);\n                var styles = _parchment2.default.Attributor.Style.keys(node);\n                var formats = {};\n                attributes.concat(classes).concat(styles).forEach(function(name) {\n                    var attr = _parchment2.default.query(name, _parchment2.default.Scope.ATTRIBUTE);\n                    if (attr != null) {\n                        formats[attr.attrName] = attr.value(node);\n                        if (formats[attr.attrName]) return;\n                    }\n                    attr = ATTRIBUTE_ATTRIBUTORS[name];\n                    if (attr != null && (attr.attrName === name || attr.keyName === name)) {\n                        formats[attr.attrName] = attr.value(node) || undefined;\n                    }\n                    attr = STYLE_ATTRIBUTORS[name];\n                    if (attr != null && (attr.attrName === name || attr.keyName === name)) {\n                        attr = STYLE_ATTRIBUTORS[name];\n                        formats[attr.attrName] = attr.value(node) || undefined;\n                    }\n                });\n                if (Object.keys(formats).length > 0) {\n                    delta = applyFormat(delta, formats);\n                }\n                return delta;\n            }\n            function matchBlot(node, delta) {\n                var match = _parchment2.default.query(node);\n                if (match == null) return delta;\n                if (match.prototype instanceof _parchment2.default.Embed) {\n                    var embed = {};\n                    var value = match.value(node);\n                    if (value != null) {\n                        embed[match.blotName] = value;\n                        delta = new _quillDelta2.default().insert(embed, match.formats(node));\n                    }\n                } else if (typeof match.formats === \"function\") {\n                    delta = applyFormat(delta, match.blotName, match.formats(node));\n                }\n                return delta;\n            }\n            function matchBreak(node, delta) {\n                if (!deltaEndsWith(delta, \"\\n\")) {\n                    delta.insert(\"\\n\");\n                }\n                return delta;\n            }\n            function matchIgnore() {\n                return new _quillDelta2.default();\n            }\n            function matchIndent(node, delta) {\n                var match = _parchment2.default.query(node);\n                if (match == null || match.blotName !== \"list-item\" || !deltaEndsWith(delta, \"\\n\")) {\n                    return delta;\n                }\n                var indent = -1, parent = node.parentNode;\n                while(!parent.classList.contains(\"ql-clipboard\")){\n                    if ((_parchment2.default.query(parent) || {}).blotName === \"list\") {\n                        indent += 1;\n                    }\n                    parent = parent.parentNode;\n                }\n                if (indent <= 0) return delta;\n                return delta.compose(new _quillDelta2.default().retain(delta.length() - 1).retain(1, {\n                    indent: indent\n                }));\n            }\n            function matchNewline(node, delta) {\n                if (!deltaEndsWith(delta, \"\\n\")) {\n                    if (isLine(node) || delta.length() > 0 && node.nextSibling && isLine(node.nextSibling)) {\n                        delta.insert(\"\\n\");\n                    }\n                }\n                return delta;\n            }\n            function matchSpacing(node, delta) {\n                if (isLine(node) && node.nextElementSibling != null && !deltaEndsWith(delta, \"\\n\\n\")) {\n                    var nodeHeight = node.offsetHeight + parseFloat(computeStyle(node).marginTop) + parseFloat(computeStyle(node).marginBottom);\n                    if (node.nextElementSibling.offsetTop > node.offsetTop + nodeHeight * 1.5) {\n                        delta.insert(\"\\n\");\n                    }\n                }\n                return delta;\n            }\n            function matchStyles(node, delta) {\n                var formats = {};\n                var style = node.style || {};\n                if (style.fontStyle && computeStyle(node).fontStyle === \"italic\") {\n                    formats.italic = true;\n                }\n                if (style.fontWeight && (computeStyle(node).fontWeight.startsWith(\"bold\") || parseInt(computeStyle(node).fontWeight) >= 700)) {\n                    formats.bold = true;\n                }\n                if (Object.keys(formats).length > 0) {\n                    delta = applyFormat(delta, formats);\n                }\n                if (parseFloat(style.textIndent || 0) > 0) {\n                    // Could be 0.5in\n                    delta = new _quillDelta2.default().insert(\"\t\").concat(delta);\n                }\n                return delta;\n            }\n            function matchText(node, delta) {\n                var text = node.data;\n                // Word represents empty line with <o:p>&nbsp;</o:p>\n                if (node.parentNode.tagName === \"O:P\") {\n                    return delta.insert(text.trim());\n                }\n                if (text.trim().length === 0 && node.parentNode.classList.contains(\"ql-clipboard\")) {\n                    return delta;\n                }\n                if (!computeStyle(node.parentNode).whiteSpace.startsWith(\"pre\")) {\n                    // eslint-disable-next-line func-style\n                    var replacer = function replacer(collapse, match) {\n                        match = match.replace(/[^\\u00a0]/g, \"\"); // \\u00a0 is nbsp;\n                        return match.length < 1 && collapse ? \" \" : match;\n                    };\n                    text = text.replace(/\\r\\n/g, \" \").replace(/\\n/g, \" \");\n                    text = text.replace(/\\s\\s+/g, replacer.bind(replacer, true)); // collapse whitespace\n                    if (node.previousSibling == null && isLine(node.parentNode) || node.previousSibling != null && isLine(node.previousSibling)) {\n                        text = text.replace(/^\\s+/, replacer.bind(replacer, false));\n                    }\n                    if (node.nextSibling == null && isLine(node.parentNode) || node.nextSibling != null && isLine(node.nextSibling)) {\n                        text = text.replace(/\\s+$/, replacer.bind(replacer, false));\n                    }\n                }\n                return delta.insert(text);\n            }\n            exports1.default = Clipboard;\n            exports1.matchAttributor = matchAttributor;\n            exports1.matchBlot = matchBlot;\n            exports1.matchNewline = matchNewline;\n            exports1.matchSpacing = matchSpacing;\n            exports1.matchText = matchText;\n        /***/ },\n        /* 56 */ /***/ function(module1, exports1, __nested_webpack_require_498245__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _get = function get(object, property, receiver) {\n                if (object === null) object = Function.prototype;\n                var desc = Object.getOwnPropertyDescriptor(object, property);\n                if (desc === undefined) {\n                    var parent = Object.getPrototypeOf(object);\n                    if (parent === null) {\n                        return undefined;\n                    } else {\n                        return get(parent, property, receiver);\n                    }\n                } else if (\"value\" in desc) {\n                    return desc.value;\n                } else {\n                    var getter = desc.get;\n                    if (getter === undefined) {\n                        return undefined;\n                    }\n                    return getter.call(receiver);\n                }\n            };\n            var _inline = __nested_webpack_require_498245__(6);\n            var _inline2 = _interopRequireDefault(_inline);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var Bold = function(_Inline) {\n                _inherits(Bold, _Inline);\n                function Bold() {\n                    _classCallCheck(this, Bold);\n                    return _possibleConstructorReturn(this, (Bold.__proto__ || Object.getPrototypeOf(Bold)).apply(this, arguments));\n                }\n                _createClass(Bold, [\n                    {\n                        key: \"optimize\",\n                        value: function optimize(context) {\n                            _get(Bold.prototype.__proto__ || Object.getPrototypeOf(Bold.prototype), \"optimize\", this).call(this, context);\n                            if (this.domNode.tagName !== this.statics.tagName[0]) {\n                                this.replaceWith(this.statics.blotName);\n                            }\n                        }\n                    }\n                ], [\n                    {\n                        key: \"create\",\n                        value: function create() {\n                            return _get(Bold.__proto__ || Object.getPrototypeOf(Bold), \"create\", this).call(this);\n                        }\n                    },\n                    {\n                        key: \"formats\",\n                        value: function formats() {\n                            return true;\n                        }\n                    }\n                ]);\n                return Bold;\n            }(_inline2.default);\n            Bold.blotName = \"bold\";\n            Bold.tagName = [\n                \"STRONG\",\n                \"B\"\n            ];\n            exports1.default = Bold;\n        /***/ },\n        /* 57 */ /***/ function(module1, exports1, __nested_webpack_require_503400__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.addControls = exports1.default = undefined;\n            var _slicedToArray = function() {\n                function sliceIterator(arr, i) {\n                    var _arr = [];\n                    var _n = true;\n                    var _d = false;\n                    var _e = undefined;\n                    try {\n                        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n                            _arr.push(_s.value);\n                            if (i && _arr.length === i) break;\n                        }\n                    } catch (err) {\n                        _d = true;\n                        _e = err;\n                    } finally{\n                        try {\n                            if (!_n && _i[\"return\"]) _i[\"return\"]();\n                        } finally{\n                            if (_d) throw _e;\n                        }\n                    }\n                    return _arr;\n                }\n                return function(arr, i) {\n                    if (Array.isArray(arr)) {\n                        return arr;\n                    } else if (Symbol.iterator in Object(arr)) {\n                        return sliceIterator(arr, i);\n                    } else {\n                        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n                    }\n                };\n            }();\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _quillDelta = __nested_webpack_require_503400__(2);\n            var _quillDelta2 = _interopRequireDefault(_quillDelta);\n            var _parchment = __nested_webpack_require_503400__(0);\n            var _parchment2 = _interopRequireDefault(_parchment);\n            var _quill = __nested_webpack_require_503400__(5);\n            var _quill2 = _interopRequireDefault(_quill);\n            var _logger = __nested_webpack_require_503400__(10);\n            var _logger2 = _interopRequireDefault(_logger);\n            var _module = __nested_webpack_require_503400__(9);\n            var _module2 = _interopRequireDefault(_module);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _defineProperty(obj, key, value) {\n                if (key in obj) {\n                    Object.defineProperty(obj, key, {\n                        value: value,\n                        enumerable: true,\n                        configurable: true,\n                        writable: true\n                    });\n                } else {\n                    obj[key] = value;\n                }\n                return obj;\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var debug = (0, _logger2.default)(\"quill:toolbar\");\n            var Toolbar = function(_Module) {\n                _inherits(Toolbar, _Module);\n                function Toolbar(quill, options) {\n                    _classCallCheck(this, Toolbar);\n                    var _this = _possibleConstructorReturn(this, (Toolbar.__proto__ || Object.getPrototypeOf(Toolbar)).call(this, quill, options));\n                    if (Array.isArray(_this.options.container)) {\n                        var container = document.createElement(\"div\");\n                        addControls(container, _this.options.container);\n                        quill.container.parentNode.insertBefore(container, quill.container);\n                        _this.container = container;\n                    } else if (typeof _this.options.container === \"string\") {\n                        _this.container = document.querySelector(_this.options.container);\n                    } else {\n                        _this.container = _this.options.container;\n                    }\n                    if (!(_this.container instanceof HTMLElement)) {\n                        var _ret;\n                        return _ret = debug.error(\"Container required for toolbar\", _this.options), _possibleConstructorReturn(_this, _ret);\n                    }\n                    _this.container.classList.add(\"ql-toolbar\");\n                    _this.controls = [];\n                    _this.handlers = {};\n                    Object.keys(_this.options.handlers).forEach(function(format) {\n                        _this.addHandler(format, _this.options.handlers[format]);\n                    });\n                    [].forEach.call(_this.container.querySelectorAll(\"button, select\"), function(input) {\n                        _this.attach(input);\n                    });\n                    _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function(type, range) {\n                        if (type === _quill2.default.events.SELECTION_CHANGE) {\n                            _this.update(range);\n                        }\n                    });\n                    _this.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function() {\n                        var _this$quill$selection = _this.quill.selection.getRange(), _this$quill$selection2 = _slicedToArray(_this$quill$selection, 1), range = _this$quill$selection2[0]; // quill.getSelection triggers update\n                        _this.update(range);\n                    });\n                    return _this;\n                }\n                _createClass(Toolbar, [\n                    {\n                        key: \"addHandler\",\n                        value: function addHandler(format, handler) {\n                            this.handlers[format] = handler;\n                        }\n                    },\n                    {\n                        key: \"attach\",\n                        value: function attach(input) {\n                            var _this2 = this;\n                            var format = [].find.call(input.classList, function(className) {\n                                return className.indexOf(\"ql-\") === 0;\n                            });\n                            if (!format) return;\n                            format = format.slice(\"ql-\".length);\n                            if (input.tagName === \"BUTTON\") {\n                                input.setAttribute(\"type\", \"button\");\n                            }\n                            if (this.handlers[format] == null) {\n                                if (this.quill.scroll.whitelist != null && this.quill.scroll.whitelist[format] == null) {\n                                    debug.warn(\"ignoring attaching to disabled format\", format, input);\n                                    return;\n                                }\n                                if (_parchment2.default.query(format) == null) {\n                                    debug.warn(\"ignoring attaching to nonexistent format\", format, input);\n                                    return;\n                                }\n                            }\n                            var eventName = input.tagName === \"SELECT\" ? \"change\" : \"click\";\n                            input.addEventListener(eventName, function(e) {\n                                var value = void 0;\n                                if (input.tagName === \"SELECT\") {\n                                    if (input.selectedIndex < 0) return;\n                                    var selected = input.options[input.selectedIndex];\n                                    if (selected.hasAttribute(\"selected\")) {\n                                        value = false;\n                                    } else {\n                                        value = selected.value || false;\n                                    }\n                                } else {\n                                    if (input.classList.contains(\"ql-active\")) {\n                                        value = false;\n                                    } else {\n                                        value = input.value || !input.hasAttribute(\"value\");\n                                    }\n                                    e.preventDefault();\n                                }\n                                _this2.quill.focus();\n                                var _quill$selection$getR = _this2.quill.selection.getRange(), _quill$selection$getR2 = _slicedToArray(_quill$selection$getR, 1), range = _quill$selection$getR2[0];\n                                if (_this2.handlers[format] != null) {\n                                    _this2.handlers[format].call(_this2, value);\n                                } else if (_parchment2.default.query(format).prototype instanceof _parchment2.default.Embed) {\n                                    value = prompt(\"Enter \" + format);\n                                    if (!value) return;\n                                    _this2.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert(_defineProperty({}, format, value)), _quill2.default.sources.USER);\n                                } else {\n                                    _this2.quill.format(format, value, _quill2.default.sources.USER);\n                                }\n                                _this2.update(range);\n                            });\n                            // TODO use weakmap\n                            this.controls.push([\n                                format,\n                                input\n                            ]);\n                        }\n                    },\n                    {\n                        key: \"update\",\n                        value: function update(range) {\n                            var formats = range == null ? {} : this.quill.getFormat(range);\n                            this.controls.forEach(function(pair) {\n                                var _pair = _slicedToArray(pair, 2), format = _pair[0], input = _pair[1];\n                                if (input.tagName === \"SELECT\") {\n                                    var option = void 0;\n                                    if (range == null) {\n                                        option = null;\n                                    } else if (formats[format] == null) {\n                                        option = input.querySelector(\"option[selected]\");\n                                    } else if (!Array.isArray(formats[format])) {\n                                        var value = formats[format];\n                                        if (typeof value === \"string\") {\n                                            value = value.replace(/\\\"/g, '\\\\\"');\n                                        }\n                                        option = input.querySelector('option[value=\"' + value + '\"]');\n                                    }\n                                    if (option == null) {\n                                        input.value = \"\"; // TODO make configurable?\n                                        input.selectedIndex = -1;\n                                    } else {\n                                        option.selected = true;\n                                    }\n                                } else {\n                                    if (range == null) {\n                                        input.classList.remove(\"ql-active\");\n                                    } else if (input.hasAttribute(\"value\")) {\n                                        // both being null should match (default values)\n                                        // '1' should match with 1 (headers)\n                                        var isActive = formats[format] === input.getAttribute(\"value\") || formats[format] != null && formats[format].toString() === input.getAttribute(\"value\") || formats[format] == null && !input.getAttribute(\"value\");\n                                        input.classList.toggle(\"ql-active\", isActive);\n                                    } else {\n                                        input.classList.toggle(\"ql-active\", formats[format] != null);\n                                    }\n                                }\n                            });\n                        }\n                    }\n                ]);\n                return Toolbar;\n            }(_module2.default);\n            Toolbar.DEFAULTS = {};\n            function addButton(container, format, value) {\n                var input = document.createElement(\"button\");\n                input.setAttribute(\"type\", \"button\");\n                input.classList.add(\"ql-\" + format);\n                if (value != null) {\n                    input.value = value;\n                }\n                container.appendChild(input);\n            }\n            function addControls(container, groups) {\n                if (!Array.isArray(groups[0])) {\n                    groups = [\n                        groups\n                    ];\n                }\n                groups.forEach(function(controls) {\n                    var group = document.createElement(\"span\");\n                    group.classList.add(\"ql-formats\");\n                    controls.forEach(function(control) {\n                        if (typeof control === \"string\") {\n                            addButton(group, control);\n                        } else {\n                            var format = Object.keys(control)[0];\n                            var value = control[format];\n                            if (Array.isArray(value)) {\n                                addSelect(group, format, value);\n                            } else {\n                                addButton(group, format, value);\n                            }\n                        }\n                    });\n                    container.appendChild(group);\n                });\n            }\n            function addSelect(container, format, values) {\n                var input = document.createElement(\"select\");\n                input.classList.add(\"ql-\" + format);\n                values.forEach(function(value) {\n                    var option = document.createElement(\"option\");\n                    if (value !== false) {\n                        option.setAttribute(\"value\", value);\n                    } else {\n                        option.setAttribute(\"selected\", \"selected\");\n                    }\n                    input.appendChild(option);\n                });\n                container.appendChild(input);\n            }\n            Toolbar.DEFAULTS = {\n                container: null,\n                handlers: {\n                    clean: function clean() {\n                        var _this3 = this;\n                        var range = this.quill.getSelection();\n                        if (range == null) return;\n                        if (range.length == 0) {\n                            var formats = this.quill.getFormat();\n                            Object.keys(formats).forEach(function(name) {\n                                // Clean functionality in existing apps only clean inline formats\n                                if (_parchment2.default.query(name, _parchment2.default.Scope.INLINE) != null) {\n                                    _this3.quill.format(name, false);\n                                }\n                            });\n                        } else {\n                            this.quill.removeFormat(range, _quill2.default.sources.USER);\n                        }\n                    },\n                    direction: function direction(value) {\n                        var align = this.quill.getFormat()[\"align\"];\n                        if (value === \"rtl\" && align == null) {\n                            this.quill.format(\"align\", \"right\", _quill2.default.sources.USER);\n                        } else if (!value && align === \"right\") {\n                            this.quill.format(\"align\", false, _quill2.default.sources.USER);\n                        }\n                        this.quill.format(\"direction\", value, _quill2.default.sources.USER);\n                    },\n                    indent: function indent(value) {\n                        var range = this.quill.getSelection();\n                        var formats = this.quill.getFormat(range);\n                        var indent = parseInt(formats.indent || 0);\n                        if (value === \"+1\" || value === \"-1\") {\n                            var modifier = value === \"+1\" ? 1 : -1;\n                            if (formats.direction === \"rtl\") modifier *= -1;\n                            this.quill.format(\"indent\", indent + modifier, _quill2.default.sources.USER);\n                        }\n                    },\n                    link: function link(value) {\n                        if (value === true) {\n                            value = prompt(\"Enter link URL:\");\n                        }\n                        this.quill.format(\"link\", value, _quill2.default.sources.USER);\n                    },\n                    list: function list(value) {\n                        var range = this.quill.getSelection();\n                        var formats = this.quill.getFormat(range);\n                        if (value === \"check\") {\n                            if (formats[\"list\"] === \"checked\" || formats[\"list\"] === \"unchecked\") {\n                                this.quill.format(\"list\", false, _quill2.default.sources.USER);\n                            } else {\n                                this.quill.format(\"list\", \"unchecked\", _quill2.default.sources.USER);\n                            }\n                        } else {\n                            this.quill.format(\"list\", value, _quill2.default.sources.USER);\n                        }\n                    }\n                }\n            };\n            exports1.default = Toolbar;\n            exports1.addControls = addControls;\n        /***/ },\n        /* 58 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <polyline class=\"ql-even ql-stroke\" points=\"5 7 3 9 5 11\"></polyline> <polyline class=\"ql-even ql-stroke\" points=\"13 7 15 9 13 11\"></polyline> <line class=ql-stroke x1=10 x2=8 y1=5 y2=13></line> </svg>';\n        /***/ },\n        /* 59 */ /***/ function(module1, exports1, __nested_webpack_require_523754__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _get = function get(object, property, receiver) {\n                if (object === null) object = Function.prototype;\n                var desc = Object.getOwnPropertyDescriptor(object, property);\n                if (desc === undefined) {\n                    var parent = Object.getPrototypeOf(object);\n                    if (parent === null) {\n                        return undefined;\n                    } else {\n                        return get(parent, property, receiver);\n                    }\n                } else if (\"value\" in desc) {\n                    return desc.value;\n                } else {\n                    var getter = desc.get;\n                    if (getter === undefined) {\n                        return undefined;\n                    }\n                    return getter.call(receiver);\n                }\n            };\n            var _picker = __nested_webpack_require_523754__(28);\n            var _picker2 = _interopRequireDefault(_picker);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var ColorPicker = function(_Picker) {\n                _inherits(ColorPicker, _Picker);\n                function ColorPicker(select, label) {\n                    _classCallCheck(this, ColorPicker);\n                    var _this = _possibleConstructorReturn(this, (ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)).call(this, select));\n                    _this.label.innerHTML = label;\n                    _this.container.classList.add(\"ql-color-picker\");\n                    [].slice.call(_this.container.querySelectorAll(\".ql-picker-item\"), 0, 7).forEach(function(item) {\n                        item.classList.add(\"ql-primary\");\n                    });\n                    return _this;\n                }\n                _createClass(ColorPicker, [\n                    {\n                        key: \"buildItem\",\n                        value: function buildItem(option) {\n                            var item = _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), \"buildItem\", this).call(this, option);\n                            item.style.backgroundColor = option.getAttribute(\"value\") || \"\";\n                            return item;\n                        }\n                    },\n                    {\n                        key: \"selectItem\",\n                        value: function selectItem(item, trigger) {\n                            _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), \"selectItem\", this).call(this, item, trigger);\n                            var colorLabel = this.label.querySelector(\".ql-color-label\");\n                            var value = item ? item.getAttribute(\"data-value\") || \"\" : \"\";\n                            if (colorLabel) {\n                                if (colorLabel.tagName === \"line\") {\n                                    colorLabel.style.stroke = value;\n                                } else {\n                                    colorLabel.style.fill = value;\n                                }\n                            }\n                        }\n                    }\n                ]);\n                return ColorPicker;\n            }(_picker2.default);\n            exports1.default = ColorPicker;\n        /***/ },\n        /* 60 */ /***/ function(module1, exports1, __nested_webpack_require_529569__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _get = function get(object, property, receiver) {\n                if (object === null) object = Function.prototype;\n                var desc = Object.getOwnPropertyDescriptor(object, property);\n                if (desc === undefined) {\n                    var parent = Object.getPrototypeOf(object);\n                    if (parent === null) {\n                        return undefined;\n                    } else {\n                        return get(parent, property, receiver);\n                    }\n                } else if (\"value\" in desc) {\n                    return desc.value;\n                } else {\n                    var getter = desc.get;\n                    if (getter === undefined) {\n                        return undefined;\n                    }\n                    return getter.call(receiver);\n                }\n            };\n            var _picker = __nested_webpack_require_529569__(28);\n            var _picker2 = _interopRequireDefault(_picker);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var IconPicker = function(_Picker) {\n                _inherits(IconPicker, _Picker);\n                function IconPicker(select, icons) {\n                    _classCallCheck(this, IconPicker);\n                    var _this = _possibleConstructorReturn(this, (IconPicker.__proto__ || Object.getPrototypeOf(IconPicker)).call(this, select));\n                    _this.container.classList.add(\"ql-icon-picker\");\n                    [].forEach.call(_this.container.querySelectorAll(\".ql-picker-item\"), function(item) {\n                        item.innerHTML = icons[item.getAttribute(\"data-value\") || \"\"];\n                    });\n                    _this.defaultItem = _this.container.querySelector(\".ql-selected\");\n                    _this.selectItem(_this.defaultItem);\n                    return _this;\n                }\n                _createClass(IconPicker, [\n                    {\n                        key: \"selectItem\",\n                        value: function selectItem(item, trigger) {\n                            _get(IconPicker.prototype.__proto__ || Object.getPrototypeOf(IconPicker.prototype), \"selectItem\", this).call(this, item, trigger);\n                            item = item || this.defaultItem;\n                            this.label.innerHTML = item.innerHTML;\n                        }\n                    }\n                ]);\n                return IconPicker;\n            }(_picker2.default);\n            exports1.default = IconPicker;\n        /***/ },\n        /* 61 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            var Tooltip = function() {\n                function Tooltip(quill, boundsContainer) {\n                    var _this = this;\n                    _classCallCheck(this, Tooltip);\n                    this.quill = quill;\n                    this.boundsContainer = boundsContainer || document.body;\n                    this.root = quill.addContainer(\"ql-tooltip\");\n                    this.root.innerHTML = this.constructor.TEMPLATE;\n                    if (this.quill.root === this.quill.scrollingContainer) {\n                        this.quill.root.addEventListener(\"scroll\", function() {\n                            _this.root.style.marginTop = -1 * _this.quill.root.scrollTop + \"px\";\n                        });\n                    }\n                    this.hide();\n                }\n                _createClass(Tooltip, [\n                    {\n                        key: \"hide\",\n                        value: function hide() {\n                            this.root.classList.add(\"ql-hidden\");\n                        }\n                    },\n                    {\n                        key: \"position\",\n                        value: function position(reference) {\n                            var left = reference.left + reference.width / 2 - this.root.offsetWidth / 2;\n                            // root.scrollTop should be 0 if scrollContainer !== root\n                            var top = reference.bottom + this.quill.root.scrollTop;\n                            this.root.style.left = left + \"px\";\n                            this.root.style.top = top + \"px\";\n                            this.root.classList.remove(\"ql-flip\");\n                            var containerBounds = this.boundsContainer.getBoundingClientRect();\n                            var rootBounds = this.root.getBoundingClientRect();\n                            var shift = 0;\n                            if (rootBounds.right > containerBounds.right) {\n                                shift = containerBounds.right - rootBounds.right;\n                                this.root.style.left = left + shift + \"px\";\n                            }\n                            if (rootBounds.left < containerBounds.left) {\n                                shift = containerBounds.left - rootBounds.left;\n                                this.root.style.left = left + shift + \"px\";\n                            }\n                            if (rootBounds.bottom > containerBounds.bottom) {\n                                var height = rootBounds.bottom - rootBounds.top;\n                                var verticalShift = reference.bottom - reference.top + height;\n                                this.root.style.top = top - verticalShift + \"px\";\n                                this.root.classList.add(\"ql-flip\");\n                            }\n                            return shift;\n                        }\n                    },\n                    {\n                        key: \"show\",\n                        value: function show() {\n                            this.root.classList.remove(\"ql-editing\");\n                            this.root.classList.remove(\"ql-hidden\");\n                        }\n                    }\n                ]);\n                return Tooltip;\n            }();\n            exports1.default = Tooltip;\n        /***/ },\n        /* 62 */ /***/ function(module1, exports1, __nested_webpack_require_539245__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var _slicedToArray = function() {\n                function sliceIterator(arr, i) {\n                    var _arr = [];\n                    var _n = true;\n                    var _d = false;\n                    var _e = undefined;\n                    try {\n                        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n                            _arr.push(_s.value);\n                            if (i && _arr.length === i) break;\n                        }\n                    } catch (err) {\n                        _d = true;\n                        _e = err;\n                    } finally{\n                        try {\n                            if (!_n && _i[\"return\"]) _i[\"return\"]();\n                        } finally{\n                            if (_d) throw _e;\n                        }\n                    }\n                    return _arr;\n                }\n                return function(arr, i) {\n                    if (Array.isArray(arr)) {\n                        return arr;\n                    } else if (Symbol.iterator in Object(arr)) {\n                        return sliceIterator(arr, i);\n                    } else {\n                        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n                    }\n                };\n            }();\n            var _get = function get(object, property, receiver) {\n                if (object === null) object = Function.prototype;\n                var desc = Object.getOwnPropertyDescriptor(object, property);\n                if (desc === undefined) {\n                    var parent = Object.getPrototypeOf(object);\n                    if (parent === null) {\n                        return undefined;\n                    } else {\n                        return get(parent, property, receiver);\n                    }\n                } else if (\"value\" in desc) {\n                    return desc.value;\n                } else {\n                    var getter = desc.get;\n                    if (getter === undefined) {\n                        return undefined;\n                    }\n                    return getter.call(receiver);\n                }\n            };\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _extend = __nested_webpack_require_539245__(3);\n            var _extend2 = _interopRequireDefault(_extend);\n            var _emitter = __nested_webpack_require_539245__(8);\n            var _emitter2 = _interopRequireDefault(_emitter);\n            var _base = __nested_webpack_require_539245__(43);\n            var _base2 = _interopRequireDefault(_base);\n            var _link = __nested_webpack_require_539245__(27);\n            var _link2 = _interopRequireDefault(_link);\n            var _selection = __nested_webpack_require_539245__(15);\n            var _icons = __nested_webpack_require_539245__(41);\n            var _icons2 = _interopRequireDefault(_icons);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var TOOLBAR_CONFIG = [\n                [\n                    {\n                        header: [\n                            \"1\",\n                            \"2\",\n                            \"3\",\n                            false\n                        ]\n                    }\n                ],\n                [\n                    \"bold\",\n                    \"italic\",\n                    \"underline\",\n                    \"link\"\n                ],\n                [\n                    {\n                        list: \"ordered\"\n                    },\n                    {\n                        list: \"bullet\"\n                    }\n                ],\n                [\n                    \"clean\"\n                ]\n            ];\n            var SnowTheme = function(_BaseTheme) {\n                _inherits(SnowTheme, _BaseTheme);\n                function SnowTheme(quill, options) {\n                    _classCallCheck(this, SnowTheme);\n                    if (options.modules.toolbar != null && options.modules.toolbar.container == null) {\n                        options.modules.toolbar.container = TOOLBAR_CONFIG;\n                    }\n                    var _this = _possibleConstructorReturn(this, (SnowTheme.__proto__ || Object.getPrototypeOf(SnowTheme)).call(this, quill, options));\n                    _this.quill.container.classList.add(\"ql-snow\");\n                    return _this;\n                }\n                _createClass(SnowTheme, [\n                    {\n                        key: \"extendToolbar\",\n                        value: function extendToolbar(toolbar) {\n                            toolbar.container.classList.add(\"ql-snow\");\n                            this.buildButtons([].slice.call(toolbar.container.querySelectorAll(\"button\")), _icons2.default);\n                            this.buildPickers([].slice.call(toolbar.container.querySelectorAll(\"select\")), _icons2.default);\n                            this.tooltip = new SnowTooltip(this.quill, this.options.bounds);\n                            if (toolbar.container.querySelector(\".ql-link\")) {\n                                this.quill.keyboard.addBinding({\n                                    key: \"K\",\n                                    shortKey: true\n                                }, function(range, context) {\n                                    toolbar.handlers[\"link\"].call(toolbar, !context.format.link);\n                                });\n                            }\n                        }\n                    }\n                ]);\n                return SnowTheme;\n            }(_base2.default);\n            SnowTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {\n                modules: {\n                    toolbar: {\n                        handlers: {\n                            link: function link(value) {\n                                if (value) {\n                                    var range = this.quill.getSelection();\n                                    if (range == null || range.length == 0) return;\n                                    var preview = this.quill.getText(range);\n                                    if (/^\\S+@\\S+\\.\\S+$/.test(preview) && preview.indexOf(\"mailto:\") !== 0) {\n                                        preview = \"mailto:\" + preview;\n                                    }\n                                    var tooltip = this.quill.theme.tooltip;\n                                    tooltip.edit(\"link\", preview);\n                                } else {\n                                    this.quill.format(\"link\", false);\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n            var SnowTooltip = function(_BaseTooltip) {\n                _inherits(SnowTooltip, _BaseTooltip);\n                function SnowTooltip(quill, bounds) {\n                    _classCallCheck(this, SnowTooltip);\n                    var _this2 = _possibleConstructorReturn(this, (SnowTooltip.__proto__ || Object.getPrototypeOf(SnowTooltip)).call(this, quill, bounds));\n                    _this2.preview = _this2.root.querySelector(\"a.ql-preview\");\n                    return _this2;\n                }\n                _createClass(SnowTooltip, [\n                    {\n                        key: \"listen\",\n                        value: function listen() {\n                            var _this3 = this;\n                            _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), \"listen\", this).call(this);\n                            this.root.querySelector(\"a.ql-action\").addEventListener(\"click\", function(event) {\n                                if (_this3.root.classList.contains(\"ql-editing\")) {\n                                    _this3.save();\n                                } else {\n                                    _this3.edit(\"link\", _this3.preview.textContent);\n                                }\n                                event.preventDefault();\n                            });\n                            this.root.querySelector(\"a.ql-remove\").addEventListener(\"click\", function(event) {\n                                if (_this3.linkRange != null) {\n                                    var range = _this3.linkRange;\n                                    _this3.restoreFocus();\n                                    _this3.quill.formatText(range, \"link\", false, _emitter2.default.sources.USER);\n                                    delete _this3.linkRange;\n                                }\n                                event.preventDefault();\n                                _this3.hide();\n                            });\n                            this.quill.on(_emitter2.default.events.SELECTION_CHANGE, function(range, oldRange, source) {\n                                if (range == null) return;\n                                if (range.length === 0 && source === _emitter2.default.sources.USER) {\n                                    var _quill$scroll$descend = _this3.quill.scroll.descendant(_link2.default, range.index), _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2), link = _quill$scroll$descend2[0], offset = _quill$scroll$descend2[1];\n                                    if (link != null) {\n                                        _this3.linkRange = new _selection.Range(range.index - offset, link.length());\n                                        var preview = _link2.default.formats(link.domNode);\n                                        _this3.preview.textContent = preview;\n                                        _this3.preview.setAttribute(\"href\", preview);\n                                        _this3.show();\n                                        _this3.position(_this3.quill.getBounds(_this3.linkRange));\n                                        return;\n                                    }\n                                } else {\n                                    delete _this3.linkRange;\n                                }\n                                _this3.hide();\n                            });\n                        }\n                    },\n                    {\n                        key: \"show\",\n                        value: function show() {\n                            _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), \"show\", this).call(this);\n                            this.root.removeAttribute(\"data-mode\");\n                        }\n                    }\n                ]);\n                return SnowTooltip;\n            }(_base.BaseTooltip);\n            SnowTooltip.TEMPLATE = [\n                '<a class=\"ql-preview\" rel=\"noopener noreferrer\" target=\"_blank\" href=\"about:blank\"></a>',\n                '<input type=\"text\" data-formula=\"e=mc^2\" data-link=\"https://quilljs.com\" data-video=\"Embed URL\">',\n                '<a class=\"ql-action\"></a>',\n                '<a class=\"ql-remove\"></a>'\n            ].join(\"\");\n            exports1.default = SnowTheme;\n        /***/ },\n        /* 63 */ /***/ function(module1, exports1, __nested_webpack_require_552749__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var _core = __nested_webpack_require_552749__(29);\n            var _core2 = _interopRequireDefault(_core);\n            var _align = __nested_webpack_require_552749__(36);\n            var _direction = __nested_webpack_require_552749__(38);\n            var _indent = __nested_webpack_require_552749__(64);\n            var _blockquote = __nested_webpack_require_552749__(65);\n            var _blockquote2 = _interopRequireDefault(_blockquote);\n            var _header = __nested_webpack_require_552749__(66);\n            var _header2 = _interopRequireDefault(_header);\n            var _list = __nested_webpack_require_552749__(67);\n            var _list2 = _interopRequireDefault(_list);\n            var _background = __nested_webpack_require_552749__(37);\n            var _color = __nested_webpack_require_552749__(26);\n            var _font = __nested_webpack_require_552749__(39);\n            var _size = __nested_webpack_require_552749__(40);\n            var _bold = __nested_webpack_require_552749__(56);\n            var _bold2 = _interopRequireDefault(_bold);\n            var _italic = __nested_webpack_require_552749__(68);\n            var _italic2 = _interopRequireDefault(_italic);\n            var _link = __nested_webpack_require_552749__(27);\n            var _link2 = _interopRequireDefault(_link);\n            var _script = __nested_webpack_require_552749__(69);\n            var _script2 = _interopRequireDefault(_script);\n            var _strike = __nested_webpack_require_552749__(70);\n            var _strike2 = _interopRequireDefault(_strike);\n            var _underline = __nested_webpack_require_552749__(71);\n            var _underline2 = _interopRequireDefault(_underline);\n            var _image = __nested_webpack_require_552749__(72);\n            var _image2 = _interopRequireDefault(_image);\n            var _video = __nested_webpack_require_552749__(73);\n            var _video2 = _interopRequireDefault(_video);\n            var _code = __nested_webpack_require_552749__(13);\n            var _code2 = _interopRequireDefault(_code);\n            var _formula = __nested_webpack_require_552749__(74);\n            var _formula2 = _interopRequireDefault(_formula);\n            var _syntax = __nested_webpack_require_552749__(75);\n            var _syntax2 = _interopRequireDefault(_syntax);\n            var _toolbar = __nested_webpack_require_552749__(57);\n            var _toolbar2 = _interopRequireDefault(_toolbar);\n            var _icons = __nested_webpack_require_552749__(41);\n            var _icons2 = _interopRequireDefault(_icons);\n            var _picker = __nested_webpack_require_552749__(28);\n            var _picker2 = _interopRequireDefault(_picker);\n            var _colorPicker = __nested_webpack_require_552749__(59);\n            var _colorPicker2 = _interopRequireDefault(_colorPicker);\n            var _iconPicker = __nested_webpack_require_552749__(60);\n            var _iconPicker2 = _interopRequireDefault(_iconPicker);\n            var _tooltip = __nested_webpack_require_552749__(61);\n            var _tooltip2 = _interopRequireDefault(_tooltip);\n            var _bubble = __nested_webpack_require_552749__(108);\n            var _bubble2 = _interopRequireDefault(_bubble);\n            var _snow = __nested_webpack_require_552749__(62);\n            var _snow2 = _interopRequireDefault(_snow);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            _core2.default.register({\n                \"attributors/attribute/direction\": _direction.DirectionAttribute,\n                \"attributors/class/align\": _align.AlignClass,\n                \"attributors/class/background\": _background.BackgroundClass,\n                \"attributors/class/color\": _color.ColorClass,\n                \"attributors/class/direction\": _direction.DirectionClass,\n                \"attributors/class/font\": _font.FontClass,\n                \"attributors/class/size\": _size.SizeClass,\n                \"attributors/style/align\": _align.AlignStyle,\n                \"attributors/style/background\": _background.BackgroundStyle,\n                \"attributors/style/color\": _color.ColorStyle,\n                \"attributors/style/direction\": _direction.DirectionStyle,\n                \"attributors/style/font\": _font.FontStyle,\n                \"attributors/style/size\": _size.SizeStyle\n            }, true);\n            _core2.default.register({\n                \"formats/align\": _align.AlignClass,\n                \"formats/direction\": _direction.DirectionClass,\n                \"formats/indent\": _indent.IndentClass,\n                \"formats/background\": _background.BackgroundStyle,\n                \"formats/color\": _color.ColorStyle,\n                \"formats/font\": _font.FontClass,\n                \"formats/size\": _size.SizeClass,\n                \"formats/blockquote\": _blockquote2.default,\n                \"formats/code-block\": _code2.default,\n                \"formats/header\": _header2.default,\n                \"formats/list\": _list2.default,\n                \"formats/bold\": _bold2.default,\n                \"formats/code\": _code.Code,\n                \"formats/italic\": _italic2.default,\n                \"formats/link\": _link2.default,\n                \"formats/script\": _script2.default,\n                \"formats/strike\": _strike2.default,\n                \"formats/underline\": _underline2.default,\n                \"formats/image\": _image2.default,\n                \"formats/video\": _video2.default,\n                \"formats/list/item\": _list.ListItem,\n                \"modules/formula\": _formula2.default,\n                \"modules/syntax\": _syntax2.default,\n                \"modules/toolbar\": _toolbar2.default,\n                \"themes/bubble\": _bubble2.default,\n                \"themes/snow\": _snow2.default,\n                \"ui/icons\": _icons2.default,\n                \"ui/picker\": _picker2.default,\n                \"ui/icon-picker\": _iconPicker2.default,\n                \"ui/color-picker\": _colorPicker2.default,\n                \"ui/tooltip\": _tooltip2.default\n            }, true);\n            exports1.default = _core2.default;\n        /***/ },\n        /* 64 */ /***/ function(module1, exports1, __nested_webpack_require_558721__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.IndentClass = undefined;\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _get = function get(object, property, receiver) {\n                if (object === null) object = Function.prototype;\n                var desc = Object.getOwnPropertyDescriptor(object, property);\n                if (desc === undefined) {\n                    var parent = Object.getPrototypeOf(object);\n                    if (parent === null) {\n                        return undefined;\n                    } else {\n                        return get(parent, property, receiver);\n                    }\n                } else if (\"value\" in desc) {\n                    return desc.value;\n                } else {\n                    var getter = desc.get;\n                    if (getter === undefined) {\n                        return undefined;\n                    }\n                    return getter.call(receiver);\n                }\n            };\n            var _parchment = __nested_webpack_require_558721__(0);\n            var _parchment2 = _interopRequireDefault(_parchment);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var IdentAttributor = function(_Parchment$Attributor) {\n                _inherits(IdentAttributor, _Parchment$Attributor);\n                function IdentAttributor() {\n                    _classCallCheck(this, IdentAttributor);\n                    return _possibleConstructorReturn(this, (IdentAttributor.__proto__ || Object.getPrototypeOf(IdentAttributor)).apply(this, arguments));\n                }\n                _createClass(IdentAttributor, [\n                    {\n                        key: \"add\",\n                        value: function add(node, value) {\n                            if (value === \"+1\" || value === \"-1\") {\n                                var indent = this.value(node) || 0;\n                                value = value === \"+1\" ? indent + 1 : indent - 1;\n                            }\n                            if (value === 0) {\n                                this.remove(node);\n                                return true;\n                            } else {\n                                return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), \"add\", this).call(this, node, value);\n                            }\n                        }\n                    },\n                    {\n                        key: \"canAdd\",\n                        value: function canAdd(node, value) {\n                            return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), \"canAdd\", this).call(this, node, value) || _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), \"canAdd\", this).call(this, node, parseInt(value));\n                        }\n                    },\n                    {\n                        key: \"value\",\n                        value: function value(node) {\n                            return parseInt(_get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), \"value\", this).call(this, node)) || undefined; // Don't return NaN\n                        }\n                    }\n                ]);\n                return IdentAttributor;\n            }(_parchment2.default.Attributor.Class);\n            var IndentClass = new IdentAttributor(\"indent\", \"ql-indent\", {\n                scope: _parchment2.default.Scope.BLOCK,\n                whitelist: [\n                    1,\n                    2,\n                    3,\n                    4,\n                    5,\n                    6,\n                    7,\n                    8\n                ]\n            });\n            exports1.IndentClass = IndentClass;\n        /***/ },\n        /* 65 */ /***/ function(module1, exports1, __nested_webpack_require_564983__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var _block = __nested_webpack_require_564983__(4);\n            var _block2 = _interopRequireDefault(_block);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var Blockquote = function(_Block) {\n                _inherits(Blockquote, _Block);\n                function Blockquote() {\n                    _classCallCheck(this, Blockquote);\n                    return _possibleConstructorReturn(this, (Blockquote.__proto__ || Object.getPrototypeOf(Blockquote)).apply(this, arguments));\n                }\n                return Blockquote;\n            }(_block2.default);\n            Blockquote.blotName = \"blockquote\";\n            Blockquote.tagName = \"blockquote\";\n            exports1.default = Blockquote;\n        /***/ },\n        /* 66 */ /***/ function(module1, exports1, __nested_webpack_require_567362__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _block = __nested_webpack_require_567362__(4);\n            var _block2 = _interopRequireDefault(_block);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var Header = function(_Block) {\n                _inherits(Header, _Block);\n                function Header() {\n                    _classCallCheck(this, Header);\n                    return _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).apply(this, arguments));\n                }\n                _createClass(Header, null, [\n                    {\n                        key: \"formats\",\n                        value: function formats(domNode) {\n                            return this.tagName.indexOf(domNode.tagName) + 1;\n                        }\n                    }\n                ]);\n                return Header;\n            }(_block2.default);\n            Header.blotName = \"header\";\n            Header.tagName = [\n                \"H1\",\n                \"H2\",\n                \"H3\",\n                \"H4\",\n                \"H5\",\n                \"H6\"\n            ];\n            exports1.default = Header;\n        /***/ },\n        /* 67 */ /***/ function(module1, exports1, __nested_webpack_require_571012__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.default = exports1.ListItem = undefined;\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _get = function get(object, property, receiver) {\n                if (object === null) object = Function.prototype;\n                var desc = Object.getOwnPropertyDescriptor(object, property);\n                if (desc === undefined) {\n                    var parent = Object.getPrototypeOf(object);\n                    if (parent === null) {\n                        return undefined;\n                    } else {\n                        return get(parent, property, receiver);\n                    }\n                } else if (\"value\" in desc) {\n                    return desc.value;\n                } else {\n                    var getter = desc.get;\n                    if (getter === undefined) {\n                        return undefined;\n                    }\n                    return getter.call(receiver);\n                }\n            };\n            var _parchment = __nested_webpack_require_571012__(0);\n            var _parchment2 = _interopRequireDefault(_parchment);\n            var _block = __nested_webpack_require_571012__(4);\n            var _block2 = _interopRequireDefault(_block);\n            var _container = __nested_webpack_require_571012__(25);\n            var _container2 = _interopRequireDefault(_container);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _defineProperty(obj, key, value) {\n                if (key in obj) {\n                    Object.defineProperty(obj, key, {\n                        value: value,\n                        enumerable: true,\n                        configurable: true,\n                        writable: true\n                    });\n                } else {\n                    obj[key] = value;\n                }\n                return obj;\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var ListItem = function(_Block) {\n                _inherits(ListItem, _Block);\n                function ListItem() {\n                    _classCallCheck(this, ListItem);\n                    return _possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).apply(this, arguments));\n                }\n                _createClass(ListItem, [\n                    {\n                        key: \"format\",\n                        value: function format(name, value) {\n                            if (name === List.blotName && !value) {\n                                this.replaceWith(_parchment2.default.create(this.statics.scope));\n                            } else {\n                                _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), \"format\", this).call(this, name, value);\n                            }\n                        }\n                    },\n                    {\n                        key: \"remove\",\n                        value: function remove() {\n                            if (this.prev == null && this.next == null) {\n                                this.parent.remove();\n                            } else {\n                                _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), \"remove\", this).call(this);\n                            }\n                        }\n                    },\n                    {\n                        key: \"replaceWith\",\n                        value: function replaceWith(name, value) {\n                            this.parent.isolate(this.offset(this.parent), this.length());\n                            if (name === this.parent.statics.blotName) {\n                                this.parent.replaceWith(name, value);\n                                return this;\n                            } else {\n                                this.parent.unwrap();\n                                return _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), \"replaceWith\", this).call(this, name, value);\n                            }\n                        }\n                    }\n                ], [\n                    {\n                        key: \"formats\",\n                        value: function formats(domNode) {\n                            return domNode.tagName === this.tagName ? undefined : _get(ListItem.__proto__ || Object.getPrototypeOf(ListItem), \"formats\", this).call(this, domNode);\n                        }\n                    }\n                ]);\n                return ListItem;\n            }(_block2.default);\n            ListItem.blotName = \"list-item\";\n            ListItem.tagName = \"LI\";\n            var List = function(_Container) {\n                _inherits(List, _Container);\n                _createClass(List, null, [\n                    {\n                        key: \"create\",\n                        value: function create(value) {\n                            var tagName = value === \"ordered\" ? \"OL\" : \"UL\";\n                            var node = _get(List.__proto__ || Object.getPrototypeOf(List), \"create\", this).call(this, tagName);\n                            if (value === \"checked\" || value === \"unchecked\") {\n                                node.setAttribute(\"data-checked\", value === \"checked\");\n                            }\n                            return node;\n                        }\n                    },\n                    {\n                        key: \"formats\",\n                        value: function formats(domNode) {\n                            if (domNode.tagName === \"OL\") return \"ordered\";\n                            if (domNode.tagName === \"UL\") {\n                                if (domNode.hasAttribute(\"data-checked\")) {\n                                    return domNode.getAttribute(\"data-checked\") === \"true\" ? \"checked\" : \"unchecked\";\n                                } else {\n                                    return \"bullet\";\n                                }\n                            }\n                            return undefined;\n                        }\n                    }\n                ]);\n                function List(domNode) {\n                    _classCallCheck(this, List);\n                    var _this2 = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, domNode));\n                    var listEventHandler = function listEventHandler(e) {\n                        if (e.target.parentNode !== domNode) return;\n                        var format = _this2.statics.formats(domNode);\n                        var blot = _parchment2.default.find(e.target);\n                        if (format === \"checked\") {\n                            blot.format(\"list\", \"unchecked\");\n                        } else if (format === \"unchecked\") {\n                            blot.format(\"list\", \"checked\");\n                        }\n                    };\n                    domNode.addEventListener(\"touchstart\", listEventHandler);\n                    domNode.addEventListener(\"mousedown\", listEventHandler);\n                    return _this2;\n                }\n                _createClass(List, [\n                    {\n                        key: \"format\",\n                        value: function format(name, value) {\n                            if (this.children.length > 0) {\n                                this.children.tail.format(name, value);\n                            }\n                        }\n                    },\n                    {\n                        key: \"formats\",\n                        value: function formats() {\n                            // We don't inherit from FormatBlot\n                            return _defineProperty({}, this.statics.blotName, this.statics.formats(this.domNode));\n                        }\n                    },\n                    {\n                        key: \"insertBefore\",\n                        value: function insertBefore(blot, ref) {\n                            if (blot instanceof ListItem) {\n                                _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), \"insertBefore\", this).call(this, blot, ref);\n                            } else {\n                                var index = ref == null ? this.length() : ref.offset(this);\n                                var after = this.split(index);\n                                after.parent.insertBefore(blot, after);\n                            }\n                        }\n                    },\n                    {\n                        key: \"optimize\",\n                        value: function optimize(context) {\n                            _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), \"optimize\", this).call(this, context);\n                            var next = this.next;\n                            if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && next.domNode.tagName === this.domNode.tagName && next.domNode.getAttribute(\"data-checked\") === this.domNode.getAttribute(\"data-checked\")) {\n                                next.moveChildren(this);\n                                next.remove();\n                            }\n                        }\n                    },\n                    {\n                        key: \"replace\",\n                        value: function replace(target) {\n                            if (target.statics.blotName !== this.statics.blotName) {\n                                var item = _parchment2.default.create(this.statics.defaultChild);\n                                target.moveChildren(item);\n                                this.appendChild(item);\n                            }\n                            _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), \"replace\", this).call(this, target);\n                        }\n                    }\n                ]);\n                return List;\n            }(_container2.default);\n            List.blotName = \"list\";\n            List.scope = _parchment2.default.Scope.BLOCK_BLOT;\n            List.tagName = [\n                \"OL\",\n                \"UL\"\n            ];\n            List.defaultChild = \"list-item\";\n            List.allowedChildren = [\n                ListItem\n            ];\n            exports1.ListItem = ListItem;\n            exports1.default = List;\n        /***/ },\n        /* 68 */ /***/ function(module1, exports1, __nested_webpack_require_583767__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var _bold = __nested_webpack_require_583767__(56);\n            var _bold2 = _interopRequireDefault(_bold);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var Italic = function(_Bold) {\n                _inherits(Italic, _Bold);\n                function Italic() {\n                    _classCallCheck(this, Italic);\n                    return _possibleConstructorReturn(this, (Italic.__proto__ || Object.getPrototypeOf(Italic)).apply(this, arguments));\n                }\n                return Italic;\n            }(_bold2.default);\n            Italic.blotName = \"italic\";\n            Italic.tagName = [\n                \"EM\",\n                \"I\"\n            ];\n            exports1.default = Italic;\n        /***/ },\n        /* 69 */ /***/ function(module1, exports1, __nested_webpack_require_586142__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _get = function get(object, property, receiver) {\n                if (object === null) object = Function.prototype;\n                var desc = Object.getOwnPropertyDescriptor(object, property);\n                if (desc === undefined) {\n                    var parent = Object.getPrototypeOf(object);\n                    if (parent === null) {\n                        return undefined;\n                    } else {\n                        return get(parent, property, receiver);\n                    }\n                } else if (\"value\" in desc) {\n                    return desc.value;\n                } else {\n                    var getter = desc.get;\n                    if (getter === undefined) {\n                        return undefined;\n                    }\n                    return getter.call(receiver);\n                }\n            };\n            var _inline = __nested_webpack_require_586142__(6);\n            var _inline2 = _interopRequireDefault(_inline);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var Script = function(_Inline) {\n                _inherits(Script, _Inline);\n                function Script() {\n                    _classCallCheck(this, Script);\n                    return _possibleConstructorReturn(this, (Script.__proto__ || Object.getPrototypeOf(Script)).apply(this, arguments));\n                }\n                _createClass(Script, null, [\n                    {\n                        key: \"create\",\n                        value: function create(value) {\n                            if (value === \"super\") {\n                                return document.createElement(\"sup\");\n                            } else if (value === \"sub\") {\n                                return document.createElement(\"sub\");\n                            } else {\n                                return _get(Script.__proto__ || Object.getPrototypeOf(Script), \"create\", this).call(this, value);\n                            }\n                        }\n                    },\n                    {\n                        key: \"formats\",\n                        value: function formats(domNode) {\n                            if (domNode.tagName === \"SUB\") return \"sub\";\n                            if (domNode.tagName === \"SUP\") return \"super\";\n                            return undefined;\n                        }\n                    }\n                ]);\n                return Script;\n            }(_inline2.default);\n            Script.blotName = \"script\";\n            Script.tagName = [\n                \"SUB\",\n                \"SUP\"\n            ];\n            exports1.default = Script;\n        /***/ },\n        /* 70 */ /***/ function(module1, exports1, __nested_webpack_require_591306__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var _inline = __nested_webpack_require_591306__(6);\n            var _inline2 = _interopRequireDefault(_inline);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var Strike = function(_Inline) {\n                _inherits(Strike, _Inline);\n                function Strike() {\n                    _classCallCheck(this, Strike);\n                    return _possibleConstructorReturn(this, (Strike.__proto__ || Object.getPrototypeOf(Strike)).apply(this, arguments));\n                }\n                return Strike;\n            }(_inline2.default);\n            Strike.blotName = \"strike\";\n            Strike.tagName = \"S\";\n            exports1.default = Strike;\n        /***/ },\n        /* 71 */ /***/ function(module1, exports1, __nested_webpack_require_593638__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var _inline = __nested_webpack_require_593638__(6);\n            var _inline2 = _interopRequireDefault(_inline);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var Underline = function(_Inline) {\n                _inherits(Underline, _Inline);\n                function Underline() {\n                    _classCallCheck(this, Underline);\n                    return _possibleConstructorReturn(this, (Underline.__proto__ || Object.getPrototypeOf(Underline)).apply(this, arguments));\n                }\n                return Underline;\n            }(_inline2.default);\n            Underline.blotName = \"underline\";\n            Underline.tagName = \"U\";\n            exports1.default = Underline;\n        /***/ },\n        /* 72 */ /***/ function(module1, exports1, __nested_webpack_require_596003__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _get = function get(object, property, receiver) {\n                if (object === null) object = Function.prototype;\n                var desc = Object.getOwnPropertyDescriptor(object, property);\n                if (desc === undefined) {\n                    var parent = Object.getPrototypeOf(object);\n                    if (parent === null) {\n                        return undefined;\n                    } else {\n                        return get(parent, property, receiver);\n                    }\n                } else if (\"value\" in desc) {\n                    return desc.value;\n                } else {\n                    var getter = desc.get;\n                    if (getter === undefined) {\n                        return undefined;\n                    }\n                    return getter.call(receiver);\n                }\n            };\n            var _parchment = __nested_webpack_require_596003__(0);\n            var _parchment2 = _interopRequireDefault(_parchment);\n            var _link = __nested_webpack_require_596003__(27);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var ATTRIBUTES = [\n                \"alt\",\n                \"height\",\n                \"width\"\n            ];\n            var Image = function(_Parchment$Embed) {\n                _inherits(Image, _Parchment$Embed);\n                function Image() {\n                    _classCallCheck(this, Image);\n                    return _possibleConstructorReturn(this, (Image.__proto__ || Object.getPrototypeOf(Image)).apply(this, arguments));\n                }\n                _createClass(Image, [\n                    {\n                        key: \"format\",\n                        value: function format(name, value) {\n                            if (ATTRIBUTES.indexOf(name) > -1) {\n                                if (value) {\n                                    this.domNode.setAttribute(name, value);\n                                } else {\n                                    this.domNode.removeAttribute(name);\n                                }\n                            } else {\n                                _get(Image.prototype.__proto__ || Object.getPrototypeOf(Image.prototype), \"format\", this).call(this, name, value);\n                            }\n                        }\n                    }\n                ], [\n                    {\n                        key: \"create\",\n                        value: function create(value) {\n                            var node = _get(Image.__proto__ || Object.getPrototypeOf(Image), \"create\", this).call(this, value);\n                            if (typeof value === \"string\") {\n                                node.setAttribute(\"src\", this.sanitize(value));\n                            }\n                            return node;\n                        }\n                    },\n                    {\n                        key: \"formats\",\n                        value: function formats(domNode) {\n                            return ATTRIBUTES.reduce(function(formats, attribute) {\n                                if (domNode.hasAttribute(attribute)) {\n                                    formats[attribute] = domNode.getAttribute(attribute);\n                                }\n                                return formats;\n                            }, {});\n                        }\n                    },\n                    {\n                        key: \"match\",\n                        value: function match(url) {\n                            return /\\.(jpe?g|gif|png)$/.test(url) || /^data:image\\/.+;base64/.test(url);\n                        }\n                    },\n                    {\n                        key: \"sanitize\",\n                        value: function sanitize(url) {\n                            return (0, _link.sanitize)(url, [\n                                \"http\",\n                                \"https\",\n                                \"data\"\n                            ]) ? url : \"//:0\";\n                        }\n                    },\n                    {\n                        key: \"value\",\n                        value: function value(domNode) {\n                            return domNode.getAttribute(\"src\");\n                        }\n                    }\n                ]);\n                return Image;\n            }(_parchment2.default.Embed);\n            Image.blotName = \"image\";\n            Image.tagName = \"IMG\";\n            exports1.default = Image;\n        /***/ },\n        /* 73 */ /***/ function(module1, exports1, __nested_webpack_require_602992__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _get = function get(object, property, receiver) {\n                if (object === null) object = Function.prototype;\n                var desc = Object.getOwnPropertyDescriptor(object, property);\n                if (desc === undefined) {\n                    var parent = Object.getPrototypeOf(object);\n                    if (parent === null) {\n                        return undefined;\n                    } else {\n                        return get(parent, property, receiver);\n                    }\n                } else if (\"value\" in desc) {\n                    return desc.value;\n                } else {\n                    var getter = desc.get;\n                    if (getter === undefined) {\n                        return undefined;\n                    }\n                    return getter.call(receiver);\n                }\n            };\n            var _block = __nested_webpack_require_602992__(4);\n            var _link = __nested_webpack_require_602992__(27);\n            var _link2 = _interopRequireDefault(_link);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var ATTRIBUTES = [\n                \"height\",\n                \"width\"\n            ];\n            var Video = function(_BlockEmbed) {\n                _inherits(Video, _BlockEmbed);\n                function Video() {\n                    _classCallCheck(this, Video);\n                    return _possibleConstructorReturn(this, (Video.__proto__ || Object.getPrototypeOf(Video)).apply(this, arguments));\n                }\n                _createClass(Video, [\n                    {\n                        key: \"format\",\n                        value: function format(name, value) {\n                            if (ATTRIBUTES.indexOf(name) > -1) {\n                                if (value) {\n                                    this.domNode.setAttribute(name, value);\n                                } else {\n                                    this.domNode.removeAttribute(name);\n                                }\n                            } else {\n                                _get(Video.prototype.__proto__ || Object.getPrototypeOf(Video.prototype), \"format\", this).call(this, name, value);\n                            }\n                        }\n                    }\n                ], [\n                    {\n                        key: \"create\",\n                        value: function create(value) {\n                            var node = _get(Video.__proto__ || Object.getPrototypeOf(Video), \"create\", this).call(this, value);\n                            node.setAttribute(\"frameborder\", \"0\");\n                            node.setAttribute(\"allowfullscreen\", true);\n                            node.setAttribute(\"src\", this.sanitize(value));\n                            return node;\n                        }\n                    },\n                    {\n                        key: \"formats\",\n                        value: function formats(domNode) {\n                            return ATTRIBUTES.reduce(function(formats, attribute) {\n                                if (domNode.hasAttribute(attribute)) {\n                                    formats[attribute] = domNode.getAttribute(attribute);\n                                }\n                                return formats;\n                            }, {});\n                        }\n                    },\n                    {\n                        key: \"sanitize\",\n                        value: function sanitize(url) {\n                            return _link2.default.sanitize(url);\n                        }\n                    },\n                    {\n                        key: \"value\",\n                        value: function value(domNode) {\n                            return domNode.getAttribute(\"src\");\n                        }\n                    }\n                ]);\n                return Video;\n            }(_block.BlockEmbed);\n            Video.blotName = \"video\";\n            Video.className = \"ql-video\";\n            Video.tagName = \"IFRAME\";\n            exports1.default = Video;\n        /***/ },\n        /* 74 */ /***/ function(module1, exports1, __nested_webpack_require_609584__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.default = exports1.FormulaBlot = undefined;\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _get = function get(object, property, receiver) {\n                if (object === null) object = Function.prototype;\n                var desc = Object.getOwnPropertyDescriptor(object, property);\n                if (desc === undefined) {\n                    var parent = Object.getPrototypeOf(object);\n                    if (parent === null) {\n                        return undefined;\n                    } else {\n                        return get(parent, property, receiver);\n                    }\n                } else if (\"value\" in desc) {\n                    return desc.value;\n                } else {\n                    var getter = desc.get;\n                    if (getter === undefined) {\n                        return undefined;\n                    }\n                    return getter.call(receiver);\n                }\n            };\n            var _embed = __nested_webpack_require_609584__(35);\n            var _embed2 = _interopRequireDefault(_embed);\n            var _quill = __nested_webpack_require_609584__(5);\n            var _quill2 = _interopRequireDefault(_quill);\n            var _module = __nested_webpack_require_609584__(9);\n            var _module2 = _interopRequireDefault(_module);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var FormulaBlot = function(_Embed) {\n                _inherits(FormulaBlot, _Embed);\n                function FormulaBlot() {\n                    _classCallCheck(this, FormulaBlot);\n                    return _possibleConstructorReturn(this, (FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot)).apply(this, arguments));\n                }\n                _createClass(FormulaBlot, null, [\n                    {\n                        key: \"create\",\n                        value: function create(value) {\n                            var node = _get(FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot), \"create\", this).call(this, value);\n                            if (typeof value === \"string\") {\n                                window.katex.render(value, node, {\n                                    throwOnError: false,\n                                    errorColor: \"#f00\"\n                                });\n                                node.setAttribute(\"data-value\", value);\n                            }\n                            return node;\n                        }\n                    },\n                    {\n                        key: \"value\",\n                        value: function value(domNode) {\n                            return domNode.getAttribute(\"data-value\");\n                        }\n                    }\n                ]);\n                return FormulaBlot;\n            }(_embed2.default);\n            FormulaBlot.blotName = \"formula\";\n            FormulaBlot.className = \"ql-formula\";\n            FormulaBlot.tagName = \"SPAN\";\n            var Formula = function(_Module) {\n                _inherits(Formula, _Module);\n                _createClass(Formula, null, [\n                    {\n                        key: \"register\",\n                        value: function register() {\n                            _quill2.default.register(FormulaBlot, true);\n                        }\n                    }\n                ]);\n                function Formula() {\n                    _classCallCheck(this, Formula);\n                    var _this2 = _possibleConstructorReturn(this, (Formula.__proto__ || Object.getPrototypeOf(Formula)).call(this));\n                    if (window.katex == null) {\n                        throw new Error(\"Formula module requires KaTeX.\");\n                    }\n                    return _this2;\n                }\n                return Formula;\n            }(_module2.default);\n            exports1.FormulaBlot = FormulaBlot;\n            exports1.default = Formula;\n        /***/ },\n        /* 75 */ /***/ function(module1, exports1, __nested_webpack_require_615984__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.default = exports1.CodeToken = exports1.CodeBlock = undefined;\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _get = function get(object, property, receiver) {\n                if (object === null) object = Function.prototype;\n                var desc = Object.getOwnPropertyDescriptor(object, property);\n                if (desc === undefined) {\n                    var parent = Object.getPrototypeOf(object);\n                    if (parent === null) {\n                        return undefined;\n                    } else {\n                        return get(parent, property, receiver);\n                    }\n                } else if (\"value\" in desc) {\n                    return desc.value;\n                } else {\n                    var getter = desc.get;\n                    if (getter === undefined) {\n                        return undefined;\n                    }\n                    return getter.call(receiver);\n                }\n            };\n            var _parchment = __nested_webpack_require_615984__(0);\n            var _parchment2 = _interopRequireDefault(_parchment);\n            var _quill = __nested_webpack_require_615984__(5);\n            var _quill2 = _interopRequireDefault(_quill);\n            var _module = __nested_webpack_require_615984__(9);\n            var _module2 = _interopRequireDefault(_module);\n            var _code = __nested_webpack_require_615984__(13);\n            var _code2 = _interopRequireDefault(_code);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var SyntaxCodeBlock = function(_CodeBlock) {\n                _inherits(SyntaxCodeBlock, _CodeBlock);\n                function SyntaxCodeBlock() {\n                    _classCallCheck(this, SyntaxCodeBlock);\n                    return _possibleConstructorReturn(this, (SyntaxCodeBlock.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock)).apply(this, arguments));\n                }\n                _createClass(SyntaxCodeBlock, [\n                    {\n                        key: \"replaceWith\",\n                        value: function replaceWith(block) {\n                            this.domNode.textContent = this.domNode.textContent;\n                            this.attach();\n                            _get(SyntaxCodeBlock.prototype.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock.prototype), \"replaceWith\", this).call(this, block);\n                        }\n                    },\n                    {\n                        key: \"highlight\",\n                        value: function highlight(_highlight) {\n                            var text = this.domNode.textContent;\n                            if (this.cachedText !== text) {\n                                if (text.trim().length > 0 || this.cachedText == null) {\n                                    this.domNode.innerHTML = _highlight(text);\n                                    this.domNode.normalize();\n                                    this.attach();\n                                }\n                                this.cachedText = text;\n                            }\n                        }\n                    }\n                ]);\n                return SyntaxCodeBlock;\n            }(_code2.default);\n            SyntaxCodeBlock.className = \"ql-syntax\";\n            var CodeToken = new _parchment2.default.Attributor.Class(\"token\", \"hljs\", {\n                scope: _parchment2.default.Scope.INLINE\n            });\n            var Syntax = function(_Module) {\n                _inherits(Syntax, _Module);\n                _createClass(Syntax, null, [\n                    {\n                        key: \"register\",\n                        value: function register() {\n                            _quill2.default.register(CodeToken, true);\n                            _quill2.default.register(SyntaxCodeBlock, true);\n                        }\n                    }\n                ]);\n                function Syntax(quill, options) {\n                    _classCallCheck(this, Syntax);\n                    var _this2 = _possibleConstructorReturn(this, (Syntax.__proto__ || Object.getPrototypeOf(Syntax)).call(this, quill, options));\n                    if (typeof _this2.options.highlight !== \"function\") {\n                        throw new Error(\"Syntax module requires highlight.js. Please include the library on the page before Quill.\");\n                    }\n                    var timer = null;\n                    _this2.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function() {\n                        clearTimeout(timer);\n                        timer = setTimeout(function() {\n                            _this2.highlight();\n                            timer = null;\n                        }, _this2.options.interval);\n                    });\n                    _this2.highlight();\n                    return _this2;\n                }\n                _createClass(Syntax, [\n                    {\n                        key: \"highlight\",\n                        value: function highlight() {\n                            var _this3 = this;\n                            if (this.quill.selection.composing) return;\n                            this.quill.update(_quill2.default.sources.USER);\n                            var range = this.quill.getSelection();\n                            this.quill.scroll.descendants(SyntaxCodeBlock).forEach(function(code) {\n                                code.highlight(_this3.options.highlight);\n                            });\n                            this.quill.update(_quill2.default.sources.SILENT);\n                            if (range != null) {\n                                this.quill.setSelection(range, _quill2.default.sources.SILENT);\n                            }\n                        }\n                    }\n                ]);\n                return Syntax;\n            }(_module2.default);\n            Syntax.DEFAULTS = {\n                highlight: function() {\n                    if (window.hljs == null) return null;\n                    return function(text) {\n                        var result = window.hljs.highlightAuto(text);\n                        return result.value;\n                    };\n                }(),\n                interval: 1000\n            };\n            exports1.CodeBlock = SyntaxCodeBlock;\n            exports1.CodeToken = CodeToken;\n            exports1.default = Syntax;\n        /***/ },\n        /* 76 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=13 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=9 y1=4 y2=4></line> </svg>';\n        /***/ },\n        /* 77 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=14 x2=4 y1=14 y2=14></line> <line class=ql-stroke x1=12 x2=6 y1=4 y2=4></line> </svg>';\n        /***/ },\n        /* 78 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=5 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=9 y1=4 y2=4></line> </svg>';\n        /***/ },\n        /* 79 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=3 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=3 y1=4 y2=4></line> </svg>';\n        /***/ },\n        /* 80 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <g class=\"ql-fill ql-color-label\"> <polygon points=\"6 6.868 6 6 5 6 5 7 5.942 7 6 6.868\"></polygon> <rect height=1 width=1 x=4 y=4></rect> <polygon points=\"6.817 5 6 5 6 6 6.38 6 6.817 5\"></polygon> <rect height=1 width=1 x=2 y=6></rect> <rect height=1 width=1 x=3 y=5></rect> <rect height=1 width=1 x=4 y=7></rect> <polygon points=\"4 11.439 4 11 3 11 3 12 3.755 12 4 11.439\"></polygon> <rect height=1 width=1 x=2 y=12></rect> <rect height=1 width=1 x=2 y=9></rect> <rect height=1 width=1 x=2 y=15></rect> <polygon points=\"4.63 10 4 10 4 11 4.192 11 4.63 10\"></polygon> <rect height=1 width=1 x=3 y=8></rect> <path d=M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z></path> <path d=M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z></path> <path d=M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z></path> <rect height=1 width=1 x=12 y=2></rect> <rect height=1 width=1 x=11 y=3></rect> <path d=M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z></path> <rect height=1 width=1 x=2 y=3></rect> <rect height=1 width=1 x=6 y=2></rect> <rect height=1 width=1 x=3 y=2></rect> <rect height=1 width=1 x=5 y=3></rect> <rect height=1 width=1 x=9 y=2></rect> <rect height=1 width=1 x=15 y=14></rect> <polygon points=\"13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174\"></polygon> <rect height=1 width=1 x=13 y=7></rect> <rect height=1 width=1 x=15 y=5></rect> <rect height=1 width=1 x=14 y=6></rect> <rect height=1 width=1 x=15 y=8></rect> <rect height=1 width=1 x=14 y=9></rect> <path d=M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z></path> <rect height=1 width=1 x=14 y=3></rect> <polygon points=\"12 6.868 12 6 11.62 6 12 6.868\"></polygon> <rect height=1 width=1 x=15 y=2></rect> <rect height=1 width=1 x=12 y=5></rect> <rect height=1 width=1 x=13 y=4></rect> <polygon points=\"12.933 9 13 9 13 8 12.495 8 12.933 9\"></polygon> <rect height=1 width=1 x=9 y=14></rect> <rect height=1 width=1 x=8 y=15></rect> <path d=M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z></path> <rect height=1 width=1 x=5 y=15></rect> <path d=M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z></path> <rect height=1 width=1 x=11 y=15></rect> <path d=M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z></path> <rect height=1 width=1 x=14 y=15></rect> <rect height=1 width=1 x=15 y=11></rect> </g> <polyline class=ql-stroke points=\"5.5 13 9 5 12.5 13\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=11 y2=11></line> </svg>';\n        /***/ },\n        /* 81 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <rect class=\"ql-fill ql-stroke\" height=3 width=3 x=4 y=5></rect> <rect class=\"ql-fill ql-stroke\" height=3 width=3 x=11 y=5></rect> <path class=\"ql-even ql-fill ql-stroke\" d=M7,8c0,4.031-3,5-3,5></path> <path class=\"ql-even ql-fill ql-stroke\" d=M14,8c0,4.031-3,5-3,5></path> </svg>';\n        /***/ },\n        /* 82 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <path class=ql-stroke d=M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z></path> <path class=ql-stroke d=M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z></path> </svg>';\n        /***/ },\n        /* 83 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg class=\"\" viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=5 x2=13 y1=3 y2=3></line> <line class=ql-stroke x1=6 x2=9.35 y1=12 y2=3></line> <line class=ql-stroke x1=11 x2=15 y1=11 y2=15></line> <line class=ql-stroke x1=15 x2=11 y1=11 y2=15></line> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=7 x=2 y=14></rect> </svg>';\n        /***/ },\n        /* 84 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <line class=\"ql-color-label ql-stroke ql-transparent\" x1=3 x2=15 y1=15 y2=15></line> <polyline class=ql-stroke points=\"5.5 11 9 3 12.5 11\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=9 y2=9></line> </svg>';\n        /***/ },\n        /* 85 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <polygon class=\"ql-stroke ql-fill\" points=\"3 11 5 9 3 7 3 11\"></polygon> <line class=\"ql-stroke ql-fill\" x1=15 x2=11 y1=4 y2=4></line> <path class=ql-fill d=M11,3a3,3,0,0,0,0,6h1V3H11Z></path> <rect class=ql-fill height=11 width=1 x=11 y=4></rect> <rect class=ql-fill height=11 width=1 x=13 y=4></rect> </svg>';\n        /***/ },\n        /* 86 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <polygon class=\"ql-stroke ql-fill\" points=\"15 12 13 10 15 8 15 12\"></polygon> <line class=\"ql-stroke ql-fill\" x1=9 x2=5 y1=4 y2=4></line> <path class=ql-fill d=M5,3A3,3,0,0,0,5,9H6V3H5Z></path> <rect class=ql-fill height=11 width=1 x=5 y=4></rect> <rect class=ql-fill height=11 width=1 x=7 y=4></rect> </svg>';\n        /***/ },\n        /* 87 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M14,16H4a1,1,0,0,1,0-2H14A1,1,0,0,1,14,16Z /> <path class=ql-fill d=M14,4H4A1,1,0,0,1,4,2H14A1,1,0,0,1,14,4Z /> <rect class=ql-fill x=3 y=6 width=12 height=6 rx=1 ry=1 /> </svg>';\n        /***/ },\n        /* 88 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M13,16H5a1,1,0,0,1,0-2h8A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H5A1,1,0,0,1,5,2h8A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=2 y=6 width=14 height=6 rx=1 ry=1 /> </svg>';\n        /***/ },\n        /* 89 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15,8H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,8Z /> <path class=ql-fill d=M15,12H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,12Z /> <path class=ql-fill d=M15,16H5a1,1,0,0,1,0-2H15A1,1,0,0,1,15,16Z /> <path class=ql-fill d=M15,4H5A1,1,0,0,1,5,2H15A1,1,0,0,1,15,4Z /> <rect class=ql-fill x=2 y=6 width=8 height=6 rx=1 ry=1 /> </svg>';\n        /***/ },\n        /* 90 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M5,8H3A1,1,0,0,1,3,6H5A1,1,0,0,1,5,8Z /> <path class=ql-fill d=M5,12H3a1,1,0,0,1,0-2H5A1,1,0,0,1,5,12Z /> <path class=ql-fill d=M13,16H3a1,1,0,0,1,0-2H13A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H3A1,1,0,0,1,3,2H13A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=8 y=6 width=8 height=6 rx=1 ry=1 transform=\"translate(24 18) rotate(-180)\"/> </svg>';\n        /***/ },\n        /* 91 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z></path> <rect class=ql-fill height=1.6 rx=0.8 ry=0.8 width=5 x=5.15 y=6.2></rect> <path class=ql-fill d=M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z></path> </svg>';\n        /***/ },\n        /* 92 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewBox=\"0 0 18 18\"> <path class=ql-fill d=M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z /> </svg>';\n        /***/ },\n        /* 93 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewBox=\"0 0 18 18\"> <path class=ql-fill d=M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z /> </svg>';\n        /***/ },\n        /* 94 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=13 y1=4 y2=4></line> <line class=ql-stroke x1=5 x2=11 y1=14 y2=14></line> <line class=ql-stroke x1=8 x2=10 y1=14 y2=4></line> </svg>';\n        /***/ },\n        /* 95 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <rect class=ql-stroke height=10 width=12 x=3 y=4></rect> <circle class=ql-fill cx=6 cy=7 r=1></circle> <polyline class=\"ql-even ql-fill\" points=\"5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12\"></polyline> </svg>';\n        /***/ },\n        /* 96 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=\"ql-fill ql-stroke\" points=\"3 7 3 11 5 9 3 7\"></polyline> </svg>';\n        /***/ },\n        /* 97 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\"5 7 5 11 3 9 5 7\"></polyline> </svg>';\n        /***/ },\n        /* 98 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=11 y1=7 y2=11></line> <path class=\"ql-even ql-stroke\" d=M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z></path> <path class=\"ql-even ql-stroke\" d=M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z></path> </svg>';\n        /***/ },\n        /* 99 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=7 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=7 x2=15 y1=14 y2=14></line> <line class=\"ql-stroke ql-thin\" x1=2.5 x2=4.5 y1=5.5 y2=5.5></line> <path class=ql-fill d=M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z></path> <path class=\"ql-stroke ql-thin\" d=M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156></path> <path class=\"ql-stroke ql-thin\" d=M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109></path> </svg>';\n        /***/ },\n        /* 100 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=6 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=6 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=6 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=3 y1=4 y2=4></line> <line class=ql-stroke x1=3 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=3 y1=14 y2=14></line> </svg>';\n        /***/ },\n        /* 101 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg class=\"\" viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=9 x2=15 y1=4 y2=4></line> <polyline class=ql-stroke points=\"3 4 4 5 6 3\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=14 y2=14></line> <polyline class=ql-stroke points=\"3 14 4 15 6 13\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\"3 9 4 10 6 8\"></polyline> </svg>';\n        /***/ },\n        /* 102 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z /> <path class=ql-fill d=M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z /> </svg>';\n        /***/ },\n        /* 103 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z /> <path class=ql-fill d=M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z /> </svg>';\n        /***/ },\n        /* 104 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <line class=\"ql-stroke ql-thin\" x1=15.5 x2=2.5 y1=8.5 y2=9.5></line> <path class=ql-fill d=M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z></path> <path class=ql-fill d=M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z></path> </svg>';\n        /***/ },\n        /* 105 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <path class=ql-stroke d=M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3></path> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=12 x=3 y=15></rect> </svg>';\n        /***/ },\n        /* 106 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=12 width=1 x=5 y=3></rect> <rect class=ql-fill height=12 width=1 x=12 y=3></rect> <rect class=ql-fill height=2 width=8 x=5 y=8></rect> <rect class=ql-fill height=1 width=3 x=3 y=5></rect> <rect class=ql-fill height=1 width=3 x=3 y=7></rect> <rect class=ql-fill height=1 width=3 x=3 y=10></rect> <rect class=ql-fill height=1 width=3 x=3 y=12></rect> <rect class=ql-fill height=1 width=3 x=12 y=5></rect> <rect class=ql-fill height=1 width=3 x=12 y=7></rect> <rect class=ql-fill height=1 width=3 x=12 y=10></rect> <rect class=ql-fill height=1 width=3 x=12 y=12></rect> </svg>';\n        /***/ },\n        /* 107 */ /***/ function(module1, exports1) {\n            module1.exports = '<svg viewbox=\"0 0 18 18\"> <polygon class=ql-stroke points=\"7 11 9 13 11 11 7 11\"></polygon> <polygon class=ql-stroke points=\"7 7 9 5 11 7 7 7\"></polygon> </svg>';\n        /***/ },\n        /* 108 */ /***/ function(module1, exports1, __nested_webpack_require_642536__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.default = exports1.BubbleTooltip = undefined;\n            var _get = function get(object, property, receiver) {\n                if (object === null) object = Function.prototype;\n                var desc = Object.getOwnPropertyDescriptor(object, property);\n                if (desc === undefined) {\n                    var parent = Object.getPrototypeOf(object);\n                    if (parent === null) {\n                        return undefined;\n                    } else {\n                        return get(parent, property, receiver);\n                    }\n                } else if (\"value\" in desc) {\n                    return desc.value;\n                } else {\n                    var getter = desc.get;\n                    if (getter === undefined) {\n                        return undefined;\n                    }\n                    return getter.call(receiver);\n                }\n            };\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            var _extend = __nested_webpack_require_642536__(3);\n            var _extend2 = _interopRequireDefault(_extend);\n            var _emitter = __nested_webpack_require_642536__(8);\n            var _emitter2 = _interopRequireDefault(_emitter);\n            var _base = __nested_webpack_require_642536__(43);\n            var _base2 = _interopRequireDefault(_base);\n            var _selection = __nested_webpack_require_642536__(15);\n            var _icons = __nested_webpack_require_642536__(41);\n            var _icons2 = _interopRequireDefault(_icons);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _possibleConstructorReturn(self1, call) {\n                if (!self1) {\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                }\n                return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self1;\n            }\n            function _inherits(subClass, superClass) {\n                if (typeof superClass !== \"function\" && superClass !== null) {\n                    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n                }\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\n                    constructor: {\n                        value: subClass,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            }\n            var TOOLBAR_CONFIG = [\n                [\n                    \"bold\",\n                    \"italic\",\n                    \"link\"\n                ],\n                [\n                    {\n                        header: 1\n                    },\n                    {\n                        header: 2\n                    },\n                    \"blockquote\"\n                ]\n            ];\n            var BubbleTheme = function(_BaseTheme) {\n                _inherits(BubbleTheme, _BaseTheme);\n                function BubbleTheme(quill, options) {\n                    _classCallCheck(this, BubbleTheme);\n                    if (options.modules.toolbar != null && options.modules.toolbar.container == null) {\n                        options.modules.toolbar.container = TOOLBAR_CONFIG;\n                    }\n                    var _this = _possibleConstructorReturn(this, (BubbleTheme.__proto__ || Object.getPrototypeOf(BubbleTheme)).call(this, quill, options));\n                    _this.quill.container.classList.add(\"ql-bubble\");\n                    return _this;\n                }\n                _createClass(BubbleTheme, [\n                    {\n                        key: \"extendToolbar\",\n                        value: function extendToolbar(toolbar) {\n                            this.tooltip = new BubbleTooltip(this.quill, this.options.bounds);\n                            this.tooltip.root.appendChild(toolbar.container);\n                            this.buildButtons([].slice.call(toolbar.container.querySelectorAll(\"button\")), _icons2.default);\n                            this.buildPickers([].slice.call(toolbar.container.querySelectorAll(\"select\")), _icons2.default);\n                        }\n                    }\n                ]);\n                return BubbleTheme;\n            }(_base2.default);\n            BubbleTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {\n                modules: {\n                    toolbar: {\n                        handlers: {\n                            link: function link(value) {\n                                if (!value) {\n                                    this.quill.format(\"link\", false);\n                                } else {\n                                    this.quill.theme.tooltip.edit();\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n            var BubbleTooltip = function(_BaseTooltip) {\n                _inherits(BubbleTooltip, _BaseTooltip);\n                function BubbleTooltip(quill, bounds) {\n                    _classCallCheck(this, BubbleTooltip);\n                    var _this2 = _possibleConstructorReturn(this, (BubbleTooltip.__proto__ || Object.getPrototypeOf(BubbleTooltip)).call(this, quill, bounds));\n                    _this2.quill.on(_emitter2.default.events.EDITOR_CHANGE, function(type, range, oldRange, source) {\n                        if (type !== _emitter2.default.events.SELECTION_CHANGE) return;\n                        if (range != null && range.length > 0 && source === _emitter2.default.sources.USER) {\n                            _this2.show();\n                            // Lock our width so we will expand beyond our offsetParent boundaries\n                            _this2.root.style.left = \"0px\";\n                            _this2.root.style.width = \"\";\n                            _this2.root.style.width = _this2.root.offsetWidth + \"px\";\n                            var lines = _this2.quill.getLines(range.index, range.length);\n                            if (lines.length === 1) {\n                                _this2.position(_this2.quill.getBounds(range));\n                            } else {\n                                var lastLine = lines[lines.length - 1];\n                                var index = _this2.quill.getIndex(lastLine);\n                                var length = Math.min(lastLine.length() - 1, range.index + range.length - index);\n                                var _bounds = _this2.quill.getBounds(new _selection.Range(index, length));\n                                _this2.position(_bounds);\n                            }\n                        } else if (document.activeElement !== _this2.textbox && _this2.quill.hasFocus()) {\n                            _this2.hide();\n                        }\n                    });\n                    return _this2;\n                }\n                _createClass(BubbleTooltip, [\n                    {\n                        key: \"listen\",\n                        value: function listen() {\n                            var _this3 = this;\n                            _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), \"listen\", this).call(this);\n                            this.root.querySelector(\".ql-close\").addEventListener(\"click\", function() {\n                                _this3.root.classList.remove(\"ql-editing\");\n                            });\n                            this.quill.on(_emitter2.default.events.SCROLL_OPTIMIZE, function() {\n                                // Let selection be restored by toolbar handlers before repositioning\n                                setTimeout(function() {\n                                    if (_this3.root.classList.contains(\"ql-hidden\")) return;\n                                    var range = _this3.quill.getSelection();\n                                    if (range != null) {\n                                        _this3.position(_this3.quill.getBounds(range));\n                                    }\n                                }, 1);\n                            });\n                        }\n                    },\n                    {\n                        key: \"cancel\",\n                        value: function cancel() {\n                            this.show();\n                        }\n                    },\n                    {\n                        key: \"position\",\n                        value: function position(reference) {\n                            var shift = _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), \"position\", this).call(this, reference);\n                            var arrow = this.root.querySelector(\".ql-tooltip-arrow\");\n                            arrow.style.marginLeft = \"\";\n                            if (shift === 0) return shift;\n                            arrow.style.marginLeft = -1 * shift - arrow.offsetWidth / 2 + \"px\";\n                        }\n                    }\n                ]);\n                return BubbleTooltip;\n            }(_base.BaseTooltip);\n            BubbleTooltip.TEMPLATE = [\n                '<span class=\"ql-tooltip-arrow\"></span>',\n                '<div class=\"ql-tooltip-editor\">',\n                '<input type=\"text\" data-formula=\"e=mc^2\" data-link=\"https://quilljs.com\" data-video=\"Embed URL\">',\n                '<a class=\"ql-close\"></a>',\n                \"</div>\"\n            ].join(\"\");\n            exports1.BubbleTooltip = BubbleTooltip;\n            exports1.default = BubbleTheme;\n        /***/ },\n        /* 109 */ /***/ function(module1, exports1, __nested_webpack_require_653689__) {\n            module1.exports = __nested_webpack_require_653689__(63);\n        /***/ }\n    ])[\"default\"];\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quill/dist/quill.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-quill/lib/index.js":
/*!***********************************************!*\
  !*** ./node_modules/react-quill/lib/index.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n/*\nReact-Quill\nhttps://github.com/zenoamaro/react-quill\n*/ var __extends = (void 0) && (void 0).__extends || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __assign = (void 0) && (void 0).__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArrays = (void 0) && (void 0).__spreadArrays || function() {\n    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;\n    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];\n    return r;\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nvar react_1 = __importDefault(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nvar react_dom_1 = __importDefault(__webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\"));\nvar isEqual_1 = __importDefault(__webpack_require__(/*! lodash/isEqual */ \"(app-pages-browser)/./node_modules/lodash/isEqual.js\"));\nvar quill_1 = __importDefault(__webpack_require__(/*! quill */ \"(app-pages-browser)/./node_modules/quill/dist/quill.js\"));\nvar ReactQuill = /** @class */ function(_super) {\n    __extends(ReactQuill, _super);\n    function ReactQuill(props) {\n        var _this = _super.call(this, props) || this;\n        /*\n        Changing one of these props should cause a full re-render and a\n        re-instantiation of the Quill editor.\n        */ _this.dirtyProps = [\n            \"modules\",\n            \"formats\",\n            \"bounds\",\n            \"theme\",\n            \"children\"\n        ];\n        /*\n        Changing one of these props should cause a regular update. These are mostly\n        props that act on the container, rather than the quillized editing area.\n        */ _this.cleanProps = [\n            \"id\",\n            \"className\",\n            \"style\",\n            \"placeholder\",\n            \"tabIndex\",\n            \"onChange\",\n            \"onChangeSelection\",\n            \"onFocus\",\n            \"onBlur\",\n            \"onKeyPress\",\n            \"onKeyDown\",\n            \"onKeyUp\"\n        ];\n        _this.state = {\n            generation: 0\n        };\n        /*\n        Tracks the internal selection of the Quill editor\n        */ _this.selection = null;\n        _this.onEditorChange = function(eventName, rangeOrDelta, oldRangeOrDelta, source) {\n            var _a, _b, _c, _d;\n            if (eventName === \"text-change\") {\n                (_b = (_a = _this).onEditorChangeText) === null || _b === void 0 ? void 0 : _b.call(_a, _this.editor.root.innerHTML, rangeOrDelta, source, _this.unprivilegedEditor);\n            } else if (eventName === \"selection-change\") {\n                (_d = (_c = _this).onEditorChangeSelection) === null || _d === void 0 ? void 0 : _d.call(_c, rangeOrDelta, source, _this.unprivilegedEditor);\n            }\n        };\n        var value = _this.isControlled() ? props.value : props.defaultValue;\n        _this.value = value !== null && value !== void 0 ? value : \"\";\n        return _this;\n    }\n    ReactQuill.prototype.validateProps = function(props) {\n        var _a;\n        if (react_1.default.Children.count(props.children) > 1) throw new Error(\"The Quill editing area can only be composed of a single React element.\");\n        if (react_1.default.Children.count(props.children)) {\n            var child = react_1.default.Children.only(props.children);\n            if (((_a = child) === null || _a === void 0 ? void 0 : _a.type) === \"textarea\") throw new Error(\"Quill does not support editing on a <textarea>. Use a <div> instead.\");\n        }\n        if (this.lastDeltaChangeSet && props.value === this.lastDeltaChangeSet) throw new Error(\"You are passing the `delta` object from the `onChange` event back \" + \"as `value`. You most probably want `editor.getContents()` instead. \" + \"See: https://github.com/zenoamaro/react-quill#using-deltas\");\n    };\n    ReactQuill.prototype.shouldComponentUpdate = function(nextProps, nextState) {\n        var _this = this;\n        var _a;\n        this.validateProps(nextProps);\n        // If the editor hasn't been instantiated yet, or the component has been\n        // regenerated, we already know we should update.\n        if (!this.editor || this.state.generation !== nextState.generation) {\n            return true;\n        }\n        // Handle value changes in-place\n        if (\"value\" in nextProps) {\n            var prevContents = this.getEditorContents();\n            var nextContents = (_a = nextProps.value, _a !== null && _a !== void 0 ? _a : \"\");\n            // NOTE: Seeing that Quill is missing a way to prevent edits, we have to\n            //       settle for a hybrid between controlled and uncontrolled mode. We\n            //       can't prevent the change, but we'll still override content\n            //       whenever `value` differs from current state.\n            // NOTE: Comparing an HTML string and a Quill Delta will always trigger a\n            //       change, regardless of whether they represent the same document.\n            if (!this.isEqualValue(nextContents, prevContents)) {\n                this.setEditorContents(this.editor, nextContents);\n            }\n        }\n        // Handle read-only changes in-place\n        if (nextProps.readOnly !== this.props.readOnly) {\n            this.setEditorReadOnly(this.editor, nextProps.readOnly);\n        }\n        // Clean and Dirty props require a render\n        return __spreadArrays(this.cleanProps, this.dirtyProps).some(function(prop) {\n            return !isEqual_1.default(nextProps[prop], _this.props[prop]);\n        });\n    };\n    ReactQuill.prototype.shouldComponentRegenerate = function(nextProps) {\n        var _this = this;\n        // Whenever a `dirtyProp` changes, the editor needs reinstantiation.\n        return this.dirtyProps.some(function(prop) {\n            return !isEqual_1.default(nextProps[prop], _this.props[prop]);\n        });\n    };\n    ReactQuill.prototype.componentDidMount = function() {\n        this.instantiateEditor();\n        this.setEditorContents(this.editor, this.getEditorContents());\n    };\n    ReactQuill.prototype.componentWillUnmount = function() {\n        this.destroyEditor();\n    };\n    ReactQuill.prototype.componentDidUpdate = function(prevProps, prevState) {\n        var _this = this;\n        // If we're changing one of the `dirtyProps`, the entire Quill Editor needs\n        // to be re-instantiated. Regenerating the editor will cause the whole tree,\n        // including the container, to be cleaned up and re-rendered from scratch.\n        // Store the contents so they can be restored later.\n        if (this.editor && this.shouldComponentRegenerate(prevProps)) {\n            var delta = this.editor.getContents();\n            var selection = this.editor.getSelection();\n            this.regenerationSnapshot = {\n                delta: delta,\n                selection: selection\n            };\n            this.setState({\n                generation: this.state.generation + 1\n            });\n            this.destroyEditor();\n        }\n        // The component has been regenerated, so it must be re-instantiated, and\n        // its content must be restored to the previous values from the snapshot.\n        if (this.state.generation !== prevState.generation) {\n            var _a = this.regenerationSnapshot, delta = _a.delta, selection_1 = _a.selection;\n            delete this.regenerationSnapshot;\n            this.instantiateEditor();\n            var editor_1 = this.editor;\n            editor_1.setContents(delta);\n            postpone(function() {\n                return _this.setEditorSelection(editor_1, selection_1);\n            });\n        }\n    };\n    ReactQuill.prototype.instantiateEditor = function() {\n        if (this.editor) {\n            this.hookEditor(this.editor);\n        } else {\n            this.editor = this.createEditor(this.getEditingArea(), this.getEditorConfig());\n        }\n    };\n    ReactQuill.prototype.destroyEditor = function() {\n        if (!this.editor) return;\n        this.unhookEditor(this.editor);\n    };\n    /*\n    We consider the component to be controlled if `value` is being sent in props.\n    */ ReactQuill.prototype.isControlled = function() {\n        return \"value\" in this.props;\n    };\n    ReactQuill.prototype.getEditorConfig = function() {\n        return {\n            bounds: this.props.bounds,\n            formats: this.props.formats,\n            modules: this.props.modules,\n            placeholder: this.props.placeholder,\n            readOnly: this.props.readOnly,\n            scrollingContainer: this.props.scrollingContainer,\n            tabIndex: this.props.tabIndex,\n            theme: this.props.theme\n        };\n    };\n    ReactQuill.prototype.getEditor = function() {\n        if (!this.editor) throw new Error(\"Accessing non-instantiated editor\");\n        return this.editor;\n    };\n    /**\n    Creates an editor on the given element. The editor will be passed the\n    configuration, have its events bound,\n    */ ReactQuill.prototype.createEditor = function(element, config) {\n        var editor = new quill_1.default(element, config);\n        if (config.tabIndex != null) {\n            this.setEditorTabIndex(editor, config.tabIndex);\n        }\n        this.hookEditor(editor);\n        return editor;\n    };\n    ReactQuill.prototype.hookEditor = function(editor) {\n        // Expose the editor on change events via a weaker, unprivileged proxy\n        // object that does not allow accidentally modifying editor state.\n        this.unprivilegedEditor = this.makeUnprivilegedEditor(editor);\n        // Using `editor-change` allows picking up silent updates, like selection\n        // changes on typing.\n        editor.on(\"editor-change\", this.onEditorChange);\n    };\n    ReactQuill.prototype.unhookEditor = function(editor) {\n        editor.off(\"editor-change\", this.onEditorChange);\n    };\n    ReactQuill.prototype.getEditorContents = function() {\n        return this.value;\n    };\n    ReactQuill.prototype.getEditorSelection = function() {\n        return this.selection;\n    };\n    /*\n    True if the value is a Delta instance or a Delta look-alike.\n    */ ReactQuill.prototype.isDelta = function(value) {\n        return value && value.ops;\n    };\n    /*\n    Special comparison function that knows how to compare Deltas.\n    */ ReactQuill.prototype.isEqualValue = function(value, nextValue) {\n        if (this.isDelta(value) && this.isDelta(nextValue)) {\n            return isEqual_1.default(value.ops, nextValue.ops);\n        } else {\n            return isEqual_1.default(value, nextValue);\n        }\n    };\n    /*\n    Replace the contents of the editor, but keep the previous selection hanging\n    around so that the cursor won't move.\n    */ ReactQuill.prototype.setEditorContents = function(editor, value) {\n        var _this = this;\n        this.value = value;\n        var sel = this.getEditorSelection();\n        if (typeof value === \"string\") {\n            editor.setContents(editor.clipboard.convert(value));\n        } else {\n            editor.setContents(value);\n        }\n        postpone(function() {\n            return _this.setEditorSelection(editor, sel);\n        });\n    };\n    ReactQuill.prototype.setEditorSelection = function(editor, range) {\n        this.selection = range;\n        if (range) {\n            // Validate bounds before applying.\n            var length_1 = editor.getLength();\n            range.index = Math.max(0, Math.min(range.index, length_1 - 1));\n            range.length = Math.max(0, Math.min(range.length, length_1 - 1 - range.index));\n            editor.setSelection(range);\n        }\n    };\n    ReactQuill.prototype.setEditorTabIndex = function(editor, tabIndex) {\n        var _a, _b;\n        if ((_b = (_a = editor) === null || _a === void 0 ? void 0 : _a.scroll) === null || _b === void 0 ? void 0 : _b.domNode) {\n            editor.scroll.domNode.tabIndex = tabIndex;\n        }\n    };\n    ReactQuill.prototype.setEditorReadOnly = function(editor, value) {\n        if (value) {\n            editor.disable();\n        } else {\n            editor.enable();\n        }\n    };\n    /*\n    Returns a weaker, unprivileged proxy object that only exposes read-only\n    accessors found on the editor instance, without any state-modifying methods.\n    */ ReactQuill.prototype.makeUnprivilegedEditor = function(editor) {\n        var e = editor;\n        return {\n            getHTML: function() {\n                return e.root.innerHTML;\n            },\n            getLength: e.getLength.bind(e),\n            getText: e.getText.bind(e),\n            getContents: e.getContents.bind(e),\n            getSelection: e.getSelection.bind(e),\n            getBounds: e.getBounds.bind(e)\n        };\n    };\n    ReactQuill.prototype.getEditingArea = function() {\n        if (!this.editingArea) {\n            throw new Error(\"Instantiating on missing editing area\");\n        }\n        var element = react_dom_1.default.findDOMNode(this.editingArea);\n        if (!element) {\n            throw new Error(\"Cannot find element for editing area\");\n        }\n        if (element.nodeType === 3) {\n            throw new Error(\"Editing area cannot be a text node\");\n        }\n        return element;\n    };\n    /*\n    Renders an editor area, unless it has been provided one to clone.\n    */ ReactQuill.prototype.renderEditingArea = function() {\n        var _this = this;\n        var _a = this.props, children = _a.children, preserveWhitespace = _a.preserveWhitespace;\n        var generation = this.state.generation;\n        var properties = {\n            key: generation,\n            ref: function(instance) {\n                _this.editingArea = instance;\n            }\n        };\n        if (react_1.default.Children.count(children)) {\n            return react_1.default.cloneElement(react_1.default.Children.only(children), properties);\n        }\n        return preserveWhitespace ? react_1.default.createElement(\"pre\", __assign({}, properties)) : react_1.default.createElement(\"div\", __assign({}, properties));\n    };\n    ReactQuill.prototype.render = function() {\n        var _a;\n        return react_1.default.createElement(\"div\", {\n            id: this.props.id,\n            style: this.props.style,\n            key: this.state.generation,\n            className: \"quill \" + (_a = this.props.className, _a !== null && _a !== void 0 ? _a : \"\"),\n            onKeyPress: this.props.onKeyPress,\n            onKeyDown: this.props.onKeyDown,\n            onKeyUp: this.props.onKeyUp\n        }, this.renderEditingArea());\n    };\n    ReactQuill.prototype.onEditorChangeText = function(value, delta, source, editor) {\n        var _a, _b;\n        if (!this.editor) return;\n        // We keep storing the same type of value as what the user gives us,\n        // so that value comparisons will be more stable and predictable.\n        var nextContents = this.isDelta(this.value) ? editor.getContents() : editor.getHTML();\n        if (nextContents !== this.getEditorContents()) {\n            // Taint this `delta` object, so we can recognize whether the user\n            // is trying to send it back as `value`, preventing a likely loop.\n            this.lastDeltaChangeSet = delta;\n            this.value = nextContents;\n            (_b = (_a = this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, value, delta, source, editor);\n        }\n    };\n    ReactQuill.prototype.onEditorChangeSelection = function(nextSelection, source, editor) {\n        var _a, _b, _c, _d, _e, _f;\n        if (!this.editor) return;\n        var currentSelection = this.getEditorSelection();\n        var hasGainedFocus = !currentSelection && nextSelection;\n        var hasLostFocus = currentSelection && !nextSelection;\n        if (isEqual_1.default(nextSelection, currentSelection)) return;\n        this.selection = nextSelection;\n        (_b = (_a = this.props).onChangeSelection) === null || _b === void 0 ? void 0 : _b.call(_a, nextSelection, source, editor);\n        if (hasGainedFocus) {\n            (_d = (_c = this.props).onFocus) === null || _d === void 0 ? void 0 : _d.call(_c, nextSelection, source, editor);\n        } else if (hasLostFocus) {\n            (_f = (_e = this.props).onBlur) === null || _f === void 0 ? void 0 : _f.call(_e, currentSelection, source, editor);\n        }\n    };\n    ReactQuill.prototype.focus = function() {\n        if (!this.editor) return;\n        this.editor.focus();\n    };\n    ReactQuill.prototype.blur = function() {\n        if (!this.editor) return;\n        this.selection = null;\n        this.editor.blur();\n    };\n    ReactQuill.displayName = \"React Quill\";\n    /*\n    Export Quill to be able to call `register`\n    */ ReactQuill.Quill = quill_1.default;\n    ReactQuill.defaultProps = {\n        theme: \"snow\",\n        modules: {},\n        readOnly: false\n    };\n    return ReactQuill;\n}(react_1.default.Component);\n/*\nSmall helper to execute a function in the next micro-tick.\n*/ function postpone(fn) {\n    Promise.resolve().then(fn);\n}\nmodule.exports = ReactQuill; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-quill/lib/index.js\n"));

/***/ })

}]);